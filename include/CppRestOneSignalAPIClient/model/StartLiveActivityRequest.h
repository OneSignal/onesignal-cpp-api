/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StartLiveActivityRequest.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_StartLiveActivityRequest_H_
#define COM_ONESIGNAL_CLIENT_MODEL_StartLiveActivityRequest_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/Object.h"
#include "CppRestOneSignalAPIClient/model/FilterExpression.h"
#include "CppRestOneSignalAPIClient/model/LanguageStringMap.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace com {
namespace onesignal {
namespace client {
namespace model {

class LanguageStringMap;
class FilterExpression;

/// <summary>
/// 
/// </summary>
class  StartLiveActivityRequest
    : public ModelBase
{
public:
    StartLiveActivityRequest();
    virtual ~StartLiveActivityRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// StartLiveActivityRequest members

    /// <summary>
    /// An internal name to assist with your campaign organization. This does not get displayed in the message itself.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEvent() const;
    bool eventIsSet() const;
    void unsetEvent();

    void setEvent(const utility::string_t& value);

    /// <summary>
    /// Set a unique activity_id to track and manage the Live Activity.
    /// </summary>
    utility::string_t getActivityId() const;
    bool activityIdIsSet() const;
    void unsetActivity_id();

    void setActivityId(const utility::string_t& value);

    /// <summary>
    /// Default/static data to initialize the Live Activity upon start.
    /// </summary>
    std::shared_ptr<Object> getEventAttributes() const;
    bool eventAttributesIsSet() const;
    void unsetEvent_attributes();

    void setEventAttributes(const std::shared_ptr<Object>& value);

    /// <summary>
    /// Dynamic content used to update the running Live Activity at start. Must match the ContentState interface defined in your app.
    /// </summary>
    std::shared_ptr<Object> getEventUpdates() const;
    bool eventUpdatesIsSet() const;
    void unsetEvent_updates();

    void setEventUpdates(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LanguageStringMap> getContents() const;
    bool contentsIsSet() const;
    void unsetContents();

    void setContents(const std::shared_ptr<LanguageStringMap>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LanguageStringMap> getHeadings() const;
    bool headingsIsSet() const;
    void unsetHeadings();

    void setHeadings(const std::shared_ptr<LanguageStringMap>& value);

    /// <summary>
    /// Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale.
    /// </summary>
    int32_t getStaleDate() const;
    bool staleDateIsSet() const;
    void unsetStale_date();

    void setStaleDate(int32_t value);

    /// <summary>
    /// Delivery priority through the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user&#39;s device. If not set, defaults to 10.
    /// </summary>
    int32_t getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(int32_t value);

    /// <summary>
    /// iOS 15+. A score to indicate how a notification should be displayed when grouped. Use a float between 0-1.
    /// </summary>
    double getIosRelevanceScore() const;
    bool iosRelevanceScoreIsSet() const;
    void unsetIos_relevance_score();

    void setIosRelevanceScore(double value);

    /// <summary>
    /// Correlation and idempotency key. A request received with this parameter will first look for another notification with the same idempotency key. If one exists, a notification will not be sent, and result of the previous operation will instead be returned. Therefore, if you plan on using this feature, it&#39;s important to use a good source of randomness to generate the UUID passed here. This key is only idempotent for 30 days. After 30 days, the notification could be removed from our system and a notification with the same idempotency key will be sent again.   See Idempotent Notification Requests for more details writeOnly: true 
    /// </summary>
    utility::string_t getIdempotencyKey() const;
    bool idempotencyKeyIsSet() const;
    void unsetIdempotency_key();

    void setIdempotencyKey(const utility::string_t& value);

    /// <summary>
    /// Target specific users by aliases assigned via API. An alias can be an external_id, onesignal_id, or a custom alias. Accepts an object where keys are alias labels and values are arrays of alias IDs to include Example usage: { \&quot;external_id\&quot;: [\&quot;exId1\&quot;, \&quot;extId2\&quot;], \&quot;internal_label\&quot;: [\&quot;id1\&quot;, \&quot;id2\&quot;] } Not compatible with any other targeting parameters. REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call Note: If targeting push, email, or sms subscribers with same ids, use with target_channel to indicate you are sending a push or email or sms.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getIncludeAliases();
    bool includeAliasesIsSet() const;
    void unsetInclude_aliases();

    void setIncludeAliases(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// Specific subscription ids to target. Not compatible with other targeting parameters.
    /// </summary>
    std::vector<utility::string_t>& getIncludeSubscriptionIds();
    bool includeSubscriptionIdsIsSet() const;
    void unsetInclude_subscription_ids();

    void setIncludeSubscriptionIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Segment names to include. Only compatible with excluded_segments.
    /// </summary>
    std::vector<utility::string_t>& getIncludedSegments();
    bool includedSegmentsIsSet() const;
    void unsetIncluded_segments();

    void setIncludedSegments(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Segment names to exclude. Only compatible with included_segments.
    /// </summary>
    std::vector<utility::string_t>& getExcludedSegments();
    bool excludedSegmentsIsSet() const;
    void unsetExcluded_segments();

    void setExcludedSegments(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FilterExpression>>& getFilters();
    bool filtersIsSet() const;
    void unsetFilters();

    void setFilters(const std::vector<std::shared_ptr<FilterExpression>>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Event;
    bool m_EventIsSet;
    utility::string_t m_Activity_id;
    bool m_Activity_idIsSet;
    std::shared_ptr<Object> m_Event_attributes;
    bool m_Event_attributesIsSet;
    std::shared_ptr<Object> m_Event_updates;
    bool m_Event_updatesIsSet;
    std::shared_ptr<LanguageStringMap> m_Contents;
    bool m_ContentsIsSet;
    std::shared_ptr<LanguageStringMap> m_Headings;
    bool m_HeadingsIsSet;
    int32_t m_Stale_date;
    bool m_Stale_dateIsSet;
    int32_t m_Priority;
    bool m_PriorityIsSet;
    double m_Ios_relevance_score;
    bool m_Ios_relevance_scoreIsSet;
    utility::string_t m_Idempotency_key;
    bool m_Idempotency_keyIsSet;
    std::map<utility::string_t, utility::string_t> m_Include_aliases;
    bool m_Include_aliasesIsSet;
    std::vector<utility::string_t> m_Include_subscription_ids;
    bool m_Include_subscription_idsIsSet;
    std::vector<utility::string_t> m_Included_segments;
    bool m_Included_segmentsIsSet;
    std::vector<utility::string_t> m_Excluded_segments;
    bool m_Excluded_segmentsIsSet;
    std::vector<std::shared_ptr<FilterExpression>> m_Filters;
    bool m_FiltersIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_StartLiveActivityRequest_H_ */
