/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.2.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateNotificationSuccessResponse.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_CreateNotificationSuccessResponse_H_
#define COM_ONESIGNAL_CLIENT_MODEL_CreateNotificationSuccessResponse_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace onesignal {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateNotificationSuccessResponse
    : public ModelBase
{
public:
    CreateNotificationSuccessResponse();
    virtual ~CreateNotificationSuccessResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateNotificationSuccessResponse members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExternalId() const;
    bool externalIdIsSet() const;
    void unsetExternal_id();

    void setExternalId(const utility::string_t& value);

    /// <summary>
    /// Errors include the identifiers that are invalid, or that there are no subscribers.
    /// </summary>
    std::shared_ptr<AnyType> getErrors() const;
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::shared_ptr<AnyType>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_External_id;
    bool m_External_idIsSet;
    std::shared_ptr<AnyType> m_Errors;
    bool m_ErrorsIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_CreateNotificationSuccessResponse_H_ */
