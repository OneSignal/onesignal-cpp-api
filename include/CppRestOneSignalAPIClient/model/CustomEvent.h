/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CustomEvent.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_CustomEvent_H_
#define COM_ONESIGNAL_CLIENT_MODEL_CustomEvent_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace com {
namespace onesignal {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CustomEvent
    : public ModelBase
{
public:
    CustomEvent();
    virtual ~CustomEvent();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CustomEvent members

    /// <summary>
    /// The identifier or name of the event. Maximum 128 characters.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The external ID of the user targeted for the event. Either the user&#39;s External ID or OneSignal ID is required.
    /// </summary>
    utility::string_t getExternalId() const;
    bool externalIdIsSet() const;
    void unsetExternal_id();

    void setExternalId(const utility::string_t& value);

    /// <summary>
    /// The OneSignal ID of the user targeted for the event. Either the user&#39;s External ID or OneSignal ID is required.
    /// </summary>
    utility::string_t getOnesignalId() const;
    bool onesignalIdIsSet() const;
    void unsetOnesignal_id();

    void setOnesignalId(const utility::string_t& value);

    /// <summary>
    /// Time the event occurred as an ISO8601 formatted string. Defaults to now if not included or past date provided.
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Properties or data related to the event, like {\&quot;geography\&quot;: \&quot;USA\&quot;}
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getPayload();
    bool payloadIsSet() const;
    void unsetPayload();

    void setPayload(const std::map<utility::string_t, utility::string_t>& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_External_id;
    bool m_External_idIsSet;
    utility::string_t m_Onesignal_id;
    bool m_Onesignal_idIsSet;
    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;
    std::map<utility::string_t, utility::string_t> m_Payload;
    bool m_PayloadIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_CustomEvent_H_ */
