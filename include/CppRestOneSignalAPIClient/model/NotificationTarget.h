/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NotificationTarget.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_NotificationTarget_H_
#define COM_ONESIGNAL_CLIENT_MODEL_NotificationTarget_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/model/PlayerNotificationTarget.h"
#include "CppRestOneSignalAPIClient/model/FilterNotificationTarget.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOneSignalAPIClient/model/SegmentNotificationTarget.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  NotificationTarget
    : public ModelBase
{
public:
    NotificationTarget();
    virtual ~NotificationTarget();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NotificationTarget members

    /// <summary>
    /// The segment names you want to target. Users in these segments will receive a notification. This targeting parameter is only compatible with excluded_segments. Example: [\&quot;Active Users\&quot;, \&quot;Inactive Users\&quot;] 
    /// </summary>
    std::vector<utility::string_t>& getIncludedSegments();
    bool includedSegmentsIsSet() const;
    void unsetIncluded_segments();

    void setIncludedSegments(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Segment that will be excluded when sending. Users in these segments will not receive a notification, even if they were included in included_segments. This targeting parameter is only compatible with included_segments. Example: [\&quot;Active Users\&quot;, \&quot;Inactive Users\&quot;] 
    /// </summary>
    std::vector<utility::string_t>& getExcludedSegments();
    bool excludedSegmentsIsSet() const;
    void unsetExcluded_segments();

    void setExcludedSegments(const std::vector<utility::string_t>& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot; or \&quot;&lt;\&quot; hours_ago &#x3D; number of hours before or after the users last session. Example: \&quot;1.1\&quot; 
    /// </summary>
    utility::string_t getLastSession() const;
    bool lastSessionIsSet() const;
    void unsetLast_session();

    void setLastSession(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot; or \&quot;&lt;\&quot; hours_ago &#x3D; number of hours before or after the users first session. Example: \&quot;1.1\&quot; 
    /// </summary>
    utility::string_t getFirstSession() const;
    bool firstSessionIsSet() const;
    void unsetFirst_session();

    void setFirstSession(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, \&quot;&#x3D;\&quot; or \&quot;!&#x3D;\&quot; value &#x3D; number sessions. Example: \&quot;1\&quot; 
    /// </summary>
    utility::string_t getSessionCount() const;
    bool sessionCountIsSet() const;
    void unsetSession_count();

    void setSessionCount(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, \&quot;&#x3D;\&quot; or \&quot;!&#x3D;\&quot; value &#x3D; Time in seconds the user has been in your app. Example: \&quot;3600\&quot; 
    /// </summary>
    utility::string_t getSessionTime() const;
    bool sessionTimeIsSet() const;
    void unsetSession_time();

    void setSessionTime(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, or \&quot;&#x3D;\&quot; value &#x3D; Amount in USD a user has spent on IAP (In App Purchases). Example: \&quot;0.99\&quot; 
    /// </summary>
    utility::string_t getAmountSpent() const;
    bool amountSpentIsSet() const;
    void unsetAmount_spent();

    void setAmountSpent(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot;, \&quot;&lt;\&quot; or \&quot;&#x3D;\&quot; key &#x3D; SKU purchased in your app as an IAP (In App Purchases). Example: \&quot;com.domain.100coinpack\&quot; value &#x3D; value of SKU to compare to. Example: \&quot;0.99\&quot; 
    /// </summary>
    utility::string_t getBoughtSku() const;
    bool boughtSkuIsSet() const;
    void unsetBought_sku();

    void setBoughtSku(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, \&quot;&#x3D;\&quot;, \&quot;!&#x3D;\&quot;, \&quot;exists\&quot;, \&quot;not_exists\&quot;, \&quot;time_elapsed_gt\&quot; (paid plan only) or \&quot;time_elapsed_lt\&quot; (paid plan only) See Time Operators key &#x3D; Tag key to compare. value &#x3D; Tag value to compare. Not required for \&quot;exists\&quot; or \&quot;not_exists\&quot;. Example: See Formatting Filters 
    /// </summary>
    utility::string_t getTag() const;
    bool tagIsSet() const;
    void unsetTag();

    void setTag(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&#x3D;\&quot; or \&quot;!&#x3D;\&quot; value &#x3D; 2 character language code. Example: \&quot;en\&quot;. For a list of all language codes see Language &amp; Localization. 
    /// </summary>
    utility::string_t getLanguage() const;
    bool languageIsSet() const;
    void unsetLanguage();

    void setLanguage(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&gt;\&quot;, \&quot;&lt;\&quot;, \&quot;&#x3D;\&quot; or \&quot;!&#x3D;\&quot; value &#x3D; app version. Example: \&quot;1.0.0\&quot; 
    /// </summary>
    utility::string_t getAppVersion() const;
    bool appVersionIsSet() const;
    void unsetApp_version();

    void setAppVersion(const utility::string_t& value);

    /// <summary>
    /// radius &#x3D; in meters lat &#x3D; latitude long &#x3D; longitude 
    /// </summary>
    utility::string_t getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();

    void setLocation(const utility::string_t& value);

    /// <summary>
    /// value &#x3D; email address Only for sending Push Notifications Use this for targeting push subscribers associated with an email set with all SDK setEmail methods To send emails to specific email addresses use include_email_tokens parameter 
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const utility::string_t& value);

    /// <summary>
    /// relation &#x3D; \&quot;&#x3D;\&quot; value &#x3D; 2-digit Country code Example: \&quot;field\&quot;: \&quot;country\&quot;, \&quot;relation\&quot;: \&quot;&#x3D;\&quot;, \&quot;value\&quot;, \&quot;US\&quot; 
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// Specific playerids to send your notification to. _Does not require API Auth Key. Do not combine with other targeting parameters. Not compatible with any other targeting parameters. Example: [\&quot;1dd608f2-c6a1-11e3-851d-000c2940e62c\&quot;] Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludePlayerIds();
    bool includePlayerIdsIsSet() const;
    void unsetInclude_player_ids();

    void setIncludePlayerIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Target specific devices by custom user IDs assigned via API. Not compatible with any other targeting parameters Example: [\&quot;custom-id-assigned-by-api\&quot;] REQUIRED: REST API Key Authentication Limit of 2,000 entries per REST API call. Note: If targeting push, email, or sms subscribers with same ids, use with channel_for_external_user_ids to indicate you are sending a push or email or sms. 
    /// </summary>
    std::vector<utility::string_t>& getIncludeExternalUserIds();
    bool includeExternalUserIdsIsSet() const;
    void unsetInclude_external_user_ids();

    void setIncludeExternalUserIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Recommended for Sending Emails - Target specific email addresses. If an email does not correspond to an existing user, a new user will be created. Example: nick@catfac.ts Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeEmailTokens();
    bool includeEmailTokensIsSet() const;
    void unsetInclude_email_tokens();

    void setIncludeEmailTokens(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Recommended for Sending SMS - Target specific phone numbers. The phone number should be in the E.164 format. Phone number should be an existing subscriber on OneSignal. Refer our docs to learn how to add phone numbers to OneSignal. Example phone number: +1999999999 Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludePhoneNumbers();
    bool includePhoneNumbersIsSet() const;
    void unsetInclude_phone_numbers();

    void setIncludePhoneNumbers(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using iOS device tokens. Warning: Only works with Production tokens. All non-alphanumeric characters must be removed from each token. If a token does not correspond to an existing user, a new user will be created. Example: ce777617da7f548fe7a9ab6febb56cf39fba6d38203... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeIosTokens();
    bool includeIosTokensIsSet() const;
    void unsetInclude_ios_tokens();

    void setIncludeIosTokens(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Windows URIs. If a token does not correspond to an existing user, a new user will be created. Example: http://s.notify.live.net/u/1/bn1/HmQAAACPaLDr-... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeWpWnsUris();
    bool includeWpWnsUrisIsSet() const;
    void unsetInclude_wp_wns_uris();

    void setIncludeWpWnsUris(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Amazon ADM registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: amzn1.adm-registration.v1.XpvSSUk0Rc3hTVVV... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeAmazonRegIds();
    bool includeAmazonRegIdsIsSet() const;
    void unsetInclude_amazon_reg_ids();

    void setIncludeAmazonRegIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome App registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeChromeRegIds();
    bool includeChromeRegIdsIsSet() const;
    void unsetInclude_chrome_reg_ids();

    void setIncludeChromeRegIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Chrome Web Push registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeChromeWebRegIds();
    bool includeChromeWebRegIdsIsSet() const;
    void unsetInclude_chrome_web_reg_ids();

    void setIncludeChromeWebRegIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Not Recommended: Please consider using include_player_ids or include_external_user_ids instead. Target using Android device registration IDs. If a token does not correspond to an existing user, a new user will be created. Example: APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_... Limit of 2,000 entries per REST API call 
    /// </summary>
    std::vector<utility::string_t>& getIncludeAndroidRegIds();
    bool includeAndroidRegIdsIsSet() const;
    void unsetInclude_android_reg_ids();

    void setIncludeAndroidRegIds(const std::vector<utility::string_t>& value);


protected:
    std::vector<utility::string_t> m_Included_segments;
    bool m_Included_segmentsIsSet;
    std::vector<utility::string_t> m_Excluded_segments;
    bool m_Excluded_segmentsIsSet;
    utility::string_t m_Last_session;
    bool m_Last_sessionIsSet;
    utility::string_t m_First_session;
    bool m_First_sessionIsSet;
    utility::string_t m_Session_count;
    bool m_Session_countIsSet;
    utility::string_t m_Session_time;
    bool m_Session_timeIsSet;
    utility::string_t m_Amount_spent;
    bool m_Amount_spentIsSet;
    utility::string_t m_Bought_sku;
    bool m_Bought_skuIsSet;
    utility::string_t m_Tag;
    bool m_TagIsSet;
    utility::string_t m_Language;
    bool m_LanguageIsSet;
    utility::string_t m_App_version;
    bool m_App_versionIsSet;
    utility::string_t m_Location;
    bool m_LocationIsSet;
    utility::string_t m_Email;
    bool m_EmailIsSet;
    utility::string_t m_Country;
    bool m_CountryIsSet;
    std::vector<utility::string_t> m_Include_player_ids;
    bool m_Include_player_idsIsSet;
    std::vector<utility::string_t> m_Include_external_user_ids;
    bool m_Include_external_user_idsIsSet;
    std::vector<utility::string_t> m_Include_email_tokens;
    bool m_Include_email_tokensIsSet;
    std::vector<utility::string_t> m_Include_phone_numbers;
    bool m_Include_phone_numbersIsSet;
    std::vector<utility::string_t> m_Include_ios_tokens;
    bool m_Include_ios_tokensIsSet;
    std::vector<utility::string_t> m_Include_wp_wns_uris;
    bool m_Include_wp_wns_urisIsSet;
    std::vector<utility::string_t> m_Include_amazon_reg_ids;
    bool m_Include_amazon_reg_idsIsSet;
    std::vector<utility::string_t> m_Include_chrome_reg_ids;
    bool m_Include_chrome_reg_idsIsSet;
    std::vector<utility::string_t> m_Include_chrome_web_reg_ids;
    bool m_Include_chrome_web_reg_idsIsSet;
    std::vector<utility::string_t> m_Include_android_reg_ids;
    bool m_Include_android_reg_idsIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_NotificationTarget_H_ */
