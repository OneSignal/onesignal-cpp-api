/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.0.1
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateLiveActivityRequest.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_UpdateLiveActivityRequest_H_
#define COM_ONESIGNAL_CLIENT_MODEL_UpdateLiveActivityRequest_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/Object.h"
#include "CppRestOneSignalAPIClient/model/LanguageStringMap.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace onesignal {
namespace client {
namespace model {

class LanguageStringMap;

/// <summary>
/// 
/// </summary>
class  UpdateLiveActivityRequest
    : public ModelBase
{
public:
    UpdateLiveActivityRequest();
    virtual ~UpdateLiveActivityRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateLiveActivityRequest members

    /// <summary>
    /// An internal name to assist with your campaign organization. This does not get displayed in the message itself.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEvent() const;
    bool eventIsSet() const;
    void unsetEvent();

    void setEvent(const utility::string_t& value);

    /// <summary>
    /// This must match the ContentState interface you have defined within your Live Activity in your app.
    /// </summary>
    std::shared_ptr<Object> getEventUpdates() const;
    bool eventUpdatesIsSet() const;
    void unsetEvent_updates();

    void setEventUpdates(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LanguageStringMap> getContents() const;
    bool contentsIsSet() const;
    void unsetContents();

    void setContents(const std::shared_ptr<LanguageStringMap>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LanguageStringMap> getHeadings() const;
    bool headingsIsSet() const;
    void unsetHeadings();

    void setHeadings(const std::shared_ptr<LanguageStringMap>& value);

    /// <summary>
    /// Sound file that is included in your app to play instead of the default device notification sound. Omit to disable vibration and sound for the notification.
    /// </summary>
    utility::string_t getSound() const;
    bool soundIsSet() const;
    void unsetSound();

    void setSound(const utility::string_t& value);

    /// <summary>
    /// Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale.
    /// </summary>
    int32_t getStaleDate() const;
    bool staleDateIsSet() const;
    void unsetStale_date();

    void setStaleDate(int32_t value);

    /// <summary>
    /// Accepts Unix timestamp in seconds; only allowed if event is \&quot;end\&quot;
    /// </summary>
    int32_t getDismissalDate() const;
    bool dismissalDateIsSet() const;
    void unsetDismissal_date();

    void setDismissalDate(int32_t value);

    /// <summary>
    /// Delivery priority through the the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user&#39;s device. If not set, defaults to 10. Some providers (APNs) allow for a limited budget of high priority notifications per hour, and if that budget is exceeded, the provider may throttle notification delivery.
    /// </summary>
    int32_t getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(int32_t value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Event;
    bool m_EventIsSet;
    std::shared_ptr<Object> m_Event_updates;
    bool m_Event_updatesIsSet;
    std::shared_ptr<LanguageStringMap> m_Contents;
    bool m_ContentsIsSet;
    std::shared_ptr<LanguageStringMap> m_Headings;
    bool m_HeadingsIsSet;
    utility::string_t m_Sound;
    bool m_SoundIsSet;
    int32_t m_Stale_date;
    bool m_Stale_dateIsSet;
    int32_t m_Dismissal_date;
    bool m_Dismissal_dateIsSet;
    int32_t m_Priority;
    bool m_PriorityIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_UpdateLiveActivityRequest_H_ */
