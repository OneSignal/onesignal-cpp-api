/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FilterExpression.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_FilterExpression_H_
#define COM_ONESIGNAL_CLIENT_MODEL_FilterExpression_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/model/Operator.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOneSignalAPIClient/model/Filter.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  FilterExpression
    : public ModelBase
{
public:
    FilterExpression();
    virtual ~FilterExpression();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FilterExpression members

    /// <summary>
    /// Required. Name of the field to use as the first operand in the filter expression.
    /// </summary>
    utility::string_t getField() const;
    bool fieldIsSet() const;
    void unsetField();

    void setField(const utility::string_t& value);

    /// <summary>
    /// If &#x60;field&#x60; is &#x60;tag&#x60;, this field is *required* to specify &#x60;key&#x60; inside the tags.
    /// </summary>
    utility::string_t getKey() const;
    bool keyIsSet() const;
    void unsetKey();

    void setKey(const utility::string_t& value);

    /// <summary>
    /// Constant value to use as the second operand in the filter expression. This value is *required* when the relation operator is a binary operator.
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();

    void setValue(const utility::string_t& value);

    /// <summary>
    /// If &#x60;field&#x60; is session-related, this is *required* to specify the number of hours before or after the user&#39;s session.
    /// </summary>
    utility::string_t getHoursAgo() const;
    bool hoursAgoIsSet() const;
    void unsetHours_ago();

    void setHoursAgo(const utility::string_t& value);

    /// <summary>
    /// If &#x60;field&#x60; is &#x60;location&#x60;, this will specify the radius in meters from a provided location point. Use with &#x60;lat&#x60; and &#x60;long&#x60;.
    /// </summary>
    double getRadius() const;
    bool radiusIsSet() const;
    void unsetRadius();

    void setRadius(double value);

    /// <summary>
    /// If &#x60;field&#x60; is &#x60;location&#x60;, this is *required* to specify the user&#39;s latitude.
    /// </summary>
    double getLat() const;
    bool latIsSet() const;
    void unsetLat();

    void setLat(double value);

    /// <summary>
    /// If &#x60;field&#x60; is &#x60;location&#x60;, this is *required* to specify the user&#39;s longitude.
    /// </summary>
    double getLong() const;
    bool r_longIsSet() const;
    void unsetlong();

    void setLong(double value);

    /// <summary>
    /// Required. Operator of a filter expression.
    /// </summary>
    utility::string_t getRelation() const;
    bool relationIsSet() const;
    void unsetRelation();

    void setRelation(const utility::string_t& value);

    /// <summary>
    /// Strictly, this must be either &#x60;\&quot;OR\&quot;&#x60;, or &#x60;\&quot;AND\&quot;&#x60;.  It can be used to compose Filters as part of a Filters object.
    /// </summary>
    utility::string_t getROperator() const;
    bool rOperatorIsSet() const;
    void unsetr_operator();

    void setROperator(const utility::string_t& value);


protected:
    utility::string_t m_Field;
    bool m_FieldIsSet;
    utility::string_t m_Key;
    bool m_KeyIsSet;
    utility::string_t m_Value;
    bool m_ValueIsSet;
    utility::string_t m_Hours_ago;
    bool m_Hours_agoIsSet;
    double m_Radius;
    bool m_RadiusIsSet;
    double m_Lat;
    bool m_LatIsSet;
    double m_long;
    bool m_longIsSet;
    utility::string_t m_Relation;
    bool m_RelationIsSet;
    utility::string_t m_r_operator;
    bool m_r_operatorIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_FilterExpression_H_ */
