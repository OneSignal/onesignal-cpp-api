/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.2.1
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetSegmentsSuccessResponse.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_GetSegmentsSuccessResponse_H_
#define COM_ONESIGNAL_CLIENT_MODEL_GetSegmentsSuccessResponse_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/model/SegmentData.h"
#include <vector>

namespace com {
namespace onesignal {
namespace client {
namespace model {

class SegmentData;

/// <summary>
/// 
/// </summary>
class  GetSegmentsSuccessResponse
    : public ModelBase
{
public:
    GetSegmentsSuccessResponse();
    virtual ~GetSegmentsSuccessResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetSegmentsSuccessResponse members

    /// <summary>
    /// The number of Segments in the response.
    /// </summary>
    int32_t getTotalCount() const;
    bool totalCountIsSet() const;
    void unsetTotal_count();

    void setTotalCount(int32_t value);

    /// <summary>
    /// Set with the offset query parameter. Default 0.
    /// </summary>
    int32_t getOffset() const;
    bool offsetIsSet() const;
    void unsetOffset();

    void setOffset(int32_t value);

    /// <summary>
    /// Maximum number of Segments returned. Default 300.
    /// </summary>
    int32_t getLimit() const;
    bool limitIsSet() const;
    void unsetLimit();

    void setLimit(int32_t value);

    /// <summary>
    /// An array containing the Segment information.
    /// </summary>
    std::vector<std::shared_ptr<SegmentData>>& getSegments();
    bool segmentsIsSet() const;
    void unsetSegments();

    void setSegments(const std::vector<std::shared_ptr<SegmentData>>& value);


protected:
    int32_t m_Total_count;
    bool m_Total_countIsSet;
    int32_t m_Offset;
    bool m_OffsetIsSet;
    int32_t m_Limit;
    bool m_LimitIsSet;
    std::vector<std::shared_ptr<SegmentData>> m_Segments;
    bool m_SegmentsIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_GetSegmentsSuccessResponse_H_ */
