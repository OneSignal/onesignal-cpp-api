/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateTemplateRequest.h
 *
 * 
 */

#ifndef COM_ONESIGNAL_CLIENT_MODEL_UpdateTemplateRequest_H_
#define COM_ONESIGNAL_CLIENT_MODEL_UpdateTemplateRequest_H_


#include "CppRestOneSignalAPIClient/ModelBase.h"

#include "CppRestOneSignalAPIClient/model/LanguageStringMap.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace onesignal {
namespace client {
namespace model {

class LanguageStringMap;

/// <summary>
/// 
/// </summary>
class  UpdateTemplateRequest
    : public ModelBase
{
public:
    UpdateTemplateRequest();
    virtual ~UpdateTemplateRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateTemplateRequest members

    /// <summary>
    /// Updated name of the template.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LanguageStringMap> getContents() const;
    bool contentsIsSet() const;
    void unsetContents();

    void setContents(const std::shared_ptr<LanguageStringMap>& value);

    /// <summary>
    /// Set true for an Email template.
    /// </summary>
    bool isIsEmail() const;
    bool isEmailIsSet() const;
    void unsetIsEmail();

    void setIsEmail(bool value);

    /// <summary>
    /// Subject of the email.
    /// </summary>
    utility::string_t getEmailSubject() const;
    bool emailSubjectIsSet() const;
    void unsetEmail_subject();

    void setEmailSubject(const utility::string_t& value);

    /// <summary>
    /// Body of the email (HTML supported).
    /// </summary>
    utility::string_t getEmailBody() const;
    bool emailBodyIsSet() const;
    void unsetEmail_body();

    void setEmailBody(const utility::string_t& value);

    /// <summary>
    /// Set true for an SMS template.
    /// </summary>
    bool isIsSMS() const;
    bool isSMSIsSet() const;
    void unsetIsSMS();

    void setIsSMS(bool value);

    /// <summary>
    /// JSON string for dynamic content personalization.
    /// </summary>
    utility::string_t getDynamicContent() const;
    bool dynamicContentIsSet() const;
    void unsetDynamic_content();

    void setDynamicContent(const utility::string_t& value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<LanguageStringMap> m_Contents;
    bool m_ContentsIsSet;
    bool m_IsEmail;
    bool m_IsEmailIsSet;
    utility::string_t m_Email_subject;
    bool m_Email_subjectIsSet;
    utility::string_t m_Email_body;
    bool m_Email_bodyIsSet;
    bool m_IsSMS;
    bool m_IsSMSIsSet;
    utility::string_t m_Dynamic_content;
    bool m_Dynamic_contentIsSet;
};


}
}
}
}

#endif /* COM_ONESIGNAL_CLIENT_MODEL_UpdateTemplateRequest_H_ */
