/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/StartLiveActivityRequest.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



StartLiveActivityRequest::StartLiveActivityRequest()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Event = utility::conversions::to_string_t("");
    m_EventIsSet = false;
    m_Activity_id = utility::conversions::to_string_t("");
    m_Activity_idIsSet = false;
    m_Event_attributesIsSet = false;
    m_Event_updatesIsSet = false;
    m_ContentsIsSet = false;
    m_HeadingsIsSet = false;
    m_Stale_date = 0;
    m_Stale_dateIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_Ios_relevance_score = 0.0;
    m_Ios_relevance_scoreIsSet = false;
    m_Idempotency_key = utility::conversions::to_string_t("");
    m_Idempotency_keyIsSet = false;
    m_Include_aliasesIsSet = false;
    m_Include_subscription_idsIsSet = false;
    m_Included_segmentsIsSet = false;
    m_Excluded_segmentsIsSet = false;
    m_FiltersIsSet = false;
}

StartLiveActivityRequest::~StartLiveActivityRequest()
{
}

void StartLiveActivityRequest::validate()
{
    // TODO: implement validation
}

web::json::value StartLiveActivityRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_EventIsSet)
    {
        val[utility::conversions::to_string_t(U("event"))] = ModelBase::toJson(m_Event);
    }
    if(m_Activity_idIsSet)
    {
        val[utility::conversions::to_string_t(U("activity_id"))] = ModelBase::toJson(m_Activity_id);
    }
    if(m_Event_attributesIsSet)
    {
        val[utility::conversions::to_string_t(U("event_attributes"))] = ModelBase::toJson(m_Event_attributes);
    }
    if(m_Event_updatesIsSet)
    {
        val[utility::conversions::to_string_t(U("event_updates"))] = ModelBase::toJson(m_Event_updates);
    }
    if(m_ContentsIsSet)
    {
        val[utility::conversions::to_string_t(U("contents"))] = ModelBase::toJson(m_Contents);
    }
    if(m_HeadingsIsSet)
    {
        val[utility::conversions::to_string_t(U("headings"))] = ModelBase::toJson(m_Headings);
    }
    if(m_Stale_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("stale_date"))] = ModelBase::toJson(m_Stale_date);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_Ios_relevance_scoreIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_relevance_score"))] = ModelBase::toJson(m_Ios_relevance_score);
    }
    if(m_Idempotency_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("idempotency_key"))] = ModelBase::toJson(m_Idempotency_key);
    }
    if(m_Include_aliasesIsSet)
    {
        val[utility::conversions::to_string_t(U("include_aliases"))] = ModelBase::toJson(m_Include_aliases);
    }
    if(m_Include_subscription_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_subscription_ids"))] = ModelBase::toJson(m_Include_subscription_ids);
    }
    if(m_Included_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("included_segments"))] = ModelBase::toJson(m_Included_segments);
    }
    if(m_Excluded_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("excluded_segments"))] = ModelBase::toJson(m_Excluded_segments);
    }
    if(m_FiltersIsSet)
    {
        val[utility::conversions::to_string_t(U("filters"))] = ModelBase::toJson(m_Filters);
    }

    return val;
}

bool StartLiveActivityRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvent);
            setEvent(refVal_setEvent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activity_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activity_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActivityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivityId);
            setActivityId(refVal_setActivityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_attributes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_attributes")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setEventAttributes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventAttributes);
            setEventAttributes(refVal_setEventAttributes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_updates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_updates")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setEventUpdates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventUpdates);
            setEventUpdates(refVal_setEventUpdates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contents")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LanguageStringMap> refVal_setContents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContents);
            setContents(refVal_setContents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("headings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("headings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LanguageStringMap> refVal_setHeadings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeadings);
            setHeadings(refVal_setHeadings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stale_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stale_date")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStaleDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStaleDate);
            setStaleDate(refVal_setStaleDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_relevance_score"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_relevance_score")));
        if(!fieldValue.is_null())
        {
            double refVal_setIosRelevanceScore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIosRelevanceScore);
            setIosRelevanceScore(refVal_setIosRelevanceScore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("idempotency_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("idempotency_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIdempotencyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdempotencyKey);
            setIdempotencyKey(refVal_setIdempotencyKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_aliases"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_aliases")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setIncludeAliases;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeAliases);
            setIncludeAliases(refVal_setIncludeAliases);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_subscription_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_subscription_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludeSubscriptionIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludeSubscriptionIds);
            setIncludeSubscriptionIds(refVal_setIncludeSubscriptionIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("included_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("included_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIncludedSegments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIncludedSegments);
            setIncludedSegments(refVal_setIncludedSegments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("excluded_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExcludedSegments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExcludedSegments);
            setExcludedSegments(refVal_setExcludedSegments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filters")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FilterExpression>> refVal_setFilters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilters);
            setFilters(refVal_setFilters);
        }
    }
    return ok;
}

void StartLiveActivityRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_EventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event")), m_Event));
    }
    if(m_Activity_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activity_id")), m_Activity_id));
    }
    if(m_Event_attributesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_attributes")), m_Event_attributes));
    }
    if(m_Event_updatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_updates")), m_Event_updates));
    }
    if(m_ContentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contents")), m_Contents));
    }
    if(m_HeadingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("headings")), m_Headings));
    }
    if(m_Stale_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stale_date")), m_Stale_date));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_Ios_relevance_scoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_relevance_score")), m_Ios_relevance_score));
    }
    if(m_Idempotency_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("idempotency_key")), m_Idempotency_key));
    }
    if(m_Include_aliasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_aliases")), m_Include_aliases));
    }
    if(m_Include_subscription_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_subscription_ids")), m_Include_subscription_ids));
    }
    if(m_Included_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("included_segments")), m_Included_segments));
    }
    if(m_Excluded_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("excluded_segments")), m_Excluded_segments));
    }
    if(m_FiltersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filters")), m_Filters));
    }
}

bool StartLiveActivityRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event"))))
    {
        utility::string_t refVal_setEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event"))), refVal_setEvent );
        setEvent(refVal_setEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activity_id"))))
    {
        utility::string_t refVal_setActivityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activity_id"))), refVal_setActivityId );
        setActivityId(refVal_setActivityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_attributes"))))
    {
        std::shared_ptr<Object> refVal_setEventAttributes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_attributes"))), refVal_setEventAttributes );
        setEventAttributes(refVal_setEventAttributes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_updates"))))
    {
        std::shared_ptr<Object> refVal_setEventUpdates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_updates"))), refVal_setEventUpdates );
        setEventUpdates(refVal_setEventUpdates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contents"))))
    {
        std::shared_ptr<LanguageStringMap> refVal_setContents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contents"))), refVal_setContents );
        setContents(refVal_setContents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("headings"))))
    {
        std::shared_ptr<LanguageStringMap> refVal_setHeadings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("headings"))), refVal_setHeadings );
        setHeadings(refVal_setHeadings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stale_date"))))
    {
        int32_t refVal_setStaleDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stale_date"))), refVal_setStaleDate );
        setStaleDate(refVal_setStaleDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        int32_t refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_relevance_score"))))
    {
        double refVal_setIosRelevanceScore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_relevance_score"))), refVal_setIosRelevanceScore );
        setIosRelevanceScore(refVal_setIosRelevanceScore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("idempotency_key"))))
    {
        utility::string_t refVal_setIdempotencyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("idempotency_key"))), refVal_setIdempotencyKey );
        setIdempotencyKey(refVal_setIdempotencyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_aliases"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setIncludeAliases;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_aliases"))), refVal_setIncludeAliases );
        setIncludeAliases(refVal_setIncludeAliases);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_subscription_ids"))))
    {
        std::vector<utility::string_t> refVal_setIncludeSubscriptionIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_subscription_ids"))), refVal_setIncludeSubscriptionIds );
        setIncludeSubscriptionIds(refVal_setIncludeSubscriptionIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("included_segments"))))
    {
        std::vector<utility::string_t> refVal_setIncludedSegments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("included_segments"))), refVal_setIncludedSegments );
        setIncludedSegments(refVal_setIncludedSegments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        std::vector<utility::string_t> refVal_setExcludedSegments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("excluded_segments"))), refVal_setExcludedSegments );
        setExcludedSegments(refVal_setExcludedSegments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filters"))))
    {
        std::vector<std::shared_ptr<FilterExpression>> refVal_setFilters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filters"))), refVal_setFilters );
        setFilters(refVal_setFilters);
    }
    return ok;
}

utility::string_t StartLiveActivityRequest::getName() const
{
    return m_Name;
}

void StartLiveActivityRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool StartLiveActivityRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void StartLiveActivityRequest::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t StartLiveActivityRequest::getEvent() const
{
    return m_Event;
}

void StartLiveActivityRequest::setEvent(const utility::string_t& value)
{
    m_Event = value;
    m_EventIsSet = true;
}

bool StartLiveActivityRequest::eventIsSet() const
{
    return m_EventIsSet;
}

void StartLiveActivityRequest::unsetEvent()
{
    m_EventIsSet = false;
}
utility::string_t StartLiveActivityRequest::getActivityId() const
{
    return m_Activity_id;
}

void StartLiveActivityRequest::setActivityId(const utility::string_t& value)
{
    m_Activity_id = value;
    m_Activity_idIsSet = true;
}

bool StartLiveActivityRequest::activityIdIsSet() const
{
    return m_Activity_idIsSet;
}

void StartLiveActivityRequest::unsetActivity_id()
{
    m_Activity_idIsSet = false;
}
std::shared_ptr<Object> StartLiveActivityRequest::getEventAttributes() const
{
    return m_Event_attributes;
}

void StartLiveActivityRequest::setEventAttributes(const std::shared_ptr<Object>& value)
{
    m_Event_attributes = value;
    m_Event_attributesIsSet = true;
}

bool StartLiveActivityRequest::eventAttributesIsSet() const
{
    return m_Event_attributesIsSet;
}

void StartLiveActivityRequest::unsetEvent_attributes()
{
    m_Event_attributesIsSet = false;
}
std::shared_ptr<Object> StartLiveActivityRequest::getEventUpdates() const
{
    return m_Event_updates;
}

void StartLiveActivityRequest::setEventUpdates(const std::shared_ptr<Object>& value)
{
    m_Event_updates = value;
    m_Event_updatesIsSet = true;
}

bool StartLiveActivityRequest::eventUpdatesIsSet() const
{
    return m_Event_updatesIsSet;
}

void StartLiveActivityRequest::unsetEvent_updates()
{
    m_Event_updatesIsSet = false;
}
std::shared_ptr<LanguageStringMap> StartLiveActivityRequest::getContents() const
{
    return m_Contents;
}

void StartLiveActivityRequest::setContents(const std::shared_ptr<LanguageStringMap>& value)
{
    m_Contents = value;
    m_ContentsIsSet = true;
}

bool StartLiveActivityRequest::contentsIsSet() const
{
    return m_ContentsIsSet;
}

void StartLiveActivityRequest::unsetContents()
{
    m_ContentsIsSet = false;
}
std::shared_ptr<LanguageStringMap> StartLiveActivityRequest::getHeadings() const
{
    return m_Headings;
}

void StartLiveActivityRequest::setHeadings(const std::shared_ptr<LanguageStringMap>& value)
{
    m_Headings = value;
    m_HeadingsIsSet = true;
}

bool StartLiveActivityRequest::headingsIsSet() const
{
    return m_HeadingsIsSet;
}

void StartLiveActivityRequest::unsetHeadings()
{
    m_HeadingsIsSet = false;
}
int32_t StartLiveActivityRequest::getStaleDate() const
{
    return m_Stale_date;
}

void StartLiveActivityRequest::setStaleDate(int32_t value)
{
    m_Stale_date = value;
    m_Stale_dateIsSet = true;
}

bool StartLiveActivityRequest::staleDateIsSet() const
{
    return m_Stale_dateIsSet;
}

void StartLiveActivityRequest::unsetStale_date()
{
    m_Stale_dateIsSet = false;
}
int32_t StartLiveActivityRequest::getPriority() const
{
    return m_Priority;
}

void StartLiveActivityRequest::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool StartLiveActivityRequest::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void StartLiveActivityRequest::unsetPriority()
{
    m_PriorityIsSet = false;
}
double StartLiveActivityRequest::getIosRelevanceScore() const
{
    return m_Ios_relevance_score;
}

void StartLiveActivityRequest::setIosRelevanceScore(double value)
{
    m_Ios_relevance_score = value;
    m_Ios_relevance_scoreIsSet = true;
}

bool StartLiveActivityRequest::iosRelevanceScoreIsSet() const
{
    return m_Ios_relevance_scoreIsSet;
}

void StartLiveActivityRequest::unsetIos_relevance_score()
{
    m_Ios_relevance_scoreIsSet = false;
}
utility::string_t StartLiveActivityRequest::getIdempotencyKey() const
{
    return m_Idempotency_key;
}

void StartLiveActivityRequest::setIdempotencyKey(const utility::string_t& value)
{
    m_Idempotency_key = value;
    m_Idempotency_keyIsSet = true;
}

bool StartLiveActivityRequest::idempotencyKeyIsSet() const
{
    return m_Idempotency_keyIsSet;
}

void StartLiveActivityRequest::unsetIdempotency_key()
{
    m_Idempotency_keyIsSet = false;
}
std::map<utility::string_t, utility::string_t>& StartLiveActivityRequest::getIncludeAliases()
{
    return m_Include_aliases;
}

void StartLiveActivityRequest::setIncludeAliases(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Include_aliases = value;
    m_Include_aliasesIsSet = true;
}

bool StartLiveActivityRequest::includeAliasesIsSet() const
{
    return m_Include_aliasesIsSet;
}

void StartLiveActivityRequest::unsetInclude_aliases()
{
    m_Include_aliasesIsSet = false;
}
std::vector<utility::string_t>& StartLiveActivityRequest::getIncludeSubscriptionIds()
{
    return m_Include_subscription_ids;
}

void StartLiveActivityRequest::setIncludeSubscriptionIds(const std::vector<utility::string_t>& value)
{
    m_Include_subscription_ids = value;
    m_Include_subscription_idsIsSet = true;
}

bool StartLiveActivityRequest::includeSubscriptionIdsIsSet() const
{
    return m_Include_subscription_idsIsSet;
}

void StartLiveActivityRequest::unsetInclude_subscription_ids()
{
    m_Include_subscription_idsIsSet = false;
}
std::vector<utility::string_t>& StartLiveActivityRequest::getIncludedSegments()
{
    return m_Included_segments;
}

void StartLiveActivityRequest::setIncludedSegments(const std::vector<utility::string_t>& value)
{
    m_Included_segments = value;
    m_Included_segmentsIsSet = true;
}

bool StartLiveActivityRequest::includedSegmentsIsSet() const
{
    return m_Included_segmentsIsSet;
}

void StartLiveActivityRequest::unsetIncluded_segments()
{
    m_Included_segmentsIsSet = false;
}
std::vector<utility::string_t>& StartLiveActivityRequest::getExcludedSegments()
{
    return m_Excluded_segments;
}

void StartLiveActivityRequest::setExcludedSegments(const std::vector<utility::string_t>& value)
{
    m_Excluded_segments = value;
    m_Excluded_segmentsIsSet = true;
}

bool StartLiveActivityRequest::excludedSegmentsIsSet() const
{
    return m_Excluded_segmentsIsSet;
}

void StartLiveActivityRequest::unsetExcluded_segments()
{
    m_Excluded_segmentsIsSet = false;
}
std::vector<std::shared_ptr<FilterExpression>>& StartLiveActivityRequest::getFilters()
{
    return m_Filters;
}

void StartLiveActivityRequest::setFilters(const std::vector<std::shared_ptr<FilterExpression>>& value)
{
    m_Filters = value;
    m_FiltersIsSet = true;
}

bool StartLiveActivityRequest::filtersIsSet() const
{
    return m_FiltersIsSet;
}

void StartLiveActivityRequest::unsetFilters()
{
    m_FiltersIsSet = false;
}
}
}
}
}


