/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/NotificationTarget.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



NotificationTarget::NotificationTarget()
{
    m_Included_segmentsIsSet = false;
    m_Excluded_segmentsIsSet = false;
    m_Last_session = utility::conversions::to_string_t("");
    m_Last_sessionIsSet = false;
    m_First_session = utility::conversions::to_string_t("");
    m_First_sessionIsSet = false;
    m_Session_count = utility::conversions::to_string_t("");
    m_Session_countIsSet = false;
    m_Session_time = utility::conversions::to_string_t("");
    m_Session_timeIsSet = false;
    m_Amount_spent = utility::conversions::to_string_t("");
    m_Amount_spentIsSet = false;
    m_Bought_sku = utility::conversions::to_string_t("");
    m_Bought_skuIsSet = false;
    m_Tag = utility::conversions::to_string_t("");
    m_TagIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_App_version = utility::conversions::to_string_t("");
    m_App_versionIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Include_player_idsIsSet = false;
    m_Include_external_user_idsIsSet = false;
    m_Include_email_tokensIsSet = false;
    m_Include_phone_numbersIsSet = false;
    m_Include_ios_tokensIsSet = false;
    m_Include_wp_wns_urisIsSet = false;
    m_Include_amazon_reg_idsIsSet = false;
    m_Include_chrome_reg_idsIsSet = false;
    m_Include_chrome_web_reg_idsIsSet = false;
    m_Include_android_reg_idsIsSet = false;
}

NotificationTarget::~NotificationTarget()
{
}

void NotificationTarget::validate()
{
    // TODO: implement validation
}

web::json::value NotificationTarget::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Included_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("included_segments"))] = ModelBase::toJson(m_Included_segments);
    }
    if(m_Excluded_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("excluded_segments"))] = ModelBase::toJson(m_Excluded_segments);
    }
    if(m_Last_sessionIsSet)
    {
        val[utility::conversions::to_string_t(U("last_session"))] = ModelBase::toJson(m_Last_session);
    }
    if(m_First_sessionIsSet)
    {
        val[utility::conversions::to_string_t(U("first_session"))] = ModelBase::toJson(m_First_session);
    }
    if(m_Session_countIsSet)
    {
        val[utility::conversions::to_string_t(U("session_count"))] = ModelBase::toJson(m_Session_count);
    }
    if(m_Session_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("session_time"))] = ModelBase::toJson(m_Session_time);
    }
    if(m_Amount_spentIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_spent"))] = ModelBase::toJson(m_Amount_spent);
    }
    if(m_Bought_skuIsSet)
    {
        val[utility::conversions::to_string_t(U("bought_sku"))] = ModelBase::toJson(m_Bought_sku);
    }
    if(m_TagIsSet)
    {
        val[utility::conversions::to_string_t(U("tag"))] = ModelBase::toJson(m_Tag);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_App_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("app_version"))] = ModelBase::toJson(m_App_version);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_Include_player_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_player_ids"))] = ModelBase::toJson(m_Include_player_ids);
    }
    if(m_Include_external_user_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_external_user_ids"))] = ModelBase::toJson(m_Include_external_user_ids);
    }
    if(m_Include_email_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("include_email_tokens"))] = ModelBase::toJson(m_Include_email_tokens);
    }
    if(m_Include_phone_numbersIsSet)
    {
        val[utility::conversions::to_string_t(U("include_phone_numbers"))] = ModelBase::toJson(m_Include_phone_numbers);
    }
    if(m_Include_ios_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("include_ios_tokens"))] = ModelBase::toJson(m_Include_ios_tokens);
    }
    if(m_Include_wp_wns_urisIsSet)
    {
        val[utility::conversions::to_string_t(U("include_wp_wns_uris"))] = ModelBase::toJson(m_Include_wp_wns_uris);
    }
    if(m_Include_amazon_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_amazon_reg_ids"))] = ModelBase::toJson(m_Include_amazon_reg_ids);
    }
    if(m_Include_chrome_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_chrome_reg_ids"))] = ModelBase::toJson(m_Include_chrome_reg_ids);
    }
    if(m_Include_chrome_web_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))] = ModelBase::toJson(m_Include_chrome_web_reg_ids);
    }
    if(m_Include_android_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_android_reg_ids"))] = ModelBase::toJson(m_Include_android_reg_ids);
    }

    return val;
}

bool NotificationTarget::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("included_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("included_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_included_segments;
            ok &= ModelBase::fromJson(fieldValue, refVal_included_segments);
            setIncludedSegments(refVal_included_segments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("excluded_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_excluded_segments;
            ok &= ModelBase::fromJson(fieldValue, refVal_excluded_segments);
            setExcludedSegments(refVal_excluded_segments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_session"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_session")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_last_session;
            ok &= ModelBase::fromJson(fieldValue, refVal_last_session);
            setLastSession(refVal_last_session);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("first_session"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("first_session")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_first_session;
            ok &= ModelBase::fromJson(fieldValue, refVal_first_session);
            setFirstSession(refVal_first_session);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_session_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_session_count);
            setSessionCount(refVal_session_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_time")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_session_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_session_time);
            setSessionTime(refVal_session_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_spent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_spent")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_amount_spent;
            ok &= ModelBase::fromJson(fieldValue, refVal_amount_spent);
            setAmountSpent(refVal_amount_spent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bought_sku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bought_sku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bought_sku;
            ok &= ModelBase::fromJson(fieldValue, refVal_bought_sku);
            setBoughtSku(refVal_bought_sku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tag;
            ok &= ModelBase::fromJson(fieldValue, refVal_tag);
            setTag(refVal_tag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_language;
            ok &= ModelBase::fromJson(fieldValue, refVal_language);
            setLanguage(refVal_language);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_app_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_app_version);
            setAppVersion(refVal_app_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_player_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_player_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_player_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_player_ids);
            setIncludePlayerIds(refVal_include_player_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_external_user_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_external_user_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_external_user_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_external_user_ids);
            setIncludeExternalUserIds(refVal_include_external_user_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_email_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_email_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_email_tokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_email_tokens);
            setIncludeEmailTokens(refVal_include_email_tokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_phone_numbers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_phone_numbers")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_phone_numbers;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_phone_numbers);
            setIncludePhoneNumbers(refVal_include_phone_numbers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_ios_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_ios_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_ios_tokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_ios_tokens);
            setIncludeIosTokens(refVal_include_ios_tokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_wp_wns_uris"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_wp_wns_uris")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_wp_wns_uris;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_wp_wns_uris);
            setIncludeWpWnsUris(refVal_include_wp_wns_uris);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_amazon_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_amazon_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_amazon_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_amazon_reg_ids);
            setIncludeAmazonRegIds(refVal_include_amazon_reg_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_chrome_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_chrome_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_chrome_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_chrome_reg_ids);
            setIncludeChromeRegIds(refVal_include_chrome_reg_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_chrome_web_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_chrome_web_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_chrome_web_reg_ids);
            setIncludeChromeWebRegIds(refVal_include_chrome_web_reg_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_android_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_android_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_android_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_android_reg_ids);
            setIncludeAndroidRegIds(refVal_include_android_reg_ids);
        }
    }
    return ok;
}

void NotificationTarget::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Included_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("included_segments")), m_Included_segments));
    }
    if(m_Excluded_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("excluded_segments")), m_Excluded_segments));
    }
    if(m_Last_sessionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_session")), m_Last_session));
    }
    if(m_First_sessionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("first_session")), m_First_session));
    }
    if(m_Session_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_count")), m_Session_count));
    }
    if(m_Session_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_time")), m_Session_time));
    }
    if(m_Amount_spentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_spent")), m_Amount_spent));
    }
    if(m_Bought_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bought_sku")), m_Bought_sku));
    }
    if(m_TagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag")), m_Tag));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_App_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_version")), m_App_version));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_Include_player_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_player_ids")), m_Include_player_ids));
    }
    if(m_Include_external_user_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_external_user_ids")), m_Include_external_user_ids));
    }
    if(m_Include_email_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_email_tokens")), m_Include_email_tokens));
    }
    if(m_Include_phone_numbersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_phone_numbers")), m_Include_phone_numbers));
    }
    if(m_Include_ios_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_ios_tokens")), m_Include_ios_tokens));
    }
    if(m_Include_wp_wns_urisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_wp_wns_uris")), m_Include_wp_wns_uris));
    }
    if(m_Include_amazon_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_amazon_reg_ids")), m_Include_amazon_reg_ids));
    }
    if(m_Include_chrome_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_chrome_reg_ids")), m_Include_chrome_reg_ids));
    }
    if(m_Include_chrome_web_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_chrome_web_reg_ids")), m_Include_chrome_web_reg_ids));
    }
    if(m_Include_android_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_android_reg_ids")), m_Include_android_reg_ids));
    }
}

bool NotificationTarget::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("included_segments"))))
    {
        std::vector<utility::string_t> refVal_included_segments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("included_segments"))), refVal_included_segments );
        setIncludedSegments(refVal_included_segments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        std::vector<utility::string_t> refVal_excluded_segments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("excluded_segments"))), refVal_excluded_segments );
        setExcludedSegments(refVal_excluded_segments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_session"))))
    {
        utility::string_t refVal_last_session;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_session"))), refVal_last_session );
        setLastSession(refVal_last_session);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("first_session"))))
    {
        utility::string_t refVal_first_session;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("first_session"))), refVal_first_session );
        setFirstSession(refVal_first_session);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_count"))))
    {
        utility::string_t refVal_session_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_count"))), refVal_session_count );
        setSessionCount(refVal_session_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_time"))))
    {
        utility::string_t refVal_session_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_time"))), refVal_session_time );
        setSessionTime(refVal_session_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_spent"))))
    {
        utility::string_t refVal_amount_spent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_spent"))), refVal_amount_spent );
        setAmountSpent(refVal_amount_spent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bought_sku"))))
    {
        utility::string_t refVal_bought_sku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bought_sku"))), refVal_bought_sku );
        setBoughtSku(refVal_bought_sku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag"))))
    {
        utility::string_t refVal_tag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag"))), refVal_tag );
        setTag(refVal_tag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_language;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_language );
        setLanguage(refVal_language);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_version"))))
    {
        utility::string_t refVal_app_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_version"))), refVal_app_version );
        setAppVersion(refVal_app_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_player_ids"))))
    {
        std::vector<utility::string_t> refVal_include_player_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_player_ids"))), refVal_include_player_ids );
        setIncludePlayerIds(refVal_include_player_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_external_user_ids"))))
    {
        std::vector<utility::string_t> refVal_include_external_user_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_external_user_ids"))), refVal_include_external_user_ids );
        setIncludeExternalUserIds(refVal_include_external_user_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_email_tokens"))))
    {
        std::vector<utility::string_t> refVal_include_email_tokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_email_tokens"))), refVal_include_email_tokens );
        setIncludeEmailTokens(refVal_include_email_tokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_phone_numbers"))))
    {
        std::vector<utility::string_t> refVal_include_phone_numbers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_phone_numbers"))), refVal_include_phone_numbers );
        setIncludePhoneNumbers(refVal_include_phone_numbers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_ios_tokens"))))
    {
        std::vector<utility::string_t> refVal_include_ios_tokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_ios_tokens"))), refVal_include_ios_tokens );
        setIncludeIosTokens(refVal_include_ios_tokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_wp_wns_uris"))))
    {
        std::vector<utility::string_t> refVal_include_wp_wns_uris;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_wp_wns_uris"))), refVal_include_wp_wns_uris );
        setIncludeWpWnsUris(refVal_include_wp_wns_uris);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_amazon_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_amazon_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_amazon_reg_ids"))), refVal_include_amazon_reg_ids );
        setIncludeAmazonRegIds(refVal_include_amazon_reg_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_chrome_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_chrome_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_chrome_reg_ids"))), refVal_include_chrome_reg_ids );
        setIncludeChromeRegIds(refVal_include_chrome_reg_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_chrome_web_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))), refVal_include_chrome_web_reg_ids );
        setIncludeChromeWebRegIds(refVal_include_chrome_web_reg_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_android_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_android_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_android_reg_ids"))), refVal_include_android_reg_ids );
        setIncludeAndroidRegIds(refVal_include_android_reg_ids);
    }
    return ok;
}

std::vector<utility::string_t>& NotificationTarget::getIncludedSegments()
{
    return m_Included_segments;
}

void NotificationTarget::setIncludedSegments(const std::vector<utility::string_t>& value)
{
    m_Included_segments = value;
    m_Included_segmentsIsSet = true;
}

bool NotificationTarget::includedSegmentsIsSet() const
{
    return m_Included_segmentsIsSet;
}

void NotificationTarget::unsetIncluded_segments()
{
    m_Included_segmentsIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getExcludedSegments()
{
    return m_Excluded_segments;
}

void NotificationTarget::setExcludedSegments(const std::vector<utility::string_t>& value)
{
    m_Excluded_segments = value;
    m_Excluded_segmentsIsSet = true;
}

bool NotificationTarget::excludedSegmentsIsSet() const
{
    return m_Excluded_segmentsIsSet;
}

void NotificationTarget::unsetExcluded_segments()
{
    m_Excluded_segmentsIsSet = false;
}
utility::string_t NotificationTarget::getLastSession() const
{
    return m_Last_session;
}

void NotificationTarget::setLastSession(const utility::string_t& value)
{
    m_Last_session = value;
    m_Last_sessionIsSet = true;
}

bool NotificationTarget::lastSessionIsSet() const
{
    return m_Last_sessionIsSet;
}

void NotificationTarget::unsetLast_session()
{
    m_Last_sessionIsSet = false;
}
utility::string_t NotificationTarget::getFirstSession() const
{
    return m_First_session;
}

void NotificationTarget::setFirstSession(const utility::string_t& value)
{
    m_First_session = value;
    m_First_sessionIsSet = true;
}

bool NotificationTarget::firstSessionIsSet() const
{
    return m_First_sessionIsSet;
}

void NotificationTarget::unsetFirst_session()
{
    m_First_sessionIsSet = false;
}
utility::string_t NotificationTarget::getSessionCount() const
{
    return m_Session_count;
}

void NotificationTarget::setSessionCount(const utility::string_t& value)
{
    m_Session_count = value;
    m_Session_countIsSet = true;
}

bool NotificationTarget::sessionCountIsSet() const
{
    return m_Session_countIsSet;
}

void NotificationTarget::unsetSession_count()
{
    m_Session_countIsSet = false;
}
utility::string_t NotificationTarget::getSessionTime() const
{
    return m_Session_time;
}

void NotificationTarget::setSessionTime(const utility::string_t& value)
{
    m_Session_time = value;
    m_Session_timeIsSet = true;
}

bool NotificationTarget::sessionTimeIsSet() const
{
    return m_Session_timeIsSet;
}

void NotificationTarget::unsetSession_time()
{
    m_Session_timeIsSet = false;
}
utility::string_t NotificationTarget::getAmountSpent() const
{
    return m_Amount_spent;
}

void NotificationTarget::setAmountSpent(const utility::string_t& value)
{
    m_Amount_spent = value;
    m_Amount_spentIsSet = true;
}

bool NotificationTarget::amountSpentIsSet() const
{
    return m_Amount_spentIsSet;
}

void NotificationTarget::unsetAmount_spent()
{
    m_Amount_spentIsSet = false;
}
utility::string_t NotificationTarget::getBoughtSku() const
{
    return m_Bought_sku;
}

void NotificationTarget::setBoughtSku(const utility::string_t& value)
{
    m_Bought_sku = value;
    m_Bought_skuIsSet = true;
}

bool NotificationTarget::boughtSkuIsSet() const
{
    return m_Bought_skuIsSet;
}

void NotificationTarget::unsetBought_sku()
{
    m_Bought_skuIsSet = false;
}
utility::string_t NotificationTarget::getTag() const
{
    return m_Tag;
}

void NotificationTarget::setTag(const utility::string_t& value)
{
    m_Tag = value;
    m_TagIsSet = true;
}

bool NotificationTarget::tagIsSet() const
{
    return m_TagIsSet;
}

void NotificationTarget::unsetTag()
{
    m_TagIsSet = false;
}
utility::string_t NotificationTarget::getLanguage() const
{
    return m_Language;
}

void NotificationTarget::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool NotificationTarget::languageIsSet() const
{
    return m_LanguageIsSet;
}

void NotificationTarget::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t NotificationTarget::getAppVersion() const
{
    return m_App_version;
}

void NotificationTarget::setAppVersion(const utility::string_t& value)
{
    m_App_version = value;
    m_App_versionIsSet = true;
}

bool NotificationTarget::appVersionIsSet() const
{
    return m_App_versionIsSet;
}

void NotificationTarget::unsetApp_version()
{
    m_App_versionIsSet = false;
}
utility::string_t NotificationTarget::getLocation() const
{
    return m_Location;
}

void NotificationTarget::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool NotificationTarget::locationIsSet() const
{
    return m_LocationIsSet;
}

void NotificationTarget::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t NotificationTarget::getEmail() const
{
    return m_Email;
}

void NotificationTarget::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool NotificationTarget::emailIsSet() const
{
    return m_EmailIsSet;
}

void NotificationTarget::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t NotificationTarget::getCountry() const
{
    return m_Country;
}

void NotificationTarget::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool NotificationTarget::countryIsSet() const
{
    return m_CountryIsSet;
}

void NotificationTarget::unsetCountry()
{
    m_CountryIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludePlayerIds()
{
    return m_Include_player_ids;
}

void NotificationTarget::setIncludePlayerIds(const std::vector<utility::string_t>& value)
{
    m_Include_player_ids = value;
    m_Include_player_idsIsSet = true;
}

bool NotificationTarget::includePlayerIdsIsSet() const
{
    return m_Include_player_idsIsSet;
}

void NotificationTarget::unsetInclude_player_ids()
{
    m_Include_player_idsIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeExternalUserIds()
{
    return m_Include_external_user_ids;
}

void NotificationTarget::setIncludeExternalUserIds(const std::vector<utility::string_t>& value)
{
    m_Include_external_user_ids = value;
    m_Include_external_user_idsIsSet = true;
}

bool NotificationTarget::includeExternalUserIdsIsSet() const
{
    return m_Include_external_user_idsIsSet;
}

void NotificationTarget::unsetInclude_external_user_ids()
{
    m_Include_external_user_idsIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeEmailTokens()
{
    return m_Include_email_tokens;
}

void NotificationTarget::setIncludeEmailTokens(const std::vector<utility::string_t>& value)
{
    m_Include_email_tokens = value;
    m_Include_email_tokensIsSet = true;
}

bool NotificationTarget::includeEmailTokensIsSet() const
{
    return m_Include_email_tokensIsSet;
}

void NotificationTarget::unsetInclude_email_tokens()
{
    m_Include_email_tokensIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludePhoneNumbers()
{
    return m_Include_phone_numbers;
}

void NotificationTarget::setIncludePhoneNumbers(const std::vector<utility::string_t>& value)
{
    m_Include_phone_numbers = value;
    m_Include_phone_numbersIsSet = true;
}

bool NotificationTarget::includePhoneNumbersIsSet() const
{
    return m_Include_phone_numbersIsSet;
}

void NotificationTarget::unsetInclude_phone_numbers()
{
    m_Include_phone_numbersIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeIosTokens()
{
    return m_Include_ios_tokens;
}

void NotificationTarget::setIncludeIosTokens(const std::vector<utility::string_t>& value)
{
    m_Include_ios_tokens = value;
    m_Include_ios_tokensIsSet = true;
}

bool NotificationTarget::includeIosTokensIsSet() const
{
    return m_Include_ios_tokensIsSet;
}

void NotificationTarget::unsetInclude_ios_tokens()
{
    m_Include_ios_tokensIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeWpWnsUris()
{
    return m_Include_wp_wns_uris;
}

void NotificationTarget::setIncludeWpWnsUris(const std::vector<utility::string_t>& value)
{
    m_Include_wp_wns_uris = value;
    m_Include_wp_wns_urisIsSet = true;
}

bool NotificationTarget::includeWpWnsUrisIsSet() const
{
    return m_Include_wp_wns_urisIsSet;
}

void NotificationTarget::unsetInclude_wp_wns_uris()
{
    m_Include_wp_wns_urisIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeAmazonRegIds()
{
    return m_Include_amazon_reg_ids;
}

void NotificationTarget::setIncludeAmazonRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_amazon_reg_ids = value;
    m_Include_amazon_reg_idsIsSet = true;
}

bool NotificationTarget::includeAmazonRegIdsIsSet() const
{
    return m_Include_amazon_reg_idsIsSet;
}

void NotificationTarget::unsetInclude_amazon_reg_ids()
{
    m_Include_amazon_reg_idsIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeChromeRegIds()
{
    return m_Include_chrome_reg_ids;
}

void NotificationTarget::setIncludeChromeRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_chrome_reg_ids = value;
    m_Include_chrome_reg_idsIsSet = true;
}

bool NotificationTarget::includeChromeRegIdsIsSet() const
{
    return m_Include_chrome_reg_idsIsSet;
}

void NotificationTarget::unsetInclude_chrome_reg_ids()
{
    m_Include_chrome_reg_idsIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeChromeWebRegIds()
{
    return m_Include_chrome_web_reg_ids;
}

void NotificationTarget::setIncludeChromeWebRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_chrome_web_reg_ids = value;
    m_Include_chrome_web_reg_idsIsSet = true;
}

bool NotificationTarget::includeChromeWebRegIdsIsSet() const
{
    return m_Include_chrome_web_reg_idsIsSet;
}

void NotificationTarget::unsetInclude_chrome_web_reg_ids()
{
    m_Include_chrome_web_reg_idsIsSet = false;
}
std::vector<utility::string_t>& NotificationTarget::getIncludeAndroidRegIds()
{
    return m_Include_android_reg_ids;
}

void NotificationTarget::setIncludeAndroidRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_android_reg_ids = value;
    m_Include_android_reg_idsIsSet = true;
}

bool NotificationTarget::includeAndroidRegIdsIsSet() const
{
    return m_Include_android_reg_idsIsSet;
}

void NotificationTarget::unsetInclude_android_reg_ids()
{
    m_Include_android_reg_idsIsSet = false;
}
}
}
}
}


