/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/CustomEvent.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



CustomEvent::CustomEvent()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_External_id = utility::conversions::to_string_t("");
    m_External_idIsSet = false;
    m_Onesignal_id = utility::conversions::to_string_t("");
    m_Onesignal_idIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_PayloadIsSet = false;
}

CustomEvent::~CustomEvent()
{
}

void CustomEvent::validate()
{
    // TODO: implement validation
}

web::json::value CustomEvent::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_External_idIsSet)
    {
        val[utility::conversions::to_string_t(U("external_id"))] = ModelBase::toJson(m_External_id);
    }
    if(m_Onesignal_idIsSet)
    {
        val[utility::conversions::to_string_t(U("onesignal_id"))] = ModelBase::toJson(m_Onesignal_id);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_PayloadIsSet)
    {
        val[utility::conversions::to_string_t(U("payload"))] = ModelBase::toJson(m_Payload);
    }

    return val;
}

bool CustomEvent::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExternalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalId);
            setExternalId(refVal_setExternalId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("onesignal_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("onesignal_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOnesignalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOnesignalId);
            setOnesignalId(refVal_setOnesignalId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("payload"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("payload")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setPayload;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPayload);
            setPayload(refVal_setPayload);
        }
    }
    return ok;
}

void CustomEvent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_External_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_id")), m_External_id));
    }
    if(m_Onesignal_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("onesignal_id")), m_Onesignal_id));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_PayloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("payload")), m_Payload));
    }
}

bool CustomEvent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_id"))))
    {
        utility::string_t refVal_setExternalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_id"))), refVal_setExternalId );
        setExternalId(refVal_setExternalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("onesignal_id"))))
    {
        utility::string_t refVal_setOnesignalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("onesignal_id"))), refVal_setOnesignalId );
        setOnesignalId(refVal_setOnesignalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("payload"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setPayload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("payload"))), refVal_setPayload );
        setPayload(refVal_setPayload);
    }
    return ok;
}

utility::string_t CustomEvent::getName() const
{
    return m_Name;
}

void CustomEvent::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CustomEvent::nameIsSet() const
{
    return m_NameIsSet;
}

void CustomEvent::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CustomEvent::getExternalId() const
{
    return m_External_id;
}

void CustomEvent::setExternalId(const utility::string_t& value)
{
    m_External_id = value;
    m_External_idIsSet = true;
}

bool CustomEvent::externalIdIsSet() const
{
    return m_External_idIsSet;
}

void CustomEvent::unsetExternal_id()
{
    m_External_idIsSet = false;
}
utility::string_t CustomEvent::getOnesignalId() const
{
    return m_Onesignal_id;
}

void CustomEvent::setOnesignalId(const utility::string_t& value)
{
    m_Onesignal_id = value;
    m_Onesignal_idIsSet = true;
}

bool CustomEvent::onesignalIdIsSet() const
{
    return m_Onesignal_idIsSet;
}

void CustomEvent::unsetOnesignal_id()
{
    m_Onesignal_idIsSet = false;
}
utility::datetime CustomEvent::getTimestamp() const
{
    return m_Timestamp;
}

void CustomEvent::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool CustomEvent::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void CustomEvent::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::map<utility::string_t, utility::string_t>& CustomEvent::getPayload()
{
    return m_Payload;
}

void CustomEvent::setPayload(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Payload = value;
    m_PayloadIsSet = true;
}

bool CustomEvent::payloadIsSet() const
{
    return m_PayloadIsSet;
}

void CustomEvent::unsetPayload()
{
    m_PayloadIsSet = false;
}
}
}
}
}


