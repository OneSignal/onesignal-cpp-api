/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.2.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/GetSegmentsSuccessResponse.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



GetSegmentsSuccessResponse::GetSegmentsSuccessResponse()
{
    m_Total_count = 0;
    m_Total_countIsSet = false;
    m_Offset = 0;
    m_OffsetIsSet = false;
    m_Limit = 0;
    m_LimitIsSet = false;
    m_SegmentsIsSet = false;
}

GetSegmentsSuccessResponse::~GetSegmentsSuccessResponse()
{
}

void GetSegmentsSuccessResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetSegmentsSuccessResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Total_countIsSet)
    {
        val[utility::conversions::to_string_t(U("total_count"))] = ModelBase::toJson(m_Total_count);
    }
    if(m_OffsetIsSet)
    {
        val[utility::conversions::to_string_t(U("offset"))] = ModelBase::toJson(m_Offset);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_SegmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("segments"))] = ModelBase::toJson(m_Segments);
    }

    return val;
}

bool GetSegmentsSuccessResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("total_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalCount);
            setTotalCount(refVal_setTotalCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offset")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOffset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOffset);
            setOffset(refVal_setOffset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("segments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SegmentData>> refVal_setSegments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSegments);
            setSegments(refVal_setSegments);
        }
    }
    return ok;
}

void GetSegmentsSuccessResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Total_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_count")), m_Total_count));
    }
    if(m_OffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offset")), m_Offset));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_SegmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("segments")), m_Segments));
    }
}

bool GetSegmentsSuccessResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("total_count"))))
    {
        int32_t refVal_setTotalCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_count"))), refVal_setTotalCount );
        setTotalCount(refVal_setTotalCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offset"))))
    {
        int32_t refVal_setOffset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offset"))), refVal_setOffset );
        setOffset(refVal_setOffset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        int32_t refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("segments"))))
    {
        std::vector<std::shared_ptr<SegmentData>> refVal_setSegments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("segments"))), refVal_setSegments );
        setSegments(refVal_setSegments);
    }
    return ok;
}

int32_t GetSegmentsSuccessResponse::getTotalCount() const
{
    return m_Total_count;
}

void GetSegmentsSuccessResponse::setTotalCount(int32_t value)
{
    m_Total_count = value;
    m_Total_countIsSet = true;
}

bool GetSegmentsSuccessResponse::totalCountIsSet() const
{
    return m_Total_countIsSet;
}

void GetSegmentsSuccessResponse::unsetTotal_count()
{
    m_Total_countIsSet = false;
}
int32_t GetSegmentsSuccessResponse::getOffset() const
{
    return m_Offset;
}

void GetSegmentsSuccessResponse::setOffset(int32_t value)
{
    m_Offset = value;
    m_OffsetIsSet = true;
}

bool GetSegmentsSuccessResponse::offsetIsSet() const
{
    return m_OffsetIsSet;
}

void GetSegmentsSuccessResponse::unsetOffset()
{
    m_OffsetIsSet = false;
}
int32_t GetSegmentsSuccessResponse::getLimit() const
{
    return m_Limit;
}

void GetSegmentsSuccessResponse::setLimit(int32_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool GetSegmentsSuccessResponse::limitIsSet() const
{
    return m_LimitIsSet;
}

void GetSegmentsSuccessResponse::unsetLimit()
{
    m_LimitIsSet = false;
}
std::vector<std::shared_ptr<SegmentData>>& GetSegmentsSuccessResponse::getSegments()
{
    return m_Segments;
}

void GetSegmentsSuccessResponse::setSegments(const std::vector<std::shared_ptr<SegmentData>>& value)
{
    m_Segments = value;
    m_SegmentsIsSet = true;
}

bool GetSegmentsSuccessResponse::segmentsIsSet() const
{
    return m_SegmentsIsSet;
}

void GetSegmentsSuccessResponse::unsetSegments()
{
    m_SegmentsIsSet = false;
}
}
}
}
}


