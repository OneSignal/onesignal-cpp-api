/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/Notification.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



Notification::Notification()
{
    m_Included_segmentsIsSet = false;
    m_Excluded_segmentsIsSet = false;
    m_Last_session = utility::conversions::to_string_t("");
    m_Last_sessionIsSet = false;
    m_First_session = utility::conversions::to_string_t("");
    m_First_sessionIsSet = false;
    m_Session_count = utility::conversions::to_string_t("");
    m_Session_countIsSet = false;
    m_Session_time = utility::conversions::to_string_t("");
    m_Session_timeIsSet = false;
    m_Amount_spent = utility::conversions::to_string_t("");
    m_Amount_spentIsSet = false;
    m_Bought_sku = utility::conversions::to_string_t("");
    m_Bought_skuIsSet = false;
    m_Tag = utility::conversions::to_string_t("");
    m_TagIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_App_version = utility::conversions::to_string_t("");
    m_App_versionIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Include_player_idsIsSet = false;
    m_Include_external_user_idsIsSet = false;
    m_Include_email_tokensIsSet = false;
    m_Include_phone_numbersIsSet = false;
    m_Include_ios_tokensIsSet = false;
    m_Include_wp_wns_urisIsSet = false;
    m_Include_amazon_reg_idsIsSet = false;
    m_Include_chrome_reg_idsIsSet = false;
    m_Include_chrome_web_reg_idsIsSet = false;
    m_Include_android_reg_idsIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Value = 0;
    m_ValueIsSet = false;
    m_Aggregation = utility::conversions::to_string_t("");
    m_AggregationIsSet = false;
    m_IsIos = false;
    m_IsIosIsSet = false;
    m_IsAndroid = false;
    m_IsAndroidIsSet = false;
    m_IsHuawei = false;
    m_IsHuaweiIsSet = false;
    m_IsAnyWeb = false;
    m_IsAnyWebIsSet = false;
    m_IsChromeWeb = false;
    m_IsChromeWebIsSet = false;
    m_IsFirefox = false;
    m_IsFirefoxIsSet = false;
    m_IsSafari = false;
    m_IsSafariIsSet = false;
    m_IsWP_WNS = false;
    m_IsWP_WNSIsSet = false;
    m_IsAdm = false;
    m_IsAdmIsSet = false;
    m_IsChrome = false;
    m_IsChromeIsSet = false;
    m_Channel_for_external_user_ids = utility::conversions::to_string_t("");
    m_Channel_for_external_user_idsIsSet = false;
    m_App_id = utility::conversions::to_string_t("");
    m_App_idIsSet = false;
    m_External_id = utility::conversions::to_string_t("");
    m_External_idIsSet = false;
    m_ContentsIsSet = false;
    m_HeadingsIsSet = false;
    m_SubtitleIsSet = false;
    m_DataIsSet = false;
    m_Huawei_msg_type = utility::conversions::to_string_t("");
    m_Huawei_msg_typeIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Web_url = utility::conversions::to_string_t("");
    m_Web_urlIsSet = false;
    m_App_url = utility::conversions::to_string_t("");
    m_App_urlIsSet = false;
    m_Ios_attachmentsIsSet = false;
    m_Template_id = utility::conversions::to_string_t("");
    m_Template_idIsSet = false;
    m_Content_available = false;
    m_Content_availableIsSet = false;
    m_Mutable_content = false;
    m_Mutable_contentIsSet = false;
    m_Target_content_identifier = utility::conversions::to_string_t("");
    m_Target_content_identifierIsSet = false;
    m_Big_picture = utility::conversions::to_string_t("");
    m_Big_pictureIsSet = false;
    m_Huawei_big_picture = utility::conversions::to_string_t("");
    m_Huawei_big_pictureIsSet = false;
    m_Adm_big_picture = utility::conversions::to_string_t("");
    m_Adm_big_pictureIsSet = false;
    m_Chrome_big_picture = utility::conversions::to_string_t("");
    m_Chrome_big_pictureIsSet = false;
    m_Chrome_web_image = utility::conversions::to_string_t("");
    m_Chrome_web_imageIsSet = false;
    m_ButtonsIsSet = false;
    m_Web_buttonsIsSet = false;
    m_Ios_category = utility::conversions::to_string_t("");
    m_Ios_categoryIsSet = false;
    m_Android_channel_id = utility::conversions::to_string_t("");
    m_Android_channel_idIsSet = false;
    m_Huawei_channel_id = utility::conversions::to_string_t("");
    m_Huawei_channel_idIsSet = false;
    m_Existing_android_channel_id = utility::conversions::to_string_t("");
    m_Existing_android_channel_idIsSet = false;
    m_Huawei_existing_channel_id = utility::conversions::to_string_t("");
    m_Huawei_existing_channel_idIsSet = false;
    m_Android_background_layoutIsSet = false;
    m_Small_icon = utility::conversions::to_string_t("");
    m_Small_iconIsSet = false;
    m_Huawei_small_icon = utility::conversions::to_string_t("");
    m_Huawei_small_iconIsSet = false;
    m_Large_icon = utility::conversions::to_string_t("");
    m_Large_iconIsSet = false;
    m_Huawei_large_icon = utility::conversions::to_string_t("");
    m_Huawei_large_iconIsSet = false;
    m_Adm_small_icon = utility::conversions::to_string_t("");
    m_Adm_small_iconIsSet = false;
    m_Adm_large_icon = utility::conversions::to_string_t("");
    m_Adm_large_iconIsSet = false;
    m_Chrome_web_icon = utility::conversions::to_string_t("");
    m_Chrome_web_iconIsSet = false;
    m_Chrome_web_badge = utility::conversions::to_string_t("");
    m_Chrome_web_badgeIsSet = false;
    m_Firefox_icon = utility::conversions::to_string_t("");
    m_Firefox_iconIsSet = false;
    m_Chrome_icon = utility::conversions::to_string_t("");
    m_Chrome_iconIsSet = false;
    m_Ios_sound = utility::conversions::to_string_t("");
    m_Ios_soundIsSet = false;
    m_Android_sound = utility::conversions::to_string_t("");
    m_Android_soundIsSet = false;
    m_Huawei_sound = utility::conversions::to_string_t("");
    m_Huawei_soundIsSet = false;
    m_Adm_sound = utility::conversions::to_string_t("");
    m_Adm_soundIsSet = false;
    m_Wp_wns_sound = utility::conversions::to_string_t("");
    m_Wp_wns_soundIsSet = false;
    m_Android_led_color = utility::conversions::to_string_t("");
    m_Android_led_colorIsSet = false;
    m_Huawei_led_color = utility::conversions::to_string_t("");
    m_Huawei_led_colorIsSet = false;
    m_Android_accent_color = utility::conversions::to_string_t("");
    m_Android_accent_colorIsSet = false;
    m_Huawei_accent_color = utility::conversions::to_string_t("");
    m_Huawei_accent_colorIsSet = false;
    m_Android_visibility = 0;
    m_Android_visibilityIsSet = false;
    m_Huawei_visibility = 0;
    m_Huawei_visibilityIsSet = false;
    m_Ios_badgeType = utility::conversions::to_string_t("");
    m_Ios_badgeTypeIsSet = false;
    m_Ios_badgeCount = 0;
    m_Ios_badgeCountIsSet = false;
    m_Collapse_id = utility::conversions::to_string_t("");
    m_Collapse_idIsSet = false;
    m_Web_push_topic = utility::conversions::to_string_t("");
    m_Web_push_topicIsSet = false;
    m_Apns_alertIsSet = false;
    m_Send_after = utility::conversions::to_string_t("");
    m_Send_afterIsSet = false;
    m_Delayed_option = utility::conversions::to_string_t("");
    m_Delayed_optionIsSet = false;
    m_Delivery_time_of_day = utility::conversions::to_string_t("");
    m_Delivery_time_of_dayIsSet = false;
    m_Ttl = 0;
    m_TtlIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_Apns_push_type_override = utility::conversions::to_string_t("");
    m_Apns_push_type_overrideIsSet = false;
    m_Throttle_rate_per_minute = utility::conversions::to_string_t("");
    m_Throttle_rate_per_minuteIsSet = false;
    m_Android_group = utility::conversions::to_string_t("");
    m_Android_groupIsSet = false;
    m_Android_group_message = utility::conversions::to_string_t("");
    m_Android_group_messageIsSet = false;
    m_Adm_group = utility::conversions::to_string_t("");
    m_Adm_groupIsSet = false;
    m_Adm_group_messageIsSet = false;
    m_Thread_id = utility::conversions::to_string_t("");
    m_Thread_idIsSet = false;
    m_Summary_arg = utility::conversions::to_string_t("");
    m_Summary_argIsSet = false;
    m_Summary_arg_count = 0;
    m_Summary_arg_countIsSet = false;
    m_Email_subect = utility::conversions::to_string_t("");
    m_Email_subectIsSet = false;
    m_Email_body = utility::conversions::to_string_t("");
    m_Email_bodyIsSet = false;
    m_Email_from_name = utility::conversions::to_string_t("");
    m_Email_from_nameIsSet = false;
    m_Email_from_address = utility::conversions::to_string_t("");
    m_Email_from_addressIsSet = false;
    m_Sms_from = utility::conversions::to_string_t("");
    m_Sms_fromIsSet = false;
    m_Sms_media_urlsIsSet = false;
}

Notification::~Notification()
{
}

void Notification::validate()
{
    // TODO: implement validation
}

web::json::value Notification::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Included_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("included_segments"))] = ModelBase::toJson(m_Included_segments);
    }
    if(m_Excluded_segmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("excluded_segments"))] = ModelBase::toJson(m_Excluded_segments);
    }
    if(m_Last_sessionIsSet)
    {
        val[utility::conversions::to_string_t(U("last_session"))] = ModelBase::toJson(m_Last_session);
    }
    if(m_First_sessionIsSet)
    {
        val[utility::conversions::to_string_t(U("first_session"))] = ModelBase::toJson(m_First_session);
    }
    if(m_Session_countIsSet)
    {
        val[utility::conversions::to_string_t(U("session_count"))] = ModelBase::toJson(m_Session_count);
    }
    if(m_Session_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("session_time"))] = ModelBase::toJson(m_Session_time);
    }
    if(m_Amount_spentIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_spent"))] = ModelBase::toJson(m_Amount_spent);
    }
    if(m_Bought_skuIsSet)
    {
        val[utility::conversions::to_string_t(U("bought_sku"))] = ModelBase::toJson(m_Bought_sku);
    }
    if(m_TagIsSet)
    {
        val[utility::conversions::to_string_t(U("tag"))] = ModelBase::toJson(m_Tag);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t(U("language"))] = ModelBase::toJson(m_Language);
    }
    if(m_App_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("app_version"))] = ModelBase::toJson(m_App_version);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t(U("location"))] = ModelBase::toJson(m_Location);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t(U("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_Include_player_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_player_ids"))] = ModelBase::toJson(m_Include_player_ids);
    }
    if(m_Include_external_user_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_external_user_ids"))] = ModelBase::toJson(m_Include_external_user_ids);
    }
    if(m_Include_email_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("include_email_tokens"))] = ModelBase::toJson(m_Include_email_tokens);
    }
    if(m_Include_phone_numbersIsSet)
    {
        val[utility::conversions::to_string_t(U("include_phone_numbers"))] = ModelBase::toJson(m_Include_phone_numbers);
    }
    if(m_Include_ios_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("include_ios_tokens"))] = ModelBase::toJson(m_Include_ios_tokens);
    }
    if(m_Include_wp_wns_urisIsSet)
    {
        val[utility::conversions::to_string_t(U("include_wp_wns_uris"))] = ModelBase::toJson(m_Include_wp_wns_uris);
    }
    if(m_Include_amazon_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_amazon_reg_ids"))] = ModelBase::toJson(m_Include_amazon_reg_ids);
    }
    if(m_Include_chrome_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_chrome_reg_ids"))] = ModelBase::toJson(m_Include_chrome_reg_ids);
    }
    if(m_Include_chrome_web_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))] = ModelBase::toJson(m_Include_chrome_web_reg_ids);
    }
    if(m_Include_android_reg_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("include_android_reg_ids"))] = ModelBase::toJson(m_Include_android_reg_ids);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_AggregationIsSet)
    {
        val[utility::conversions::to_string_t(U("aggregation"))] = ModelBase::toJson(m_Aggregation);
    }
    if(m_IsIosIsSet)
    {
        val[utility::conversions::to_string_t(U("isIos"))] = ModelBase::toJson(m_IsIos);
    }
    if(m_IsAndroidIsSet)
    {
        val[utility::conversions::to_string_t(U("isAndroid"))] = ModelBase::toJson(m_IsAndroid);
    }
    if(m_IsHuaweiIsSet)
    {
        val[utility::conversions::to_string_t(U("isHuawei"))] = ModelBase::toJson(m_IsHuawei);
    }
    if(m_IsAnyWebIsSet)
    {
        val[utility::conversions::to_string_t(U("isAnyWeb"))] = ModelBase::toJson(m_IsAnyWeb);
    }
    if(m_IsChromeWebIsSet)
    {
        val[utility::conversions::to_string_t(U("isChromeWeb"))] = ModelBase::toJson(m_IsChromeWeb);
    }
    if(m_IsFirefoxIsSet)
    {
        val[utility::conversions::to_string_t(U("isFirefox"))] = ModelBase::toJson(m_IsFirefox);
    }
    if(m_IsSafariIsSet)
    {
        val[utility::conversions::to_string_t(U("isSafari"))] = ModelBase::toJson(m_IsSafari);
    }
    if(m_IsWP_WNSIsSet)
    {
        val[utility::conversions::to_string_t(U("isWP_WNS"))] = ModelBase::toJson(m_IsWP_WNS);
    }
    if(m_IsAdmIsSet)
    {
        val[utility::conversions::to_string_t(U("isAdm"))] = ModelBase::toJson(m_IsAdm);
    }
    if(m_IsChromeIsSet)
    {
        val[utility::conversions::to_string_t(U("isChrome"))] = ModelBase::toJson(m_IsChrome);
    }
    if(m_Channel_for_external_user_idsIsSet)
    {
        val[utility::conversions::to_string_t(U("channel_for_external_user_ids"))] = ModelBase::toJson(m_Channel_for_external_user_ids);
    }
    if(m_App_idIsSet)
    {
        val[utility::conversions::to_string_t(U("app_id"))] = ModelBase::toJson(m_App_id);
    }
    if(m_External_idIsSet)
    {
        val[utility::conversions::to_string_t(U("external_id"))] = ModelBase::toJson(m_External_id);
    }
    if(m_ContentsIsSet)
    {
        val[utility::conversions::to_string_t(U("contents"))] = ModelBase::toJson(m_Contents);
    }
    if(m_HeadingsIsSet)
    {
        val[utility::conversions::to_string_t(U("headings"))] = ModelBase::toJson(m_Headings);
    }
    if(m_SubtitleIsSet)
    {
        val[utility::conversions::to_string_t(U("subtitle"))] = ModelBase::toJson(m_Subtitle);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }
    if(m_Huawei_msg_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_msg_type"))] = ModelBase::toJson(m_Huawei_msg_type);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_Web_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("web_url"))] = ModelBase::toJson(m_Web_url);
    }
    if(m_App_urlIsSet)
    {
        val[utility::conversions::to_string_t(U("app_url"))] = ModelBase::toJson(m_App_url);
    }
    if(m_Ios_attachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_attachments"))] = ModelBase::toJson(m_Ios_attachments);
    }
    if(m_Template_idIsSet)
    {
        val[utility::conversions::to_string_t(U("template_id"))] = ModelBase::toJson(m_Template_id);
    }
    if(m_Content_availableIsSet)
    {
        val[utility::conversions::to_string_t(U("content_available"))] = ModelBase::toJson(m_Content_available);
    }
    if(m_Mutable_contentIsSet)
    {
        val[utility::conversions::to_string_t(U("mutable_content"))] = ModelBase::toJson(m_Mutable_content);
    }
    if(m_Target_content_identifierIsSet)
    {
        val[utility::conversions::to_string_t(U("target_content_identifier"))] = ModelBase::toJson(m_Target_content_identifier);
    }
    if(m_Big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("big_picture"))] = ModelBase::toJson(m_Big_picture);
    }
    if(m_Huawei_big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_big_picture"))] = ModelBase::toJson(m_Huawei_big_picture);
    }
    if(m_Adm_big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_big_picture"))] = ModelBase::toJson(m_Adm_big_picture);
    }
    if(m_Chrome_big_pictureIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_big_picture"))] = ModelBase::toJson(m_Chrome_big_picture);
    }
    if(m_Chrome_web_imageIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_image"))] = ModelBase::toJson(m_Chrome_web_image);
    }
    if(m_ButtonsIsSet)
    {
        val[utility::conversions::to_string_t(U("buttons"))] = ModelBase::toJson(m_Buttons);
    }
    if(m_Web_buttonsIsSet)
    {
        val[utility::conversions::to_string_t(U("web_buttons"))] = ModelBase::toJson(m_Web_buttons);
    }
    if(m_Ios_categoryIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_category"))] = ModelBase::toJson(m_Ios_category);
    }
    if(m_Android_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("android_channel_id"))] = ModelBase::toJson(m_Android_channel_id);
    }
    if(m_Huawei_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_channel_id"))] = ModelBase::toJson(m_Huawei_channel_id);
    }
    if(m_Existing_android_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("existing_android_channel_id"))] = ModelBase::toJson(m_Existing_android_channel_id);
    }
    if(m_Huawei_existing_channel_idIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_existing_channel_id"))] = ModelBase::toJson(m_Huawei_existing_channel_id);
    }
    if(m_Android_background_layoutIsSet)
    {
        val[utility::conversions::to_string_t(U("android_background_layout"))] = ModelBase::toJson(m_Android_background_layout);
    }
    if(m_Small_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("small_icon"))] = ModelBase::toJson(m_Small_icon);
    }
    if(m_Huawei_small_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_small_icon"))] = ModelBase::toJson(m_Huawei_small_icon);
    }
    if(m_Large_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("large_icon"))] = ModelBase::toJson(m_Large_icon);
    }
    if(m_Huawei_large_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_large_icon"))] = ModelBase::toJson(m_Huawei_large_icon);
    }
    if(m_Adm_small_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_small_icon"))] = ModelBase::toJson(m_Adm_small_icon);
    }
    if(m_Adm_large_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_large_icon"))] = ModelBase::toJson(m_Adm_large_icon);
    }
    if(m_Chrome_web_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_icon"))] = ModelBase::toJson(m_Chrome_web_icon);
    }
    if(m_Chrome_web_badgeIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_badge"))] = ModelBase::toJson(m_Chrome_web_badge);
    }
    if(m_Firefox_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("firefox_icon"))] = ModelBase::toJson(m_Firefox_icon);
    }
    if(m_Chrome_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_icon"))] = ModelBase::toJson(m_Chrome_icon);
    }
    if(m_Ios_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_sound"))] = ModelBase::toJson(m_Ios_sound);
    }
    if(m_Android_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("android_sound"))] = ModelBase::toJson(m_Android_sound);
    }
    if(m_Huawei_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_sound"))] = ModelBase::toJson(m_Huawei_sound);
    }
    if(m_Adm_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_sound"))] = ModelBase::toJson(m_Adm_sound);
    }
    if(m_Wp_wns_soundIsSet)
    {
        val[utility::conversions::to_string_t(U("wp_wns_sound"))] = ModelBase::toJson(m_Wp_wns_sound);
    }
    if(m_Android_led_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("android_led_color"))] = ModelBase::toJson(m_Android_led_color);
    }
    if(m_Huawei_led_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_led_color"))] = ModelBase::toJson(m_Huawei_led_color);
    }
    if(m_Android_accent_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("android_accent_color"))] = ModelBase::toJson(m_Android_accent_color);
    }
    if(m_Huawei_accent_colorIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_accent_color"))] = ModelBase::toJson(m_Huawei_accent_color);
    }
    if(m_Android_visibilityIsSet)
    {
        val[utility::conversions::to_string_t(U("android_visibility"))] = ModelBase::toJson(m_Android_visibility);
    }
    if(m_Huawei_visibilityIsSet)
    {
        val[utility::conversions::to_string_t(U("huawei_visibility"))] = ModelBase::toJson(m_Huawei_visibility);
    }
    if(m_Ios_badgeTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_badgeType"))] = ModelBase::toJson(m_Ios_badgeType);
    }
    if(m_Ios_badgeCountIsSet)
    {
        val[utility::conversions::to_string_t(U("ios_badgeCount"))] = ModelBase::toJson(m_Ios_badgeCount);
    }
    if(m_Collapse_idIsSet)
    {
        val[utility::conversions::to_string_t(U("collapse_id"))] = ModelBase::toJson(m_Collapse_id);
    }
    if(m_Web_push_topicIsSet)
    {
        val[utility::conversions::to_string_t(U("web_push_topic"))] = ModelBase::toJson(m_Web_push_topic);
    }
    if(m_Apns_alertIsSet)
    {
        val[utility::conversions::to_string_t(U("apns_alert"))] = ModelBase::toJson(m_Apns_alert);
    }
    if(m_Send_afterIsSet)
    {
        val[utility::conversions::to_string_t(U("send_after"))] = ModelBase::toJson(m_Send_after);
    }
    if(m_Delayed_optionIsSet)
    {
        val[utility::conversions::to_string_t(U("delayed_option"))] = ModelBase::toJson(m_Delayed_option);
    }
    if(m_Delivery_time_of_dayIsSet)
    {
        val[utility::conversions::to_string_t(U("delivery_time_of_day"))] = ModelBase::toJson(m_Delivery_time_of_day);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t(U("ttl"))] = ModelBase::toJson(m_Ttl);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_Apns_push_type_overrideIsSet)
    {
        val[utility::conversions::to_string_t(U("apns_push_type_override"))] = ModelBase::toJson(m_Apns_push_type_override);
    }
    if(m_Throttle_rate_per_minuteIsSet)
    {
        val[utility::conversions::to_string_t(U("throttle_rate_per_minute"))] = ModelBase::toJson(m_Throttle_rate_per_minute);
    }
    if(m_Android_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("android_group"))] = ModelBase::toJson(m_Android_group);
    }
    if(m_Android_group_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("android_group_message"))] = ModelBase::toJson(m_Android_group_message);
    }
    if(m_Adm_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_group"))] = ModelBase::toJson(m_Adm_group);
    }
    if(m_Adm_group_messageIsSet)
    {
        val[utility::conversions::to_string_t(U("adm_group_message"))] = ModelBase::toJson(m_Adm_group_message);
    }
    if(m_Thread_idIsSet)
    {
        val[utility::conversions::to_string_t(U("thread_id"))] = ModelBase::toJson(m_Thread_id);
    }
    if(m_Summary_argIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_arg"))] = ModelBase::toJson(m_Summary_arg);
    }
    if(m_Summary_arg_countIsSet)
    {
        val[utility::conversions::to_string_t(U("summary_arg_count"))] = ModelBase::toJson(m_Summary_arg_count);
    }
    if(m_Email_subectIsSet)
    {
        val[utility::conversions::to_string_t(U("email_subect"))] = ModelBase::toJson(m_Email_subect);
    }
    if(m_Email_bodyIsSet)
    {
        val[utility::conversions::to_string_t(U("email_body"))] = ModelBase::toJson(m_Email_body);
    }
    if(m_Email_from_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("email_from_name"))] = ModelBase::toJson(m_Email_from_name);
    }
    if(m_Email_from_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("email_from_address"))] = ModelBase::toJson(m_Email_from_address);
    }
    if(m_Sms_fromIsSet)
    {
        val[utility::conversions::to_string_t(U("sms_from"))] = ModelBase::toJson(m_Sms_from);
    }
    if(m_Sms_media_urlsIsSet)
    {
        val[utility::conversions::to_string_t(U("sms_media_urls"))] = ModelBase::toJson(m_Sms_media_urls);
    }

    return val;
}

bool Notification::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("included_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("included_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_included_segments;
            ok &= ModelBase::fromJson(fieldValue, refVal_included_segments);
            setIncludedSegments(refVal_included_segments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("excluded_segments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_excluded_segments;
            ok &= ModelBase::fromJson(fieldValue, refVal_excluded_segments);
            setExcludedSegments(refVal_excluded_segments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_session"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_session")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_last_session;
            ok &= ModelBase::fromJson(fieldValue, refVal_last_session);
            setLastSession(refVal_last_session);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("first_session"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("first_session")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_first_session;
            ok &= ModelBase::fromJson(fieldValue, refVal_first_session);
            setFirstSession(refVal_first_session);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_session_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_session_count);
            setSessionCount(refVal_session_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("session_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("session_time")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_session_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_session_time);
            setSessionTime(refVal_session_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_spent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_spent")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_amount_spent;
            ok &= ModelBase::fromJson(fieldValue, refVal_amount_spent);
            setAmountSpent(refVal_amount_spent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bought_sku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bought_sku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bought_sku;
            ok &= ModelBase::fromJson(fieldValue, refVal_bought_sku);
            setBoughtSku(refVal_bought_sku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tag;
            ok &= ModelBase::fromJson(fieldValue, refVal_tag);
            setTag(refVal_tag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("language"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("language")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_language;
            ok &= ModelBase::fromJson(fieldValue, refVal_language);
            setLanguage(refVal_language);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_app_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_app_version);
            setAppVersion(refVal_app_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("location"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("location")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_country;
            ok &= ModelBase::fromJson(fieldValue, refVal_country);
            setCountry(refVal_country);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_player_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_player_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_player_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_player_ids);
            setIncludePlayerIds(refVal_include_player_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_external_user_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_external_user_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_external_user_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_external_user_ids);
            setIncludeExternalUserIds(refVal_include_external_user_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_email_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_email_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_email_tokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_email_tokens);
            setIncludeEmailTokens(refVal_include_email_tokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_phone_numbers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_phone_numbers")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_phone_numbers;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_phone_numbers);
            setIncludePhoneNumbers(refVal_include_phone_numbers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_ios_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_ios_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_ios_tokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_ios_tokens);
            setIncludeIosTokens(refVal_include_ios_tokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_wp_wns_uris"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_wp_wns_uris")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_wp_wns_uris;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_wp_wns_uris);
            setIncludeWpWnsUris(refVal_include_wp_wns_uris);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_amazon_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_amazon_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_amazon_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_amazon_reg_ids);
            setIncludeAmazonRegIds(refVal_include_amazon_reg_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_chrome_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_chrome_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_chrome_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_chrome_reg_ids);
            setIncludeChromeRegIds(refVal_include_chrome_reg_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_chrome_web_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_chrome_web_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_chrome_web_reg_ids);
            setIncludeChromeWebRegIds(refVal_include_chrome_web_reg_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("include_android_reg_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("include_android_reg_ids")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_include_android_reg_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_include_android_reg_ids);
            setIncludeAndroidRegIds(refVal_include_android_reg_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aggregation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aggregation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_aggregation;
            ok &= ModelBase::fromJson(fieldValue, refVal_aggregation);
            setAggregation(refVal_aggregation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isIos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isIos")));
        if(!fieldValue.is_null())
        {
            bool refVal_isIos;
            ok &= ModelBase::fromJson(fieldValue, refVal_isIos);
            setIsIos(refVal_isIos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isAndroid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isAndroid")));
        if(!fieldValue.is_null())
        {
            bool refVal_isAndroid;
            ok &= ModelBase::fromJson(fieldValue, refVal_isAndroid);
            setIsAndroid(refVal_isAndroid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isHuawei"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isHuawei")));
        if(!fieldValue.is_null())
        {
            bool refVal_isHuawei;
            ok &= ModelBase::fromJson(fieldValue, refVal_isHuawei);
            setIsHuawei(refVal_isHuawei);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isAnyWeb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isAnyWeb")));
        if(!fieldValue.is_null())
        {
            bool refVal_isAnyWeb;
            ok &= ModelBase::fromJson(fieldValue, refVal_isAnyWeb);
            setIsAnyWeb(refVal_isAnyWeb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isChromeWeb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isChromeWeb")));
        if(!fieldValue.is_null())
        {
            bool refVal_isChromeWeb;
            ok &= ModelBase::fromJson(fieldValue, refVal_isChromeWeb);
            setIsChromeWeb(refVal_isChromeWeb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isFirefox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isFirefox")));
        if(!fieldValue.is_null())
        {
            bool refVal_isFirefox;
            ok &= ModelBase::fromJson(fieldValue, refVal_isFirefox);
            setIsFirefox(refVal_isFirefox);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isSafari"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isSafari")));
        if(!fieldValue.is_null())
        {
            bool refVal_isSafari;
            ok &= ModelBase::fromJson(fieldValue, refVal_isSafari);
            setIsSafari(refVal_isSafari);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isWP_WNS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isWP_WNS")));
        if(!fieldValue.is_null())
        {
            bool refVal_isWP_WNS;
            ok &= ModelBase::fromJson(fieldValue, refVal_isWP_WNS);
            setIsWPWNS(refVal_isWP_WNS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isAdm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isAdm")));
        if(!fieldValue.is_null())
        {
            bool refVal_isAdm;
            ok &= ModelBase::fromJson(fieldValue, refVal_isAdm);
            setIsAdm(refVal_isAdm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isChrome"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isChrome")));
        if(!fieldValue.is_null())
        {
            bool refVal_isChrome;
            ok &= ModelBase::fromJson(fieldValue, refVal_isChrome);
            setIsChrome(refVal_isChrome);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("channel_for_external_user_ids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("channel_for_external_user_ids")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_channel_for_external_user_ids;
            ok &= ModelBase::fromJson(fieldValue, refVal_channel_for_external_user_ids);
            setChannelForExternalUserIds(refVal_channel_for_external_user_ids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_app_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_app_id);
            setAppId(refVal_app_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_external_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_external_id);
            setExternalId(refVal_external_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contents")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StringMap> refVal_contents;
            ok &= ModelBase::fromJson(fieldValue, refVal_contents);
            setContents(refVal_contents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("headings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("headings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StringMap> refVal_headings;
            ok &= ModelBase::fromJson(fieldValue, refVal_headings);
            setHeadings(refVal_headings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subtitle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subtitle")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StringMap> refVal_subtitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_subtitle);
            setSubtitle(refVal_subtitle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_data);
            setData(refVal_data);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_msg_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_msg_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_msg_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_msg_type);
            setHuaweiMsgType(refVal_huawei_msg_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_url);
            setUrl(refVal_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("web_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("web_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_web_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_web_url);
            setWebUrl(refVal_web_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_app_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_app_url);
            setAppUrl(refVal_app_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_attachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_attachments")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_ios_attachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_ios_attachments);
            setIosAttachments(refVal_ios_attachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_template_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_template_id);
            setTemplateId(refVal_template_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content_available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content_available")));
        if(!fieldValue.is_null())
        {
            bool refVal_content_available;
            ok &= ModelBase::fromJson(fieldValue, refVal_content_available);
            setContentAvailable(refVal_content_available);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mutable_content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mutable_content")));
        if(!fieldValue.is_null())
        {
            bool refVal_mutable_content;
            ok &= ModelBase::fromJson(fieldValue, refVal_mutable_content);
            setMutableContent(refVal_mutable_content);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("target_content_identifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("target_content_identifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_target_content_identifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_target_content_identifier);
            setTargetContentIdentifier(refVal_target_content_identifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_big_picture;
            ok &= ModelBase::fromJson(fieldValue, refVal_big_picture);
            setBigPicture(refVal_big_picture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_big_picture;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_big_picture);
            setHuaweiBigPicture(refVal_huawei_big_picture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_adm_big_picture;
            ok &= ModelBase::fromJson(fieldValue, refVal_adm_big_picture);
            setAdmBigPicture(refVal_adm_big_picture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_big_picture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_big_picture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_big_picture;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_big_picture);
            setChromeBigPicture(refVal_chrome_big_picture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_image"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_image")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_web_image;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_web_image);
            setChromeWebImage(refVal_chrome_web_image);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buttons"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buttons")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Button>> refVal_buttons;
            ok &= ModelBase::fromJson(fieldValue, refVal_buttons);
            setButtons(refVal_buttons);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("web_buttons"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("web_buttons")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Button>> refVal_web_buttons;
            ok &= ModelBase::fromJson(fieldValue, refVal_web_buttons);
            setWebButtons(refVal_web_buttons);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ios_category;
            ok &= ModelBase::fromJson(fieldValue, refVal_ios_category);
            setIosCategory(refVal_ios_category);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_android_channel_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_channel_id);
            setAndroidChannelId(refVal_android_channel_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_channel_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_channel_id);
            setHuaweiChannelId(refVal_huawei_channel_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("existing_android_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("existing_android_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_existing_android_channel_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_existing_android_channel_id);
            setExistingAndroidChannelId(refVal_existing_android_channel_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_existing_channel_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_existing_channel_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_existing_channel_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_existing_channel_id);
            setHuaweiExistingChannelId(refVal_huawei_existing_channel_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_background_layout"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_background_layout")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Notification_allOf_android_background_layout> refVal_android_background_layout;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_background_layout);
            setAndroidBackgroundLayout(refVal_android_background_layout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("small_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("small_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_small_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_small_icon);
            setSmallIcon(refVal_small_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_small_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_small_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_small_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_small_icon);
            setHuaweiSmallIcon(refVal_huawei_small_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("large_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("large_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_large_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_large_icon);
            setLargeIcon(refVal_large_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_large_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_large_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_large_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_large_icon);
            setHuaweiLargeIcon(refVal_huawei_large_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_small_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_small_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_adm_small_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_adm_small_icon);
            setAdmSmallIcon(refVal_adm_small_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_large_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_large_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_adm_large_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_adm_large_icon);
            setAdmLargeIcon(refVal_adm_large_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_web_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_web_icon);
            setChromeWebIcon(refVal_chrome_web_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_badge"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_badge")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_web_badge;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_web_badge);
            setChromeWebBadge(refVal_chrome_web_badge);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("firefox_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("firefox_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_firefox_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_firefox_icon);
            setFirefoxIcon(refVal_firefox_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_icon);
            setChromeIcon(refVal_chrome_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ios_sound;
            ok &= ModelBase::fromJson(fieldValue, refVal_ios_sound);
            setIosSound(refVal_ios_sound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_android_sound;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_sound);
            setAndroidSound(refVal_android_sound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_sound;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_sound);
            setHuaweiSound(refVal_huawei_sound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_adm_sound;
            ok &= ModelBase::fromJson(fieldValue, refVal_adm_sound);
            setAdmSound(refVal_adm_sound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wp_wns_sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wp_wns_sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wp_wns_sound;
            ok &= ModelBase::fromJson(fieldValue, refVal_wp_wns_sound);
            setWpWnsSound(refVal_wp_wns_sound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_led_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_led_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_android_led_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_led_color);
            setAndroidLedColor(refVal_android_led_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_led_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_led_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_led_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_led_color);
            setHuaweiLedColor(refVal_huawei_led_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_accent_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_accent_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_android_accent_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_accent_color);
            setAndroidAccentColor(refVal_android_accent_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_accent_color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_accent_color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_huawei_accent_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_accent_color);
            setHuaweiAccentColor(refVal_huawei_accent_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_visibility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_visibility")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_android_visibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_visibility);
            setAndroidVisibility(refVal_android_visibility);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("huawei_visibility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("huawei_visibility")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_huawei_visibility;
            ok &= ModelBase::fromJson(fieldValue, refVal_huawei_visibility);
            setHuaweiVisibility(refVal_huawei_visibility);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_badgeType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_badgeType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ios_badgeType;
            ok &= ModelBase::fromJson(fieldValue, refVal_ios_badgeType);
            setIosBadgeType(refVal_ios_badgeType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ios_badgeCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ios_badgeCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ios_badgeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_ios_badgeCount);
            setIosBadgeCount(refVal_ios_badgeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collapse_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collapse_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_collapse_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_collapse_id);
            setCollapseId(refVal_collapse_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("web_push_topic"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("web_push_topic")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_web_push_topic;
            ok &= ModelBase::fromJson(fieldValue, refVal_web_push_topic);
            setWebPushTopic(refVal_web_push_topic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_alert"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_alert")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_apns_alert;
            ok &= ModelBase::fromJson(fieldValue, refVal_apns_alert);
            setApnsAlert(refVal_apns_alert);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("send_after"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("send_after")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_send_after;
            ok &= ModelBase::fromJson(fieldValue, refVal_send_after);
            setSendAfter(refVal_send_after);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delayed_option"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delayed_option")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_delayed_option;
            ok &= ModelBase::fromJson(fieldValue, refVal_delayed_option);
            setDelayedOption(refVal_delayed_option);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delivery_time_of_day"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delivery_time_of_day")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_delivery_time_of_day;
            ok &= ModelBase::fromJson(fieldValue, refVal_delivery_time_of_day);
            setDeliveryTimeOfDay(refVal_delivery_time_of_day);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ttl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ttl")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ttl;
            ok &= ModelBase::fromJson(fieldValue, refVal_ttl);
            setTtl(refVal_ttl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_priority;
            ok &= ModelBase::fromJson(fieldValue, refVal_priority);
            setPriority(refVal_priority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_push_type_override"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_push_type_override")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apns_push_type_override;
            ok &= ModelBase::fromJson(fieldValue, refVal_apns_push_type_override);
            setApnsPushTypeOverride(refVal_apns_push_type_override);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("throttle_rate_per_minute"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("throttle_rate_per_minute")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_throttle_rate_per_minute;
            ok &= ModelBase::fromJson(fieldValue, refVal_throttle_rate_per_minute);
            setThrottleRatePerMinute(refVal_throttle_rate_per_minute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_android_group;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_group);
            setAndroidGroup(refVal_android_group);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_group_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_group_message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_android_group_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_group_message);
            setAndroidGroupMessage(refVal_android_group_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_adm_group;
            ok &= ModelBase::fromJson(fieldValue, refVal_adm_group);
            setAdmGroup(refVal_adm_group);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adm_group_message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adm_group_message")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_adm_group_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_adm_group_message);
            setAdmGroupMessage(refVal_adm_group_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_thread_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_thread_id);
            setThreadId(refVal_thread_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_arg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_arg")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_summary_arg;
            ok &= ModelBase::fromJson(fieldValue, refVal_summary_arg);
            setSummaryArg(refVal_summary_arg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("summary_arg_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("summary_arg_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_summary_arg_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_summary_arg_count);
            setSummaryArgCount(refVal_summary_arg_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_subect"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_subect")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email_subect;
            ok &= ModelBase::fromJson(fieldValue, refVal_email_subect);
            setEmailSubect(refVal_email_subect);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_email_body);
            setEmailBody(refVal_email_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_from_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_from_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email_from_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_email_from_name);
            setEmailFromName(refVal_email_from_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_from_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_from_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email_from_address;
            ok &= ModelBase::fromJson(fieldValue, refVal_email_from_address);
            setEmailFromAddress(refVal_email_from_address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sms_from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sms_from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sms_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_sms_from);
            setSmsFrom(refVal_sms_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sms_media_urls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sms_media_urls")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_sms_media_urls;
            ok &= ModelBase::fromJson(fieldValue, refVal_sms_media_urls);
            setSmsMediaUrls(refVal_sms_media_urls);
        }
    }
    return ok;
}

void Notification::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Included_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("included_segments")), m_Included_segments));
    }
    if(m_Excluded_segmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("excluded_segments")), m_Excluded_segments));
    }
    if(m_Last_sessionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_session")), m_Last_session));
    }
    if(m_First_sessionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("first_session")), m_First_session));
    }
    if(m_Session_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_count")), m_Session_count));
    }
    if(m_Session_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("session_time")), m_Session_time));
    }
    if(m_Amount_spentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_spent")), m_Amount_spent));
    }
    if(m_Bought_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bought_sku")), m_Bought_sku));
    }
    if(m_TagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag")), m_Tag));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("language")), m_Language));
    }
    if(m_App_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_version")), m_App_version));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("location")), m_Location));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email")), m_Email));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_Include_player_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_player_ids")), m_Include_player_ids));
    }
    if(m_Include_external_user_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_external_user_ids")), m_Include_external_user_ids));
    }
    if(m_Include_email_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_email_tokens")), m_Include_email_tokens));
    }
    if(m_Include_phone_numbersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_phone_numbers")), m_Include_phone_numbers));
    }
    if(m_Include_ios_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_ios_tokens")), m_Include_ios_tokens));
    }
    if(m_Include_wp_wns_urisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_wp_wns_uris")), m_Include_wp_wns_uris));
    }
    if(m_Include_amazon_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_amazon_reg_ids")), m_Include_amazon_reg_ids));
    }
    if(m_Include_chrome_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_chrome_reg_ids")), m_Include_chrome_reg_ids));
    }
    if(m_Include_chrome_web_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_chrome_web_reg_ids")), m_Include_chrome_web_reg_ids));
    }
    if(m_Include_android_reg_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("include_android_reg_ids")), m_Include_android_reg_ids));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_AggregationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aggregation")), m_Aggregation));
    }
    if(m_IsIosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isIos")), m_IsIos));
    }
    if(m_IsAndroidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isAndroid")), m_IsAndroid));
    }
    if(m_IsHuaweiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isHuawei")), m_IsHuawei));
    }
    if(m_IsAnyWebIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isAnyWeb")), m_IsAnyWeb));
    }
    if(m_IsChromeWebIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isChromeWeb")), m_IsChromeWeb));
    }
    if(m_IsFirefoxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isFirefox")), m_IsFirefox));
    }
    if(m_IsSafariIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isSafari")), m_IsSafari));
    }
    if(m_IsWP_WNSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isWP_WNS")), m_IsWP_WNS));
    }
    if(m_IsAdmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isAdm")), m_IsAdm));
    }
    if(m_IsChromeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isChrome")), m_IsChrome));
    }
    if(m_Channel_for_external_user_idsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("channel_for_external_user_ids")), m_Channel_for_external_user_ids));
    }
    if(m_App_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_id")), m_App_id));
    }
    if(m_External_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_id")), m_External_id));
    }
    if(m_ContentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contents")), m_Contents));
    }
    if(m_HeadingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("headings")), m_Headings));
    }
    if(m_SubtitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subtitle")), m_Subtitle));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
    if(m_Huawei_msg_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_msg_type")), m_Huawei_msg_type));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_Web_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("web_url")), m_Web_url));
    }
    if(m_App_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_url")), m_App_url));
    }
    if(m_Ios_attachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_attachments")), m_Ios_attachments));
    }
    if(m_Template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template_id")), m_Template_id));
    }
    if(m_Content_availableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content_available")), m_Content_available));
    }
    if(m_Mutable_contentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mutable_content")), m_Mutable_content));
    }
    if(m_Target_content_identifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("target_content_identifier")), m_Target_content_identifier));
    }
    if(m_Big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("big_picture")), m_Big_picture));
    }
    if(m_Huawei_big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_big_picture")), m_Huawei_big_picture));
    }
    if(m_Adm_big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_big_picture")), m_Adm_big_picture));
    }
    if(m_Chrome_big_pictureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_big_picture")), m_Chrome_big_picture));
    }
    if(m_Chrome_web_imageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_image")), m_Chrome_web_image));
    }
    if(m_ButtonsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buttons")), m_Buttons));
    }
    if(m_Web_buttonsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("web_buttons")), m_Web_buttons));
    }
    if(m_Ios_categoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_category")), m_Ios_category));
    }
    if(m_Android_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_channel_id")), m_Android_channel_id));
    }
    if(m_Huawei_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_channel_id")), m_Huawei_channel_id));
    }
    if(m_Existing_android_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("existing_android_channel_id")), m_Existing_android_channel_id));
    }
    if(m_Huawei_existing_channel_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_existing_channel_id")), m_Huawei_existing_channel_id));
    }
    if(m_Android_background_layoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_background_layout")), m_Android_background_layout));
    }
    if(m_Small_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("small_icon")), m_Small_icon));
    }
    if(m_Huawei_small_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_small_icon")), m_Huawei_small_icon));
    }
    if(m_Large_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("large_icon")), m_Large_icon));
    }
    if(m_Huawei_large_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_large_icon")), m_Huawei_large_icon));
    }
    if(m_Adm_small_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_small_icon")), m_Adm_small_icon));
    }
    if(m_Adm_large_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_large_icon")), m_Adm_large_icon));
    }
    if(m_Chrome_web_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_icon")), m_Chrome_web_icon));
    }
    if(m_Chrome_web_badgeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_badge")), m_Chrome_web_badge));
    }
    if(m_Firefox_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("firefox_icon")), m_Firefox_icon));
    }
    if(m_Chrome_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_icon")), m_Chrome_icon));
    }
    if(m_Ios_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_sound")), m_Ios_sound));
    }
    if(m_Android_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_sound")), m_Android_sound));
    }
    if(m_Huawei_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_sound")), m_Huawei_sound));
    }
    if(m_Adm_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_sound")), m_Adm_sound));
    }
    if(m_Wp_wns_soundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wp_wns_sound")), m_Wp_wns_sound));
    }
    if(m_Android_led_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_led_color")), m_Android_led_color));
    }
    if(m_Huawei_led_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_led_color")), m_Huawei_led_color));
    }
    if(m_Android_accent_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_accent_color")), m_Android_accent_color));
    }
    if(m_Huawei_accent_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_accent_color")), m_Huawei_accent_color));
    }
    if(m_Android_visibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_visibility")), m_Android_visibility));
    }
    if(m_Huawei_visibilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("huawei_visibility")), m_Huawei_visibility));
    }
    if(m_Ios_badgeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_badgeType")), m_Ios_badgeType));
    }
    if(m_Ios_badgeCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ios_badgeCount")), m_Ios_badgeCount));
    }
    if(m_Collapse_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collapse_id")), m_Collapse_id));
    }
    if(m_Web_push_topicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("web_push_topic")), m_Web_push_topic));
    }
    if(m_Apns_alertIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_alert")), m_Apns_alert));
    }
    if(m_Send_afterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("send_after")), m_Send_after));
    }
    if(m_Delayed_optionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delayed_option")), m_Delayed_option));
    }
    if(m_Delivery_time_of_dayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delivery_time_of_day")), m_Delivery_time_of_day));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ttl")), m_Ttl));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_Apns_push_type_overrideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_push_type_override")), m_Apns_push_type_override));
    }
    if(m_Throttle_rate_per_minuteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("throttle_rate_per_minute")), m_Throttle_rate_per_minute));
    }
    if(m_Android_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_group")), m_Android_group));
    }
    if(m_Android_group_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_group_message")), m_Android_group_message));
    }
    if(m_Adm_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_group")), m_Adm_group));
    }
    if(m_Adm_group_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adm_group_message")), m_Adm_group_message));
    }
    if(m_Thread_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread_id")), m_Thread_id));
    }
    if(m_Summary_argIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_arg")), m_Summary_arg));
    }
    if(m_Summary_arg_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("summary_arg_count")), m_Summary_arg_count));
    }
    if(m_Email_subectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_subect")), m_Email_subect));
    }
    if(m_Email_bodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_body")), m_Email_body));
    }
    if(m_Email_from_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_from_name")), m_Email_from_name));
    }
    if(m_Email_from_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_from_address")), m_Email_from_address));
    }
    if(m_Sms_fromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sms_from")), m_Sms_from));
    }
    if(m_Sms_media_urlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sms_media_urls")), m_Sms_media_urls));
    }
}

bool Notification::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("included_segments"))))
    {
        std::vector<utility::string_t> refVal_included_segments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("included_segments"))), refVal_included_segments );
        setIncludedSegments(refVal_included_segments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("excluded_segments"))))
    {
        std::vector<utility::string_t> refVal_excluded_segments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("excluded_segments"))), refVal_excluded_segments );
        setExcludedSegments(refVal_excluded_segments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_session"))))
    {
        utility::string_t refVal_last_session;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_session"))), refVal_last_session );
        setLastSession(refVal_last_session);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("first_session"))))
    {
        utility::string_t refVal_first_session;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("first_session"))), refVal_first_session );
        setFirstSession(refVal_first_session);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_count"))))
    {
        utility::string_t refVal_session_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_count"))), refVal_session_count );
        setSessionCount(refVal_session_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("session_time"))))
    {
        utility::string_t refVal_session_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("session_time"))), refVal_session_time );
        setSessionTime(refVal_session_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_spent"))))
    {
        utility::string_t refVal_amount_spent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_spent"))), refVal_amount_spent );
        setAmountSpent(refVal_amount_spent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bought_sku"))))
    {
        utility::string_t refVal_bought_sku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bought_sku"))), refVal_bought_sku );
        setBoughtSku(refVal_bought_sku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag"))))
    {
        utility::string_t refVal_tag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag"))), refVal_tag );
        setTag(refVal_tag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("language"))))
    {
        utility::string_t refVal_language;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("language"))), refVal_language );
        setLanguage(refVal_language);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_version"))))
    {
        utility::string_t refVal_app_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_version"))), refVal_app_version );
        setAppVersion(refVal_app_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("location"))))
    {
        utility::string_t refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("location"))), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email"))))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email"))), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_country;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_country );
        setCountry(refVal_country);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_player_ids"))))
    {
        std::vector<utility::string_t> refVal_include_player_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_player_ids"))), refVal_include_player_ids );
        setIncludePlayerIds(refVal_include_player_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_external_user_ids"))))
    {
        std::vector<utility::string_t> refVal_include_external_user_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_external_user_ids"))), refVal_include_external_user_ids );
        setIncludeExternalUserIds(refVal_include_external_user_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_email_tokens"))))
    {
        std::vector<utility::string_t> refVal_include_email_tokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_email_tokens"))), refVal_include_email_tokens );
        setIncludeEmailTokens(refVal_include_email_tokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_phone_numbers"))))
    {
        std::vector<utility::string_t> refVal_include_phone_numbers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_phone_numbers"))), refVal_include_phone_numbers );
        setIncludePhoneNumbers(refVal_include_phone_numbers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_ios_tokens"))))
    {
        std::vector<utility::string_t> refVal_include_ios_tokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_ios_tokens"))), refVal_include_ios_tokens );
        setIncludeIosTokens(refVal_include_ios_tokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_wp_wns_uris"))))
    {
        std::vector<utility::string_t> refVal_include_wp_wns_uris;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_wp_wns_uris"))), refVal_include_wp_wns_uris );
        setIncludeWpWnsUris(refVal_include_wp_wns_uris);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_amazon_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_amazon_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_amazon_reg_ids"))), refVal_include_amazon_reg_ids );
        setIncludeAmazonRegIds(refVal_include_amazon_reg_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_chrome_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_chrome_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_chrome_reg_ids"))), refVal_include_chrome_reg_ids );
        setIncludeChromeRegIds(refVal_include_chrome_reg_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_chrome_web_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_chrome_web_reg_ids"))), refVal_include_chrome_web_reg_ids );
        setIncludeChromeWebRegIds(refVal_include_chrome_web_reg_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("include_android_reg_ids"))))
    {
        std::vector<utility::string_t> refVal_include_android_reg_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("include_android_reg_ids"))), refVal_include_android_reg_ids );
        setIncludeAndroidRegIds(refVal_include_android_reg_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        int32_t refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_value );
        setValue(refVal_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aggregation"))))
    {
        utility::string_t refVal_aggregation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aggregation"))), refVal_aggregation );
        setAggregation(refVal_aggregation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isIos"))))
    {
        bool refVal_isIos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isIos"))), refVal_isIos );
        setIsIos(refVal_isIos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isAndroid"))))
    {
        bool refVal_isAndroid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isAndroid"))), refVal_isAndroid );
        setIsAndroid(refVal_isAndroid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isHuawei"))))
    {
        bool refVal_isHuawei;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isHuawei"))), refVal_isHuawei );
        setIsHuawei(refVal_isHuawei);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isAnyWeb"))))
    {
        bool refVal_isAnyWeb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isAnyWeb"))), refVal_isAnyWeb );
        setIsAnyWeb(refVal_isAnyWeb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isChromeWeb"))))
    {
        bool refVal_isChromeWeb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isChromeWeb"))), refVal_isChromeWeb );
        setIsChromeWeb(refVal_isChromeWeb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isFirefox"))))
    {
        bool refVal_isFirefox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isFirefox"))), refVal_isFirefox );
        setIsFirefox(refVal_isFirefox);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isSafari"))))
    {
        bool refVal_isSafari;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isSafari"))), refVal_isSafari );
        setIsSafari(refVal_isSafari);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isWP_WNS"))))
    {
        bool refVal_isWP_WNS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isWP_WNS"))), refVal_isWP_WNS );
        setIsWPWNS(refVal_isWP_WNS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isAdm"))))
    {
        bool refVal_isAdm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isAdm"))), refVal_isAdm );
        setIsAdm(refVal_isAdm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isChrome"))))
    {
        bool refVal_isChrome;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isChrome"))), refVal_isChrome );
        setIsChrome(refVal_isChrome);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("channel_for_external_user_ids"))))
    {
        utility::string_t refVal_channel_for_external_user_ids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("channel_for_external_user_ids"))), refVal_channel_for_external_user_ids );
        setChannelForExternalUserIds(refVal_channel_for_external_user_ids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_id"))))
    {
        utility::string_t refVal_app_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_id"))), refVal_app_id );
        setAppId(refVal_app_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_id"))))
    {
        utility::string_t refVal_external_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_id"))), refVal_external_id );
        setExternalId(refVal_external_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contents"))))
    {
        std::shared_ptr<StringMap> refVal_contents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contents"))), refVal_contents );
        setContents(refVal_contents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("headings"))))
    {
        std::shared_ptr<StringMap> refVal_headings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("headings"))), refVal_headings );
        setHeadings(refVal_headings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subtitle"))))
    {
        std::shared_ptr<StringMap> refVal_subtitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subtitle"))), refVal_subtitle );
        setSubtitle(refVal_subtitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        std::shared_ptr<Object> refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_data );
        setData(refVal_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_msg_type"))))
    {
        utility::string_t refVal_huawei_msg_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_msg_type"))), refVal_huawei_msg_type );
        setHuaweiMsgType(refVal_huawei_msg_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_url );
        setUrl(refVal_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("web_url"))))
    {
        utility::string_t refVal_web_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("web_url"))), refVal_web_url );
        setWebUrl(refVal_web_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_url"))))
    {
        utility::string_t refVal_app_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_url"))), refVal_app_url );
        setAppUrl(refVal_app_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_attachments"))))
    {
        std::shared_ptr<Object> refVal_ios_attachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_attachments"))), refVal_ios_attachments );
        setIosAttachments(refVal_ios_attachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template_id"))))
    {
        utility::string_t refVal_template_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template_id"))), refVal_template_id );
        setTemplateId(refVal_template_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content_available"))))
    {
        bool refVal_content_available;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content_available"))), refVal_content_available );
        setContentAvailable(refVal_content_available);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mutable_content"))))
    {
        bool refVal_mutable_content;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mutable_content"))), refVal_mutable_content );
        setMutableContent(refVal_mutable_content);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("target_content_identifier"))))
    {
        utility::string_t refVal_target_content_identifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("target_content_identifier"))), refVal_target_content_identifier );
        setTargetContentIdentifier(refVal_target_content_identifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("big_picture"))))
    {
        utility::string_t refVal_big_picture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("big_picture"))), refVal_big_picture );
        setBigPicture(refVal_big_picture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_big_picture"))))
    {
        utility::string_t refVal_huawei_big_picture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_big_picture"))), refVal_huawei_big_picture );
        setHuaweiBigPicture(refVal_huawei_big_picture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_big_picture"))))
    {
        utility::string_t refVal_adm_big_picture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_big_picture"))), refVal_adm_big_picture );
        setAdmBigPicture(refVal_adm_big_picture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_big_picture"))))
    {
        utility::string_t refVal_chrome_big_picture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_big_picture"))), refVal_chrome_big_picture );
        setChromeBigPicture(refVal_chrome_big_picture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_image"))))
    {
        utility::string_t refVal_chrome_web_image;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_image"))), refVal_chrome_web_image );
        setChromeWebImage(refVal_chrome_web_image);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buttons"))))
    {
        std::vector<std::shared_ptr<Button>> refVal_buttons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buttons"))), refVal_buttons );
        setButtons(refVal_buttons);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("web_buttons"))))
    {
        std::vector<std::shared_ptr<Button>> refVal_web_buttons;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("web_buttons"))), refVal_web_buttons );
        setWebButtons(refVal_web_buttons);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_category"))))
    {
        utility::string_t refVal_ios_category;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_category"))), refVal_ios_category );
        setIosCategory(refVal_ios_category);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_channel_id"))))
    {
        utility::string_t refVal_android_channel_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_channel_id"))), refVal_android_channel_id );
        setAndroidChannelId(refVal_android_channel_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_channel_id"))))
    {
        utility::string_t refVal_huawei_channel_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_channel_id"))), refVal_huawei_channel_id );
        setHuaweiChannelId(refVal_huawei_channel_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("existing_android_channel_id"))))
    {
        utility::string_t refVal_existing_android_channel_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("existing_android_channel_id"))), refVal_existing_android_channel_id );
        setExistingAndroidChannelId(refVal_existing_android_channel_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_existing_channel_id"))))
    {
        utility::string_t refVal_huawei_existing_channel_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_existing_channel_id"))), refVal_huawei_existing_channel_id );
        setHuaweiExistingChannelId(refVal_huawei_existing_channel_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_background_layout"))))
    {
        std::shared_ptr<Notification_allOf_android_background_layout> refVal_android_background_layout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_background_layout"))), refVal_android_background_layout );
        setAndroidBackgroundLayout(refVal_android_background_layout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("small_icon"))))
    {
        utility::string_t refVal_small_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("small_icon"))), refVal_small_icon );
        setSmallIcon(refVal_small_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_small_icon"))))
    {
        utility::string_t refVal_huawei_small_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_small_icon"))), refVal_huawei_small_icon );
        setHuaweiSmallIcon(refVal_huawei_small_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("large_icon"))))
    {
        utility::string_t refVal_large_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("large_icon"))), refVal_large_icon );
        setLargeIcon(refVal_large_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_large_icon"))))
    {
        utility::string_t refVal_huawei_large_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_large_icon"))), refVal_huawei_large_icon );
        setHuaweiLargeIcon(refVal_huawei_large_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_small_icon"))))
    {
        utility::string_t refVal_adm_small_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_small_icon"))), refVal_adm_small_icon );
        setAdmSmallIcon(refVal_adm_small_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_large_icon"))))
    {
        utility::string_t refVal_adm_large_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_large_icon"))), refVal_adm_large_icon );
        setAdmLargeIcon(refVal_adm_large_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_icon"))))
    {
        utility::string_t refVal_chrome_web_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_icon"))), refVal_chrome_web_icon );
        setChromeWebIcon(refVal_chrome_web_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_badge"))))
    {
        utility::string_t refVal_chrome_web_badge;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_badge"))), refVal_chrome_web_badge );
        setChromeWebBadge(refVal_chrome_web_badge);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("firefox_icon"))))
    {
        utility::string_t refVal_firefox_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("firefox_icon"))), refVal_firefox_icon );
        setFirefoxIcon(refVal_firefox_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_icon"))))
    {
        utility::string_t refVal_chrome_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_icon"))), refVal_chrome_icon );
        setChromeIcon(refVal_chrome_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_sound"))))
    {
        utility::string_t refVal_ios_sound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_sound"))), refVal_ios_sound );
        setIosSound(refVal_ios_sound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_sound"))))
    {
        utility::string_t refVal_android_sound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_sound"))), refVal_android_sound );
        setAndroidSound(refVal_android_sound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_sound"))))
    {
        utility::string_t refVal_huawei_sound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_sound"))), refVal_huawei_sound );
        setHuaweiSound(refVal_huawei_sound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_sound"))))
    {
        utility::string_t refVal_adm_sound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_sound"))), refVal_adm_sound );
        setAdmSound(refVal_adm_sound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wp_wns_sound"))))
    {
        utility::string_t refVal_wp_wns_sound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wp_wns_sound"))), refVal_wp_wns_sound );
        setWpWnsSound(refVal_wp_wns_sound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_led_color"))))
    {
        utility::string_t refVal_android_led_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_led_color"))), refVal_android_led_color );
        setAndroidLedColor(refVal_android_led_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_led_color"))))
    {
        utility::string_t refVal_huawei_led_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_led_color"))), refVal_huawei_led_color );
        setHuaweiLedColor(refVal_huawei_led_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_accent_color"))))
    {
        utility::string_t refVal_android_accent_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_accent_color"))), refVal_android_accent_color );
        setAndroidAccentColor(refVal_android_accent_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_accent_color"))))
    {
        utility::string_t refVal_huawei_accent_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_accent_color"))), refVal_huawei_accent_color );
        setHuaweiAccentColor(refVal_huawei_accent_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_visibility"))))
    {
        int32_t refVal_android_visibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_visibility"))), refVal_android_visibility );
        setAndroidVisibility(refVal_android_visibility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("huawei_visibility"))))
    {
        int32_t refVal_huawei_visibility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("huawei_visibility"))), refVal_huawei_visibility );
        setHuaweiVisibility(refVal_huawei_visibility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_badgeType"))))
    {
        utility::string_t refVal_ios_badgeType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_badgeType"))), refVal_ios_badgeType );
        setIosBadgeType(refVal_ios_badgeType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ios_badgeCount"))))
    {
        int32_t refVal_ios_badgeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ios_badgeCount"))), refVal_ios_badgeCount );
        setIosBadgeCount(refVal_ios_badgeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collapse_id"))))
    {
        utility::string_t refVal_collapse_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collapse_id"))), refVal_collapse_id );
        setCollapseId(refVal_collapse_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("web_push_topic"))))
    {
        utility::string_t refVal_web_push_topic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("web_push_topic"))), refVal_web_push_topic );
        setWebPushTopic(refVal_web_push_topic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_alert"))))
    {
        std::shared_ptr<Object> refVal_apns_alert;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_alert"))), refVal_apns_alert );
        setApnsAlert(refVal_apns_alert);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("send_after"))))
    {
        utility::string_t refVal_send_after;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("send_after"))), refVal_send_after );
        setSendAfter(refVal_send_after);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delayed_option"))))
    {
        utility::string_t refVal_delayed_option;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delayed_option"))), refVal_delayed_option );
        setDelayedOption(refVal_delayed_option);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delivery_time_of_day"))))
    {
        utility::string_t refVal_delivery_time_of_day;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delivery_time_of_day"))), refVal_delivery_time_of_day );
        setDeliveryTimeOfDay(refVal_delivery_time_of_day);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ttl"))))
    {
        int32_t refVal_ttl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ttl"))), refVal_ttl );
        setTtl(refVal_ttl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        int32_t refVal_priority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_priority );
        setPriority(refVal_priority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_push_type_override"))))
    {
        utility::string_t refVal_apns_push_type_override;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_push_type_override"))), refVal_apns_push_type_override );
        setApnsPushTypeOverride(refVal_apns_push_type_override);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("throttle_rate_per_minute"))))
    {
        utility::string_t refVal_throttle_rate_per_minute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("throttle_rate_per_minute"))), refVal_throttle_rate_per_minute );
        setThrottleRatePerMinute(refVal_throttle_rate_per_minute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_group"))))
    {
        utility::string_t refVal_android_group;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_group"))), refVal_android_group );
        setAndroidGroup(refVal_android_group);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_group_message"))))
    {
        utility::string_t refVal_android_group_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_group_message"))), refVal_android_group_message );
        setAndroidGroupMessage(refVal_android_group_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_group"))))
    {
        utility::string_t refVal_adm_group;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_group"))), refVal_adm_group );
        setAdmGroup(refVal_adm_group);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adm_group_message"))))
    {
        std::shared_ptr<Object> refVal_adm_group_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adm_group_message"))), refVal_adm_group_message );
        setAdmGroupMessage(refVal_adm_group_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread_id"))))
    {
        utility::string_t refVal_thread_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread_id"))), refVal_thread_id );
        setThreadId(refVal_thread_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_arg"))))
    {
        utility::string_t refVal_summary_arg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_arg"))), refVal_summary_arg );
        setSummaryArg(refVal_summary_arg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("summary_arg_count"))))
    {
        int32_t refVal_summary_arg_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("summary_arg_count"))), refVal_summary_arg_count );
        setSummaryArgCount(refVal_summary_arg_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_subect"))))
    {
        utility::string_t refVal_email_subect;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_subect"))), refVal_email_subect );
        setEmailSubect(refVal_email_subect);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_body"))))
    {
        utility::string_t refVal_email_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_body"))), refVal_email_body );
        setEmailBody(refVal_email_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_from_name"))))
    {
        utility::string_t refVal_email_from_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_from_name"))), refVal_email_from_name );
        setEmailFromName(refVal_email_from_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_from_address"))))
    {
        utility::string_t refVal_email_from_address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_from_address"))), refVal_email_from_address );
        setEmailFromAddress(refVal_email_from_address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sms_from"))))
    {
        utility::string_t refVal_sms_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sms_from"))), refVal_sms_from );
        setSmsFrom(refVal_sms_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sms_media_urls"))))
    {
        std::vector<utility::string_t> refVal_sms_media_urls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sms_media_urls"))), refVal_sms_media_urls );
        setSmsMediaUrls(refVal_sms_media_urls);
    }
    return ok;
}

std::vector<utility::string_t>& Notification::getIncludedSegments()
{
    return m_Included_segments;
}

void Notification::setIncludedSegments(const std::vector<utility::string_t>& value)
{
    m_Included_segments = value;
    m_Included_segmentsIsSet = true;
}

bool Notification::includedSegmentsIsSet() const
{
    return m_Included_segmentsIsSet;
}

void Notification::unsetIncluded_segments()
{
    m_Included_segmentsIsSet = false;
}
std::vector<utility::string_t>& Notification::getExcludedSegments()
{
    return m_Excluded_segments;
}

void Notification::setExcludedSegments(const std::vector<utility::string_t>& value)
{
    m_Excluded_segments = value;
    m_Excluded_segmentsIsSet = true;
}

bool Notification::excludedSegmentsIsSet() const
{
    return m_Excluded_segmentsIsSet;
}

void Notification::unsetExcluded_segments()
{
    m_Excluded_segmentsIsSet = false;
}
utility::string_t Notification::getLastSession() const
{
    return m_Last_session;
}

void Notification::setLastSession(const utility::string_t& value)
{
    m_Last_session = value;
    m_Last_sessionIsSet = true;
}

bool Notification::lastSessionIsSet() const
{
    return m_Last_sessionIsSet;
}

void Notification::unsetLast_session()
{
    m_Last_sessionIsSet = false;
}
utility::string_t Notification::getFirstSession() const
{
    return m_First_session;
}

void Notification::setFirstSession(const utility::string_t& value)
{
    m_First_session = value;
    m_First_sessionIsSet = true;
}

bool Notification::firstSessionIsSet() const
{
    return m_First_sessionIsSet;
}

void Notification::unsetFirst_session()
{
    m_First_sessionIsSet = false;
}
utility::string_t Notification::getSessionCount() const
{
    return m_Session_count;
}

void Notification::setSessionCount(const utility::string_t& value)
{
    m_Session_count = value;
    m_Session_countIsSet = true;
}

bool Notification::sessionCountIsSet() const
{
    return m_Session_countIsSet;
}

void Notification::unsetSession_count()
{
    m_Session_countIsSet = false;
}
utility::string_t Notification::getSessionTime() const
{
    return m_Session_time;
}

void Notification::setSessionTime(const utility::string_t& value)
{
    m_Session_time = value;
    m_Session_timeIsSet = true;
}

bool Notification::sessionTimeIsSet() const
{
    return m_Session_timeIsSet;
}

void Notification::unsetSession_time()
{
    m_Session_timeIsSet = false;
}
utility::string_t Notification::getAmountSpent() const
{
    return m_Amount_spent;
}

void Notification::setAmountSpent(const utility::string_t& value)
{
    m_Amount_spent = value;
    m_Amount_spentIsSet = true;
}

bool Notification::amountSpentIsSet() const
{
    return m_Amount_spentIsSet;
}

void Notification::unsetAmount_spent()
{
    m_Amount_spentIsSet = false;
}
utility::string_t Notification::getBoughtSku() const
{
    return m_Bought_sku;
}

void Notification::setBoughtSku(const utility::string_t& value)
{
    m_Bought_sku = value;
    m_Bought_skuIsSet = true;
}

bool Notification::boughtSkuIsSet() const
{
    return m_Bought_skuIsSet;
}

void Notification::unsetBought_sku()
{
    m_Bought_skuIsSet = false;
}
utility::string_t Notification::getTag() const
{
    return m_Tag;
}

void Notification::setTag(const utility::string_t& value)
{
    m_Tag = value;
    m_TagIsSet = true;
}

bool Notification::tagIsSet() const
{
    return m_TagIsSet;
}

void Notification::unsetTag()
{
    m_TagIsSet = false;
}
utility::string_t Notification::getLanguage() const
{
    return m_Language;
}

void Notification::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool Notification::languageIsSet() const
{
    return m_LanguageIsSet;
}

void Notification::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t Notification::getAppVersion() const
{
    return m_App_version;
}

void Notification::setAppVersion(const utility::string_t& value)
{
    m_App_version = value;
    m_App_versionIsSet = true;
}

bool Notification::appVersionIsSet() const
{
    return m_App_versionIsSet;
}

void Notification::unsetApp_version()
{
    m_App_versionIsSet = false;
}
utility::string_t Notification::getLocation() const
{
    return m_Location;
}

void Notification::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool Notification::locationIsSet() const
{
    return m_LocationIsSet;
}

void Notification::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t Notification::getEmail() const
{
    return m_Email;
}

void Notification::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool Notification::emailIsSet() const
{
    return m_EmailIsSet;
}

void Notification::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t Notification::getCountry() const
{
    return m_Country;
}

void Notification::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool Notification::countryIsSet() const
{
    return m_CountryIsSet;
}

void Notification::unsetCountry()
{
    m_CountryIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludePlayerIds()
{
    return m_Include_player_ids;
}

void Notification::setIncludePlayerIds(const std::vector<utility::string_t>& value)
{
    m_Include_player_ids = value;
    m_Include_player_idsIsSet = true;
}

bool Notification::includePlayerIdsIsSet() const
{
    return m_Include_player_idsIsSet;
}

void Notification::unsetInclude_player_ids()
{
    m_Include_player_idsIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeExternalUserIds()
{
    return m_Include_external_user_ids;
}

void Notification::setIncludeExternalUserIds(const std::vector<utility::string_t>& value)
{
    m_Include_external_user_ids = value;
    m_Include_external_user_idsIsSet = true;
}

bool Notification::includeExternalUserIdsIsSet() const
{
    return m_Include_external_user_idsIsSet;
}

void Notification::unsetInclude_external_user_ids()
{
    m_Include_external_user_idsIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeEmailTokens()
{
    return m_Include_email_tokens;
}

void Notification::setIncludeEmailTokens(const std::vector<utility::string_t>& value)
{
    m_Include_email_tokens = value;
    m_Include_email_tokensIsSet = true;
}

bool Notification::includeEmailTokensIsSet() const
{
    return m_Include_email_tokensIsSet;
}

void Notification::unsetInclude_email_tokens()
{
    m_Include_email_tokensIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludePhoneNumbers()
{
    return m_Include_phone_numbers;
}

void Notification::setIncludePhoneNumbers(const std::vector<utility::string_t>& value)
{
    m_Include_phone_numbers = value;
    m_Include_phone_numbersIsSet = true;
}

bool Notification::includePhoneNumbersIsSet() const
{
    return m_Include_phone_numbersIsSet;
}

void Notification::unsetInclude_phone_numbers()
{
    m_Include_phone_numbersIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeIosTokens()
{
    return m_Include_ios_tokens;
}

void Notification::setIncludeIosTokens(const std::vector<utility::string_t>& value)
{
    m_Include_ios_tokens = value;
    m_Include_ios_tokensIsSet = true;
}

bool Notification::includeIosTokensIsSet() const
{
    return m_Include_ios_tokensIsSet;
}

void Notification::unsetInclude_ios_tokens()
{
    m_Include_ios_tokensIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeWpWnsUris()
{
    return m_Include_wp_wns_uris;
}

void Notification::setIncludeWpWnsUris(const std::vector<utility::string_t>& value)
{
    m_Include_wp_wns_uris = value;
    m_Include_wp_wns_urisIsSet = true;
}

bool Notification::includeWpWnsUrisIsSet() const
{
    return m_Include_wp_wns_urisIsSet;
}

void Notification::unsetInclude_wp_wns_uris()
{
    m_Include_wp_wns_urisIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeAmazonRegIds()
{
    return m_Include_amazon_reg_ids;
}

void Notification::setIncludeAmazonRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_amazon_reg_ids = value;
    m_Include_amazon_reg_idsIsSet = true;
}

bool Notification::includeAmazonRegIdsIsSet() const
{
    return m_Include_amazon_reg_idsIsSet;
}

void Notification::unsetInclude_amazon_reg_ids()
{
    m_Include_amazon_reg_idsIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeChromeRegIds()
{
    return m_Include_chrome_reg_ids;
}

void Notification::setIncludeChromeRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_chrome_reg_ids = value;
    m_Include_chrome_reg_idsIsSet = true;
}

bool Notification::includeChromeRegIdsIsSet() const
{
    return m_Include_chrome_reg_idsIsSet;
}

void Notification::unsetInclude_chrome_reg_ids()
{
    m_Include_chrome_reg_idsIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeChromeWebRegIds()
{
    return m_Include_chrome_web_reg_ids;
}

void Notification::setIncludeChromeWebRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_chrome_web_reg_ids = value;
    m_Include_chrome_web_reg_idsIsSet = true;
}

bool Notification::includeChromeWebRegIdsIsSet() const
{
    return m_Include_chrome_web_reg_idsIsSet;
}

void Notification::unsetInclude_chrome_web_reg_ids()
{
    m_Include_chrome_web_reg_idsIsSet = false;
}
std::vector<utility::string_t>& Notification::getIncludeAndroidRegIds()
{
    return m_Include_android_reg_ids;
}

void Notification::setIncludeAndroidRegIds(const std::vector<utility::string_t>& value)
{
    m_Include_android_reg_ids = value;
    m_Include_android_reg_idsIsSet = true;
}

bool Notification::includeAndroidRegIdsIsSet() const
{
    return m_Include_android_reg_idsIsSet;
}

void Notification::unsetInclude_android_reg_ids()
{
    m_Include_android_reg_idsIsSet = false;
}
utility::string_t Notification::getId() const
{
    return m_Id;
}

void Notification::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Notification::idIsSet() const
{
    return m_IdIsSet;
}

void Notification::unsetId()
{
    m_IdIsSet = false;
}
int32_t Notification::getValue() const
{
    return m_Value;
}

void Notification::setValue(int32_t value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool Notification::valueIsSet() const
{
    return m_ValueIsSet;
}

void Notification::unsetValue()
{
    m_ValueIsSet = false;
}
utility::string_t Notification::getAggregation() const
{
    return m_Aggregation;
}

void Notification::setAggregation(const utility::string_t& value)
{
    m_Aggregation = value;
    m_AggregationIsSet = true;
}

bool Notification::aggregationIsSet() const
{
    return m_AggregationIsSet;
}

void Notification::unsetAggregation()
{
    m_AggregationIsSet = false;
}
bool Notification::isIsIos() const
{
    return m_IsIos;
}

void Notification::setIsIos(bool value)
{
    m_IsIos = value;
    m_IsIosIsSet = true;
}

bool Notification::isIosIsSet() const
{
    return m_IsIosIsSet;
}

void Notification::unsetIsIos()
{
    m_IsIosIsSet = false;
}
bool Notification::isIsAndroid() const
{
    return m_IsAndroid;
}

void Notification::setIsAndroid(bool value)
{
    m_IsAndroid = value;
    m_IsAndroidIsSet = true;
}

bool Notification::isAndroidIsSet() const
{
    return m_IsAndroidIsSet;
}

void Notification::unsetIsAndroid()
{
    m_IsAndroidIsSet = false;
}
bool Notification::isIsHuawei() const
{
    return m_IsHuawei;
}

void Notification::setIsHuawei(bool value)
{
    m_IsHuawei = value;
    m_IsHuaweiIsSet = true;
}

bool Notification::isHuaweiIsSet() const
{
    return m_IsHuaweiIsSet;
}

void Notification::unsetIsHuawei()
{
    m_IsHuaweiIsSet = false;
}
bool Notification::isIsAnyWeb() const
{
    return m_IsAnyWeb;
}

void Notification::setIsAnyWeb(bool value)
{
    m_IsAnyWeb = value;
    m_IsAnyWebIsSet = true;
}

bool Notification::isAnyWebIsSet() const
{
    return m_IsAnyWebIsSet;
}

void Notification::unsetIsAnyWeb()
{
    m_IsAnyWebIsSet = false;
}
bool Notification::isIsChromeWeb() const
{
    return m_IsChromeWeb;
}

void Notification::setIsChromeWeb(bool value)
{
    m_IsChromeWeb = value;
    m_IsChromeWebIsSet = true;
}

bool Notification::isChromeWebIsSet() const
{
    return m_IsChromeWebIsSet;
}

void Notification::unsetIsChromeWeb()
{
    m_IsChromeWebIsSet = false;
}
bool Notification::isIsFirefox() const
{
    return m_IsFirefox;
}

void Notification::setIsFirefox(bool value)
{
    m_IsFirefox = value;
    m_IsFirefoxIsSet = true;
}

bool Notification::isFirefoxIsSet() const
{
    return m_IsFirefoxIsSet;
}

void Notification::unsetIsFirefox()
{
    m_IsFirefoxIsSet = false;
}
bool Notification::isIsSafari() const
{
    return m_IsSafari;
}

void Notification::setIsSafari(bool value)
{
    m_IsSafari = value;
    m_IsSafariIsSet = true;
}

bool Notification::isSafariIsSet() const
{
    return m_IsSafariIsSet;
}

void Notification::unsetIsSafari()
{
    m_IsSafariIsSet = false;
}
bool Notification::isIsWPWNS() const
{
    return m_IsWP_WNS;
}

void Notification::setIsWPWNS(bool value)
{
    m_IsWP_WNS = value;
    m_IsWP_WNSIsSet = true;
}

bool Notification::isWPWNSIsSet() const
{
    return m_IsWP_WNSIsSet;
}

void Notification::unsetIsWP_WNS()
{
    m_IsWP_WNSIsSet = false;
}
bool Notification::isIsAdm() const
{
    return m_IsAdm;
}

void Notification::setIsAdm(bool value)
{
    m_IsAdm = value;
    m_IsAdmIsSet = true;
}

bool Notification::isAdmIsSet() const
{
    return m_IsAdmIsSet;
}

void Notification::unsetIsAdm()
{
    m_IsAdmIsSet = false;
}
bool Notification::isIsChrome() const
{
    return m_IsChrome;
}

void Notification::setIsChrome(bool value)
{
    m_IsChrome = value;
    m_IsChromeIsSet = true;
}

bool Notification::isChromeIsSet() const
{
    return m_IsChromeIsSet;
}

void Notification::unsetIsChrome()
{
    m_IsChromeIsSet = false;
}
utility::string_t Notification::getChannelForExternalUserIds() const
{
    return m_Channel_for_external_user_ids;
}

void Notification::setChannelForExternalUserIds(const utility::string_t& value)
{
    m_Channel_for_external_user_ids = value;
    m_Channel_for_external_user_idsIsSet = true;
}

bool Notification::channelForExternalUserIdsIsSet() const
{
    return m_Channel_for_external_user_idsIsSet;
}

void Notification::unsetChannel_for_external_user_ids()
{
    m_Channel_for_external_user_idsIsSet = false;
}
utility::string_t Notification::getAppId() const
{
    return m_App_id;
}

void Notification::setAppId(const utility::string_t& value)
{
    m_App_id = value;
    m_App_idIsSet = true;
}

bool Notification::appIdIsSet() const
{
    return m_App_idIsSet;
}

void Notification::unsetApp_id()
{
    m_App_idIsSet = false;
}
utility::string_t Notification::getExternalId() const
{
    return m_External_id;
}

void Notification::setExternalId(const utility::string_t& value)
{
    m_External_id = value;
    m_External_idIsSet = true;
}

bool Notification::externalIdIsSet() const
{
    return m_External_idIsSet;
}

void Notification::unsetExternal_id()
{
    m_External_idIsSet = false;
}
std::shared_ptr<StringMap> Notification::getContents() const
{
    return m_Contents;
}

void Notification::setContents(const std::shared_ptr<StringMap>& value)
{
    m_Contents = value;
    m_ContentsIsSet = true;
}

bool Notification::contentsIsSet() const
{
    return m_ContentsIsSet;
}

void Notification::unsetContents()
{
    m_ContentsIsSet = false;
}
std::shared_ptr<StringMap> Notification::getHeadings() const
{
    return m_Headings;
}

void Notification::setHeadings(const std::shared_ptr<StringMap>& value)
{
    m_Headings = value;
    m_HeadingsIsSet = true;
}

bool Notification::headingsIsSet() const
{
    return m_HeadingsIsSet;
}

void Notification::unsetHeadings()
{
    m_HeadingsIsSet = false;
}
std::shared_ptr<StringMap> Notification::getSubtitle() const
{
    return m_Subtitle;
}

void Notification::setSubtitle(const std::shared_ptr<StringMap>& value)
{
    m_Subtitle = value;
    m_SubtitleIsSet = true;
}

bool Notification::subtitleIsSet() const
{
    return m_SubtitleIsSet;
}

void Notification::unsetSubtitle()
{
    m_SubtitleIsSet = false;
}
std::shared_ptr<Object> Notification::getData() const
{
    return m_Data;
}

void Notification::setData(const std::shared_ptr<Object>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool Notification::dataIsSet() const
{
    return m_DataIsSet;
}

void Notification::unsetData()
{
    m_DataIsSet = false;
}
utility::string_t Notification::getHuaweiMsgType() const
{
    return m_Huawei_msg_type;
}

void Notification::setHuaweiMsgType(const utility::string_t& value)
{
    m_Huawei_msg_type = value;
    m_Huawei_msg_typeIsSet = true;
}

bool Notification::huaweiMsgTypeIsSet() const
{
    return m_Huawei_msg_typeIsSet;
}

void Notification::unsetHuawei_msg_type()
{
    m_Huawei_msg_typeIsSet = false;
}
utility::string_t Notification::getUrl() const
{
    return m_Url;
}

void Notification::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool Notification::urlIsSet() const
{
    return m_UrlIsSet;
}

void Notification::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t Notification::getWebUrl() const
{
    return m_Web_url;
}

void Notification::setWebUrl(const utility::string_t& value)
{
    m_Web_url = value;
    m_Web_urlIsSet = true;
}

bool Notification::webUrlIsSet() const
{
    return m_Web_urlIsSet;
}

void Notification::unsetWeb_url()
{
    m_Web_urlIsSet = false;
}
utility::string_t Notification::getAppUrl() const
{
    return m_App_url;
}

void Notification::setAppUrl(const utility::string_t& value)
{
    m_App_url = value;
    m_App_urlIsSet = true;
}

bool Notification::appUrlIsSet() const
{
    return m_App_urlIsSet;
}

void Notification::unsetApp_url()
{
    m_App_urlIsSet = false;
}
std::shared_ptr<Object> Notification::getIosAttachments() const
{
    return m_Ios_attachments;
}

void Notification::setIosAttachments(const std::shared_ptr<Object>& value)
{
    m_Ios_attachments = value;
    m_Ios_attachmentsIsSet = true;
}

bool Notification::iosAttachmentsIsSet() const
{
    return m_Ios_attachmentsIsSet;
}

void Notification::unsetIos_attachments()
{
    m_Ios_attachmentsIsSet = false;
}
utility::string_t Notification::getTemplateId() const
{
    return m_Template_id;
}

void Notification::setTemplateId(const utility::string_t& value)
{
    m_Template_id = value;
    m_Template_idIsSet = true;
}

bool Notification::templateIdIsSet() const
{
    return m_Template_idIsSet;
}

void Notification::unsetTemplate_id()
{
    m_Template_idIsSet = false;
}
bool Notification::isContentAvailable() const
{
    return m_Content_available;
}

void Notification::setContentAvailable(bool value)
{
    m_Content_available = value;
    m_Content_availableIsSet = true;
}

bool Notification::contentAvailableIsSet() const
{
    return m_Content_availableIsSet;
}

void Notification::unsetContent_available()
{
    m_Content_availableIsSet = false;
}
bool Notification::isMutableContent() const
{
    return m_Mutable_content;
}

void Notification::setMutableContent(bool value)
{
    m_Mutable_content = value;
    m_Mutable_contentIsSet = true;
}

bool Notification::mutableContentIsSet() const
{
    return m_Mutable_contentIsSet;
}

void Notification::unsetMutable_content()
{
    m_Mutable_contentIsSet = false;
}
utility::string_t Notification::getTargetContentIdentifier() const
{
    return m_Target_content_identifier;
}

void Notification::setTargetContentIdentifier(const utility::string_t& value)
{
    m_Target_content_identifier = value;
    m_Target_content_identifierIsSet = true;
}

bool Notification::targetContentIdentifierIsSet() const
{
    return m_Target_content_identifierIsSet;
}

void Notification::unsetTarget_content_identifier()
{
    m_Target_content_identifierIsSet = false;
}
utility::string_t Notification::getBigPicture() const
{
    return m_Big_picture;
}

void Notification::setBigPicture(const utility::string_t& value)
{
    m_Big_picture = value;
    m_Big_pictureIsSet = true;
}

bool Notification::bigPictureIsSet() const
{
    return m_Big_pictureIsSet;
}

void Notification::unsetBig_picture()
{
    m_Big_pictureIsSet = false;
}
utility::string_t Notification::getHuaweiBigPicture() const
{
    return m_Huawei_big_picture;
}

void Notification::setHuaweiBigPicture(const utility::string_t& value)
{
    m_Huawei_big_picture = value;
    m_Huawei_big_pictureIsSet = true;
}

bool Notification::huaweiBigPictureIsSet() const
{
    return m_Huawei_big_pictureIsSet;
}

void Notification::unsetHuawei_big_picture()
{
    m_Huawei_big_pictureIsSet = false;
}
utility::string_t Notification::getAdmBigPicture() const
{
    return m_Adm_big_picture;
}

void Notification::setAdmBigPicture(const utility::string_t& value)
{
    m_Adm_big_picture = value;
    m_Adm_big_pictureIsSet = true;
}

bool Notification::admBigPictureIsSet() const
{
    return m_Adm_big_pictureIsSet;
}

void Notification::unsetAdm_big_picture()
{
    m_Adm_big_pictureIsSet = false;
}
utility::string_t Notification::getChromeBigPicture() const
{
    return m_Chrome_big_picture;
}

void Notification::setChromeBigPicture(const utility::string_t& value)
{
    m_Chrome_big_picture = value;
    m_Chrome_big_pictureIsSet = true;
}

bool Notification::chromeBigPictureIsSet() const
{
    return m_Chrome_big_pictureIsSet;
}

void Notification::unsetChrome_big_picture()
{
    m_Chrome_big_pictureIsSet = false;
}
utility::string_t Notification::getChromeWebImage() const
{
    return m_Chrome_web_image;
}

void Notification::setChromeWebImage(const utility::string_t& value)
{
    m_Chrome_web_image = value;
    m_Chrome_web_imageIsSet = true;
}

bool Notification::chromeWebImageIsSet() const
{
    return m_Chrome_web_imageIsSet;
}

void Notification::unsetChrome_web_image()
{
    m_Chrome_web_imageIsSet = false;
}
std::vector<std::shared_ptr<Button>>& Notification::getButtons()
{
    return m_Buttons;
}

void Notification::setButtons(const std::vector<std::shared_ptr<Button>>& value)
{
    m_Buttons = value;
    m_ButtonsIsSet = true;
}

bool Notification::buttonsIsSet() const
{
    return m_ButtonsIsSet;
}

void Notification::unsetButtons()
{
    m_ButtonsIsSet = false;
}
std::vector<std::shared_ptr<Button>>& Notification::getWebButtons()
{
    return m_Web_buttons;
}

void Notification::setWebButtons(const std::vector<std::shared_ptr<Button>>& value)
{
    m_Web_buttons = value;
    m_Web_buttonsIsSet = true;
}

bool Notification::webButtonsIsSet() const
{
    return m_Web_buttonsIsSet;
}

void Notification::unsetWeb_buttons()
{
    m_Web_buttonsIsSet = false;
}
utility::string_t Notification::getIosCategory() const
{
    return m_Ios_category;
}

void Notification::setIosCategory(const utility::string_t& value)
{
    m_Ios_category = value;
    m_Ios_categoryIsSet = true;
}

bool Notification::iosCategoryIsSet() const
{
    return m_Ios_categoryIsSet;
}

void Notification::unsetIos_category()
{
    m_Ios_categoryIsSet = false;
}
utility::string_t Notification::getAndroidChannelId() const
{
    return m_Android_channel_id;
}

void Notification::setAndroidChannelId(const utility::string_t& value)
{
    m_Android_channel_id = value;
    m_Android_channel_idIsSet = true;
}

bool Notification::androidChannelIdIsSet() const
{
    return m_Android_channel_idIsSet;
}

void Notification::unsetAndroid_channel_id()
{
    m_Android_channel_idIsSet = false;
}
utility::string_t Notification::getHuaweiChannelId() const
{
    return m_Huawei_channel_id;
}

void Notification::setHuaweiChannelId(const utility::string_t& value)
{
    m_Huawei_channel_id = value;
    m_Huawei_channel_idIsSet = true;
}

bool Notification::huaweiChannelIdIsSet() const
{
    return m_Huawei_channel_idIsSet;
}

void Notification::unsetHuawei_channel_id()
{
    m_Huawei_channel_idIsSet = false;
}
utility::string_t Notification::getExistingAndroidChannelId() const
{
    return m_Existing_android_channel_id;
}

void Notification::setExistingAndroidChannelId(const utility::string_t& value)
{
    m_Existing_android_channel_id = value;
    m_Existing_android_channel_idIsSet = true;
}

bool Notification::existingAndroidChannelIdIsSet() const
{
    return m_Existing_android_channel_idIsSet;
}

void Notification::unsetExisting_android_channel_id()
{
    m_Existing_android_channel_idIsSet = false;
}
utility::string_t Notification::getHuaweiExistingChannelId() const
{
    return m_Huawei_existing_channel_id;
}

void Notification::setHuaweiExistingChannelId(const utility::string_t& value)
{
    m_Huawei_existing_channel_id = value;
    m_Huawei_existing_channel_idIsSet = true;
}

bool Notification::huaweiExistingChannelIdIsSet() const
{
    return m_Huawei_existing_channel_idIsSet;
}

void Notification::unsetHuawei_existing_channel_id()
{
    m_Huawei_existing_channel_idIsSet = false;
}
std::shared_ptr<Notification_allOf_android_background_layout> Notification::getAndroidBackgroundLayout() const
{
    return m_Android_background_layout;
}

void Notification::setAndroidBackgroundLayout(const std::shared_ptr<Notification_allOf_android_background_layout>& value)
{
    m_Android_background_layout = value;
    m_Android_background_layoutIsSet = true;
}

bool Notification::androidBackgroundLayoutIsSet() const
{
    return m_Android_background_layoutIsSet;
}

void Notification::unsetAndroid_background_layout()
{
    m_Android_background_layoutIsSet = false;
}
utility::string_t Notification::getSmallIcon() const
{
    return m_Small_icon;
}

void Notification::setSmallIcon(const utility::string_t& value)
{
    m_Small_icon = value;
    m_Small_iconIsSet = true;
}

bool Notification::smallIconIsSet() const
{
    return m_Small_iconIsSet;
}

void Notification::unsetSmall_icon()
{
    m_Small_iconIsSet = false;
}
utility::string_t Notification::getHuaweiSmallIcon() const
{
    return m_Huawei_small_icon;
}

void Notification::setHuaweiSmallIcon(const utility::string_t& value)
{
    m_Huawei_small_icon = value;
    m_Huawei_small_iconIsSet = true;
}

bool Notification::huaweiSmallIconIsSet() const
{
    return m_Huawei_small_iconIsSet;
}

void Notification::unsetHuawei_small_icon()
{
    m_Huawei_small_iconIsSet = false;
}
utility::string_t Notification::getLargeIcon() const
{
    return m_Large_icon;
}

void Notification::setLargeIcon(const utility::string_t& value)
{
    m_Large_icon = value;
    m_Large_iconIsSet = true;
}

bool Notification::largeIconIsSet() const
{
    return m_Large_iconIsSet;
}

void Notification::unsetLarge_icon()
{
    m_Large_iconIsSet = false;
}
utility::string_t Notification::getHuaweiLargeIcon() const
{
    return m_Huawei_large_icon;
}

void Notification::setHuaweiLargeIcon(const utility::string_t& value)
{
    m_Huawei_large_icon = value;
    m_Huawei_large_iconIsSet = true;
}

bool Notification::huaweiLargeIconIsSet() const
{
    return m_Huawei_large_iconIsSet;
}

void Notification::unsetHuawei_large_icon()
{
    m_Huawei_large_iconIsSet = false;
}
utility::string_t Notification::getAdmSmallIcon() const
{
    return m_Adm_small_icon;
}

void Notification::setAdmSmallIcon(const utility::string_t& value)
{
    m_Adm_small_icon = value;
    m_Adm_small_iconIsSet = true;
}

bool Notification::admSmallIconIsSet() const
{
    return m_Adm_small_iconIsSet;
}

void Notification::unsetAdm_small_icon()
{
    m_Adm_small_iconIsSet = false;
}
utility::string_t Notification::getAdmLargeIcon() const
{
    return m_Adm_large_icon;
}

void Notification::setAdmLargeIcon(const utility::string_t& value)
{
    m_Adm_large_icon = value;
    m_Adm_large_iconIsSet = true;
}

bool Notification::admLargeIconIsSet() const
{
    return m_Adm_large_iconIsSet;
}

void Notification::unsetAdm_large_icon()
{
    m_Adm_large_iconIsSet = false;
}
utility::string_t Notification::getChromeWebIcon() const
{
    return m_Chrome_web_icon;
}

void Notification::setChromeWebIcon(const utility::string_t& value)
{
    m_Chrome_web_icon = value;
    m_Chrome_web_iconIsSet = true;
}

bool Notification::chromeWebIconIsSet() const
{
    return m_Chrome_web_iconIsSet;
}

void Notification::unsetChrome_web_icon()
{
    m_Chrome_web_iconIsSet = false;
}
utility::string_t Notification::getChromeWebBadge() const
{
    return m_Chrome_web_badge;
}

void Notification::setChromeWebBadge(const utility::string_t& value)
{
    m_Chrome_web_badge = value;
    m_Chrome_web_badgeIsSet = true;
}

bool Notification::chromeWebBadgeIsSet() const
{
    return m_Chrome_web_badgeIsSet;
}

void Notification::unsetChrome_web_badge()
{
    m_Chrome_web_badgeIsSet = false;
}
utility::string_t Notification::getFirefoxIcon() const
{
    return m_Firefox_icon;
}

void Notification::setFirefoxIcon(const utility::string_t& value)
{
    m_Firefox_icon = value;
    m_Firefox_iconIsSet = true;
}

bool Notification::firefoxIconIsSet() const
{
    return m_Firefox_iconIsSet;
}

void Notification::unsetFirefox_icon()
{
    m_Firefox_iconIsSet = false;
}
utility::string_t Notification::getChromeIcon() const
{
    return m_Chrome_icon;
}

void Notification::setChromeIcon(const utility::string_t& value)
{
    m_Chrome_icon = value;
    m_Chrome_iconIsSet = true;
}

bool Notification::chromeIconIsSet() const
{
    return m_Chrome_iconIsSet;
}

void Notification::unsetChrome_icon()
{
    m_Chrome_iconIsSet = false;
}
utility::string_t Notification::getIosSound() const
{
    return m_Ios_sound;
}

void Notification::setIosSound(const utility::string_t& value)
{
    m_Ios_sound = value;
    m_Ios_soundIsSet = true;
}

bool Notification::iosSoundIsSet() const
{
    return m_Ios_soundIsSet;
}

void Notification::unsetIos_sound()
{
    m_Ios_soundIsSet = false;
}
utility::string_t Notification::getAndroidSound() const
{
    return m_Android_sound;
}

void Notification::setAndroidSound(const utility::string_t& value)
{
    m_Android_sound = value;
    m_Android_soundIsSet = true;
}

bool Notification::androidSoundIsSet() const
{
    return m_Android_soundIsSet;
}

void Notification::unsetAndroid_sound()
{
    m_Android_soundIsSet = false;
}
utility::string_t Notification::getHuaweiSound() const
{
    return m_Huawei_sound;
}

void Notification::setHuaweiSound(const utility::string_t& value)
{
    m_Huawei_sound = value;
    m_Huawei_soundIsSet = true;
}

bool Notification::huaweiSoundIsSet() const
{
    return m_Huawei_soundIsSet;
}

void Notification::unsetHuawei_sound()
{
    m_Huawei_soundIsSet = false;
}
utility::string_t Notification::getAdmSound() const
{
    return m_Adm_sound;
}

void Notification::setAdmSound(const utility::string_t& value)
{
    m_Adm_sound = value;
    m_Adm_soundIsSet = true;
}

bool Notification::admSoundIsSet() const
{
    return m_Adm_soundIsSet;
}

void Notification::unsetAdm_sound()
{
    m_Adm_soundIsSet = false;
}
utility::string_t Notification::getWpWnsSound() const
{
    return m_Wp_wns_sound;
}

void Notification::setWpWnsSound(const utility::string_t& value)
{
    m_Wp_wns_sound = value;
    m_Wp_wns_soundIsSet = true;
}

bool Notification::wpWnsSoundIsSet() const
{
    return m_Wp_wns_soundIsSet;
}

void Notification::unsetWp_wns_sound()
{
    m_Wp_wns_soundIsSet = false;
}
utility::string_t Notification::getAndroidLedColor() const
{
    return m_Android_led_color;
}

void Notification::setAndroidLedColor(const utility::string_t& value)
{
    m_Android_led_color = value;
    m_Android_led_colorIsSet = true;
}

bool Notification::androidLedColorIsSet() const
{
    return m_Android_led_colorIsSet;
}

void Notification::unsetAndroid_led_color()
{
    m_Android_led_colorIsSet = false;
}
utility::string_t Notification::getHuaweiLedColor() const
{
    return m_Huawei_led_color;
}

void Notification::setHuaweiLedColor(const utility::string_t& value)
{
    m_Huawei_led_color = value;
    m_Huawei_led_colorIsSet = true;
}

bool Notification::huaweiLedColorIsSet() const
{
    return m_Huawei_led_colorIsSet;
}

void Notification::unsetHuawei_led_color()
{
    m_Huawei_led_colorIsSet = false;
}
utility::string_t Notification::getAndroidAccentColor() const
{
    return m_Android_accent_color;
}

void Notification::setAndroidAccentColor(const utility::string_t& value)
{
    m_Android_accent_color = value;
    m_Android_accent_colorIsSet = true;
}

bool Notification::androidAccentColorIsSet() const
{
    return m_Android_accent_colorIsSet;
}

void Notification::unsetAndroid_accent_color()
{
    m_Android_accent_colorIsSet = false;
}
utility::string_t Notification::getHuaweiAccentColor() const
{
    return m_Huawei_accent_color;
}

void Notification::setHuaweiAccentColor(const utility::string_t& value)
{
    m_Huawei_accent_color = value;
    m_Huawei_accent_colorIsSet = true;
}

bool Notification::huaweiAccentColorIsSet() const
{
    return m_Huawei_accent_colorIsSet;
}

void Notification::unsetHuawei_accent_color()
{
    m_Huawei_accent_colorIsSet = false;
}
int32_t Notification::getAndroidVisibility() const
{
    return m_Android_visibility;
}

void Notification::setAndroidVisibility(int32_t value)
{
    m_Android_visibility = value;
    m_Android_visibilityIsSet = true;
}

bool Notification::androidVisibilityIsSet() const
{
    return m_Android_visibilityIsSet;
}

void Notification::unsetAndroid_visibility()
{
    m_Android_visibilityIsSet = false;
}
int32_t Notification::getHuaweiVisibility() const
{
    return m_Huawei_visibility;
}

void Notification::setHuaweiVisibility(int32_t value)
{
    m_Huawei_visibility = value;
    m_Huawei_visibilityIsSet = true;
}

bool Notification::huaweiVisibilityIsSet() const
{
    return m_Huawei_visibilityIsSet;
}

void Notification::unsetHuawei_visibility()
{
    m_Huawei_visibilityIsSet = false;
}
utility::string_t Notification::getIosBadgeType() const
{
    return m_Ios_badgeType;
}

void Notification::setIosBadgeType(const utility::string_t& value)
{
    m_Ios_badgeType = value;
    m_Ios_badgeTypeIsSet = true;
}

bool Notification::iosBadgeTypeIsSet() const
{
    return m_Ios_badgeTypeIsSet;
}

void Notification::unsetIos_badgeType()
{
    m_Ios_badgeTypeIsSet = false;
}
int32_t Notification::getIosBadgeCount() const
{
    return m_Ios_badgeCount;
}

void Notification::setIosBadgeCount(int32_t value)
{
    m_Ios_badgeCount = value;
    m_Ios_badgeCountIsSet = true;
}

bool Notification::iosBadgeCountIsSet() const
{
    return m_Ios_badgeCountIsSet;
}

void Notification::unsetIos_badgeCount()
{
    m_Ios_badgeCountIsSet = false;
}
utility::string_t Notification::getCollapseId() const
{
    return m_Collapse_id;
}

void Notification::setCollapseId(const utility::string_t& value)
{
    m_Collapse_id = value;
    m_Collapse_idIsSet = true;
}

bool Notification::collapseIdIsSet() const
{
    return m_Collapse_idIsSet;
}

void Notification::unsetCollapse_id()
{
    m_Collapse_idIsSet = false;
}
utility::string_t Notification::getWebPushTopic() const
{
    return m_Web_push_topic;
}

void Notification::setWebPushTopic(const utility::string_t& value)
{
    m_Web_push_topic = value;
    m_Web_push_topicIsSet = true;
}

bool Notification::webPushTopicIsSet() const
{
    return m_Web_push_topicIsSet;
}

void Notification::unsetWeb_push_topic()
{
    m_Web_push_topicIsSet = false;
}
std::shared_ptr<Object> Notification::getApnsAlert() const
{
    return m_Apns_alert;
}

void Notification::setApnsAlert(const std::shared_ptr<Object>& value)
{
    m_Apns_alert = value;
    m_Apns_alertIsSet = true;
}

bool Notification::apnsAlertIsSet() const
{
    return m_Apns_alertIsSet;
}

void Notification::unsetApns_alert()
{
    m_Apns_alertIsSet = false;
}
utility::string_t Notification::getSendAfter() const
{
    return m_Send_after;
}

void Notification::setSendAfter(const utility::string_t& value)
{
    m_Send_after = value;
    m_Send_afterIsSet = true;
}

bool Notification::sendAfterIsSet() const
{
    return m_Send_afterIsSet;
}

void Notification::unsetSend_after()
{
    m_Send_afterIsSet = false;
}
utility::string_t Notification::getDelayedOption() const
{
    return m_Delayed_option;
}

void Notification::setDelayedOption(const utility::string_t& value)
{
    m_Delayed_option = value;
    m_Delayed_optionIsSet = true;
}

bool Notification::delayedOptionIsSet() const
{
    return m_Delayed_optionIsSet;
}

void Notification::unsetDelayed_option()
{
    m_Delayed_optionIsSet = false;
}
utility::string_t Notification::getDeliveryTimeOfDay() const
{
    return m_Delivery_time_of_day;
}

void Notification::setDeliveryTimeOfDay(const utility::string_t& value)
{
    m_Delivery_time_of_day = value;
    m_Delivery_time_of_dayIsSet = true;
}

bool Notification::deliveryTimeOfDayIsSet() const
{
    return m_Delivery_time_of_dayIsSet;
}

void Notification::unsetDelivery_time_of_day()
{
    m_Delivery_time_of_dayIsSet = false;
}
int32_t Notification::getTtl() const
{
    return m_Ttl;
}

void Notification::setTtl(int32_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool Notification::ttlIsSet() const
{
    return m_TtlIsSet;
}

void Notification::unsetTtl()
{
    m_TtlIsSet = false;
}
int32_t Notification::getPriority() const
{
    return m_Priority;
}

void Notification::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool Notification::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void Notification::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t Notification::getApnsPushTypeOverride() const
{
    return m_Apns_push_type_override;
}

void Notification::setApnsPushTypeOverride(const utility::string_t& value)
{
    m_Apns_push_type_override = value;
    m_Apns_push_type_overrideIsSet = true;
}

bool Notification::apnsPushTypeOverrideIsSet() const
{
    return m_Apns_push_type_overrideIsSet;
}

void Notification::unsetApns_push_type_override()
{
    m_Apns_push_type_overrideIsSet = false;
}
utility::string_t Notification::getThrottleRatePerMinute() const
{
    return m_Throttle_rate_per_minute;
}

void Notification::setThrottleRatePerMinute(const utility::string_t& value)
{
    m_Throttle_rate_per_minute = value;
    m_Throttle_rate_per_minuteIsSet = true;
}

bool Notification::throttleRatePerMinuteIsSet() const
{
    return m_Throttle_rate_per_minuteIsSet;
}

void Notification::unsetThrottle_rate_per_minute()
{
    m_Throttle_rate_per_minuteIsSet = false;
}
utility::string_t Notification::getAndroidGroup() const
{
    return m_Android_group;
}

void Notification::setAndroidGroup(const utility::string_t& value)
{
    m_Android_group = value;
    m_Android_groupIsSet = true;
}

bool Notification::androidGroupIsSet() const
{
    return m_Android_groupIsSet;
}

void Notification::unsetAndroid_group()
{
    m_Android_groupIsSet = false;
}
utility::string_t Notification::getAndroidGroupMessage() const
{
    return m_Android_group_message;
}

void Notification::setAndroidGroupMessage(const utility::string_t& value)
{
    m_Android_group_message = value;
    m_Android_group_messageIsSet = true;
}

bool Notification::androidGroupMessageIsSet() const
{
    return m_Android_group_messageIsSet;
}

void Notification::unsetAndroid_group_message()
{
    m_Android_group_messageIsSet = false;
}
utility::string_t Notification::getAdmGroup() const
{
    return m_Adm_group;
}

void Notification::setAdmGroup(const utility::string_t& value)
{
    m_Adm_group = value;
    m_Adm_groupIsSet = true;
}

bool Notification::admGroupIsSet() const
{
    return m_Adm_groupIsSet;
}

void Notification::unsetAdm_group()
{
    m_Adm_groupIsSet = false;
}
std::shared_ptr<Object> Notification::getAdmGroupMessage() const
{
    return m_Adm_group_message;
}

void Notification::setAdmGroupMessage(const std::shared_ptr<Object>& value)
{
    m_Adm_group_message = value;
    m_Adm_group_messageIsSet = true;
}

bool Notification::admGroupMessageIsSet() const
{
    return m_Adm_group_messageIsSet;
}

void Notification::unsetAdm_group_message()
{
    m_Adm_group_messageIsSet = false;
}
utility::string_t Notification::getThreadId() const
{
    return m_Thread_id;
}

void Notification::setThreadId(const utility::string_t& value)
{
    m_Thread_id = value;
    m_Thread_idIsSet = true;
}

bool Notification::threadIdIsSet() const
{
    return m_Thread_idIsSet;
}

void Notification::unsetThread_id()
{
    m_Thread_idIsSet = false;
}
utility::string_t Notification::getSummaryArg() const
{
    return m_Summary_arg;
}

void Notification::setSummaryArg(const utility::string_t& value)
{
    m_Summary_arg = value;
    m_Summary_argIsSet = true;
}

bool Notification::summaryArgIsSet() const
{
    return m_Summary_argIsSet;
}

void Notification::unsetSummary_arg()
{
    m_Summary_argIsSet = false;
}
int32_t Notification::getSummaryArgCount() const
{
    return m_Summary_arg_count;
}

void Notification::setSummaryArgCount(int32_t value)
{
    m_Summary_arg_count = value;
    m_Summary_arg_countIsSet = true;
}

bool Notification::summaryArgCountIsSet() const
{
    return m_Summary_arg_countIsSet;
}

void Notification::unsetSummary_arg_count()
{
    m_Summary_arg_countIsSet = false;
}
utility::string_t Notification::getEmailSubect() const
{
    return m_Email_subect;
}

void Notification::setEmailSubect(const utility::string_t& value)
{
    m_Email_subect = value;
    m_Email_subectIsSet = true;
}

bool Notification::emailSubectIsSet() const
{
    return m_Email_subectIsSet;
}

void Notification::unsetEmail_subect()
{
    m_Email_subectIsSet = false;
}
utility::string_t Notification::getEmailBody() const
{
    return m_Email_body;
}

void Notification::setEmailBody(const utility::string_t& value)
{
    m_Email_body = value;
    m_Email_bodyIsSet = true;
}

bool Notification::emailBodyIsSet() const
{
    return m_Email_bodyIsSet;
}

void Notification::unsetEmail_body()
{
    m_Email_bodyIsSet = false;
}
utility::string_t Notification::getEmailFromName() const
{
    return m_Email_from_name;
}

void Notification::setEmailFromName(const utility::string_t& value)
{
    m_Email_from_name = value;
    m_Email_from_nameIsSet = true;
}

bool Notification::emailFromNameIsSet() const
{
    return m_Email_from_nameIsSet;
}

void Notification::unsetEmail_from_name()
{
    m_Email_from_nameIsSet = false;
}
utility::string_t Notification::getEmailFromAddress() const
{
    return m_Email_from_address;
}

void Notification::setEmailFromAddress(const utility::string_t& value)
{
    m_Email_from_address = value;
    m_Email_from_addressIsSet = true;
}

bool Notification::emailFromAddressIsSet() const
{
    return m_Email_from_addressIsSet;
}

void Notification::unsetEmail_from_address()
{
    m_Email_from_addressIsSet = false;
}
utility::string_t Notification::getSmsFrom() const
{
    return m_Sms_from;
}

void Notification::setSmsFrom(const utility::string_t& value)
{
    m_Sms_from = value;
    m_Sms_fromIsSet = true;
}

bool Notification::smsFromIsSet() const
{
    return m_Sms_fromIsSet;
}

void Notification::unsetSms_from()
{
    m_Sms_fromIsSet = false;
}
std::vector<utility::string_t>& Notification::getSmsMediaUrls()
{
    return m_Sms_media_urls;
}

void Notification::setSmsMediaUrls(const std::vector<utility::string_t>& value)
{
    m_Sms_media_urls = value;
    m_Sms_media_urlsIsSet = true;
}

bool Notification::smsMediaUrlsIsSet() const
{
    return m_Sms_media_urlsIsSet;
}

void Notification::unsetSms_media_urls()
{
    m_Sms_media_urlsIsSet = false;
}
}
}
}
}


