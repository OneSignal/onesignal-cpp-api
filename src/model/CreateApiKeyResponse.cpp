/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/CreateApiKeyResponse.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



CreateApiKeyResponse::CreateApiKeyResponse()
{
    m_Token_id = utility::conversions::to_string_t("");
    m_Token_idIsSet = false;
    m_Formatted_token = utility::conversions::to_string_t("");
    m_Formatted_tokenIsSet = false;
}

CreateApiKeyResponse::~CreateApiKeyResponse()
{
}

void CreateApiKeyResponse::validate()
{
    // TODO: implement validation
}

web::json::value CreateApiKeyResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Token_idIsSet)
    {
        val[utility::conversions::to_string_t(U("token_id"))] = ModelBase::toJson(m_Token_id);
    }
    if(m_Formatted_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("formatted_token"))] = ModelBase::toJson(m_Formatted_token);
    }

    return val;
}

bool CreateApiKeyResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("token_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenId);
            setTokenId(refVal_setTokenId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("formatted_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("formatted_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormattedToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormattedToken);
            setFormattedToken(refVal_setFormattedToken);
        }
    }
    return ok;
}

void CreateApiKeyResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Token_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_id")), m_Token_id));
    }
    if(m_Formatted_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("formatted_token")), m_Formatted_token));
    }
}

bool CreateApiKeyResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("token_id"))))
    {
        utility::string_t refVal_setTokenId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_id"))), refVal_setTokenId );
        setTokenId(refVal_setTokenId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("formatted_token"))))
    {
        utility::string_t refVal_setFormattedToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("formatted_token"))), refVal_setFormattedToken );
        setFormattedToken(refVal_setFormattedToken);
    }
    return ok;
}

utility::string_t CreateApiKeyResponse::getTokenId() const
{
    return m_Token_id;
}

void CreateApiKeyResponse::setTokenId(const utility::string_t& value)
{
    m_Token_id = value;
    m_Token_idIsSet = true;
}

bool CreateApiKeyResponse::tokenIdIsSet() const
{
    return m_Token_idIsSet;
}

void CreateApiKeyResponse::unsetToken_id()
{
    m_Token_idIsSet = false;
}
utility::string_t CreateApiKeyResponse::getFormattedToken() const
{
    return m_Formatted_token;
}

void CreateApiKeyResponse::setFormattedToken(const utility::string_t& value)
{
    m_Formatted_token = value;
    m_Formatted_tokenIsSet = true;
}

bool CreateApiKeyResponse::formattedTokenIsSet() const
{
    return m_Formatted_tokenIsSet;
}

void CreateApiKeyResponse::unsetFormatted_token()
{
    m_Formatted_tokenIsSet = false;
}
}
}
}
}


