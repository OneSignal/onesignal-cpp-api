/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/ApiKeyToken.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



ApiKeyToken::ApiKeyToken()
{
    m_Token_id = utility::conversions::to_string_t("");
    m_Token_idIsSet = false;
    m_Updated_at = utility::conversions::to_string_t("");
    m_Updated_atIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Ip_allowlist_mode = utility::conversions::to_string_t("");
    m_Ip_allowlist_modeIsSet = false;
    m_Ip_allowlistIsSet = false;
}

ApiKeyToken::~ApiKeyToken()
{
}

void ApiKeyToken::validate()
{
    // TODO: implement validation
}

web::json::value ApiKeyToken::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Token_idIsSet)
    {
        val[utility::conversions::to_string_t(U("token_id"))] = ModelBase::toJson(m_Token_id);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Ip_allowlist_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("ip_allowlist_mode"))] = ModelBase::toJson(m_Ip_allowlist_mode);
    }
    if(m_Ip_allowlistIsSet)
    {
        val[utility::conversions::to_string_t(U("ip_allowlist"))] = ModelBase::toJson(m_Ip_allowlist);
    }

    return val;
}

bool ApiKeyToken::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("token_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenId);
            setTokenId(refVal_setTokenId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ip_allowlist_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ip_allowlist_mode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIpAllowlistMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpAllowlistMode);
            setIpAllowlistMode(refVal_setIpAllowlistMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ip_allowlist"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ip_allowlist")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIpAllowlist;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpAllowlist);
            setIpAllowlist(refVal_setIpAllowlist);
        }
    }
    return ok;
}

void ApiKeyToken::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Token_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_id")), m_Token_id));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at")), m_Updated_at));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Ip_allowlist_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ip_allowlist_mode")), m_Ip_allowlist_mode));
    }
    if(m_Ip_allowlistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ip_allowlist")), m_Ip_allowlist));
    }
}

bool ApiKeyToken::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("token_id"))))
    {
        utility::string_t refVal_setTokenId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_id"))), refVal_setTokenId );
        setTokenId(refVal_setTokenId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at"))))
    {
        utility::string_t refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::string_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ip_allowlist_mode"))))
    {
        utility::string_t refVal_setIpAllowlistMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ip_allowlist_mode"))), refVal_setIpAllowlistMode );
        setIpAllowlistMode(refVal_setIpAllowlistMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ip_allowlist"))))
    {
        std::vector<utility::string_t> refVal_setIpAllowlist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ip_allowlist"))), refVal_setIpAllowlist );
        setIpAllowlist(refVal_setIpAllowlist);
    }
    return ok;
}

utility::string_t ApiKeyToken::getTokenId() const
{
    return m_Token_id;
}

void ApiKeyToken::setTokenId(const utility::string_t& value)
{
    m_Token_id = value;
    m_Token_idIsSet = true;
}

bool ApiKeyToken::tokenIdIsSet() const
{
    return m_Token_idIsSet;
}

void ApiKeyToken::unsetToken_id()
{
    m_Token_idIsSet = false;
}
utility::string_t ApiKeyToken::getUpdatedAt() const
{
    return m_Updated_at;
}

void ApiKeyToken::setUpdatedAt(const utility::string_t& value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool ApiKeyToken::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void ApiKeyToken::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
utility::string_t ApiKeyToken::getCreatedAt() const
{
    return m_Created_at;
}

void ApiKeyToken::setCreatedAt(const utility::string_t& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool ApiKeyToken::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void ApiKeyToken::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t ApiKeyToken::getName() const
{
    return m_Name;
}

void ApiKeyToken::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ApiKeyToken::nameIsSet() const
{
    return m_NameIsSet;
}

void ApiKeyToken::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ApiKeyToken::getIpAllowlistMode() const
{
    return m_Ip_allowlist_mode;
}

void ApiKeyToken::setIpAllowlistMode(const utility::string_t& value)
{
    m_Ip_allowlist_mode = value;
    m_Ip_allowlist_modeIsSet = true;
}

bool ApiKeyToken::ipAllowlistModeIsSet() const
{
    return m_Ip_allowlist_modeIsSet;
}

void ApiKeyToken::unsetIp_allowlist_mode()
{
    m_Ip_allowlist_modeIsSet = false;
}
std::vector<utility::string_t>& ApiKeyToken::getIpAllowlist()
{
    return m_Ip_allowlist;
}

void ApiKeyToken::setIpAllowlist(const std::vector<utility::string_t>& value)
{
    m_Ip_allowlist = value;
    m_Ip_allowlistIsSet = true;
}

bool ApiKeyToken::ipAllowlistIsSet() const
{
    return m_Ip_allowlistIsSet;
}

void ApiKeyToken::unsetIp_allowlist()
{
    m_Ip_allowlistIsSet = false;
}
}
}
}
}


