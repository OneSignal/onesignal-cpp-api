/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/Purchase.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



Purchase::Purchase()
{
    m_Sku = utility::conversions::to_string_t("");
    m_SkuIsSet = false;
    m_Amount = 0.0;
    m_AmountIsSet = false;
    m_Iso = utility::conversions::to_string_t("");
    m_IsoIsSet = false;
}

Purchase::~Purchase()
{
}

void Purchase::validate()
{
    // TODO: implement validation
}

web::json::value Purchase::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SkuIsSet)
    {
        val[utility::conversions::to_string_t(U("sku"))] = ModelBase::toJson(m_Sku);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_IsoIsSet)
    {
        val[utility::conversions::to_string_t(U("iso"))] = ModelBase::toJson(m_Iso);
    }

    return val;
}

bool Purchase::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("sku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSku);
            setSku(refVal_setSku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iso"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iso")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIso;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIso);
            setIso(refVal_setIso);
        }
    }
    return ok;
}

void Purchase::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sku")), m_Sku));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_IsoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iso")), m_Iso));
    }
}

bool Purchase::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("sku"))))
    {
        utility::string_t refVal_setSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sku"))), refVal_setSku );
        setSku(refVal_setSku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        double refVal_setAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_setAmount );
        setAmount(refVal_setAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iso"))))
    {
        utility::string_t refVal_setIso;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iso"))), refVal_setIso );
        setIso(refVal_setIso);
    }
    return ok;
}

utility::string_t Purchase::getSku() const
{
    return m_Sku;
}

void Purchase::setSku(const utility::string_t& value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}

bool Purchase::skuIsSet() const
{
    return m_SkuIsSet;
}

void Purchase::unsetSku()
{
    m_SkuIsSet = false;
}
double Purchase::getAmount() const
{
    return m_Amount;
}

void Purchase::setAmount(double value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool Purchase::amountIsSet() const
{
    return m_AmountIsSet;
}

void Purchase::unsetAmount()
{
    m_AmountIsSet = false;
}
utility::string_t Purchase::getIso() const
{
    return m_Iso;
}

void Purchase::setIso(const utility::string_t& value)
{
    m_Iso = value;
    m_IsoIsSet = true;
}

bool Purchase::isoIsSet() const
{
    return m_IsoIsSet;
}

void Purchase::unsetIso()
{
    m_IsoIsSet = false;
}
}
}
}
}


