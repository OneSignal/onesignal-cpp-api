/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.2.1
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/SegmentData.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



SegmentData::SegmentData()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Created_at = utility::conversions::to_string_t("");
    m_Created_atIsSet = false;
    m_Updated_at = utility::conversions::to_string_t("");
    m_Updated_atIsSet = false;
    m_App_id = utility::conversions::to_string_t("");
    m_App_idIsSet = false;
    m_Read_only = false;
    m_Read_onlyIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
}

SegmentData::~SegmentData()
{
}

void SegmentData::validate()
{
    // TODO: implement validation
}

web::json::value SegmentData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }
    if(m_App_idIsSet)
    {
        val[utility::conversions::to_string_t(U("app_id"))] = ModelBase::toJson(m_App_id);
    }
    if(m_Read_onlyIsSet)
    {
        val[utility::conversions::to_string_t(U("read_only"))] = ModelBase::toJson(m_Read_only);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("is_active"))] = ModelBase::toJson(m_Is_active);
    }

    return val;
}

bool SegmentData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAppId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAppId);
            setAppId(refVal_setAppId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("read_only"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("read_only")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReadOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReadOnly);
            setReadOnly(refVal_setReadOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsActive);
            setIsActive(refVal_setIsActive);
        }
    }
    return ok;
}

void SegmentData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at")), m_Updated_at));
    }
    if(m_App_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app_id")), m_App_id));
    }
    if(m_Read_onlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("read_only")), m_Read_only));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_active")), m_Is_active));
    }
}

bool SegmentData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::string_t refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at"))))
    {
        utility::string_t refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app_id"))))
    {
        utility::string_t refVal_setAppId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app_id"))), refVal_setAppId );
        setAppId(refVal_setAppId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("read_only"))))
    {
        bool refVal_setReadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("read_only"))), refVal_setReadOnly );
        setReadOnly(refVal_setReadOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_active"))))
    {
        bool refVal_setIsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_active"))), refVal_setIsActive );
        setIsActive(refVal_setIsActive);
    }
    return ok;
}

utility::string_t SegmentData::getId() const
{
    return m_Id;
}

void SegmentData::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SegmentData::idIsSet() const
{
    return m_IdIsSet;
}

void SegmentData::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SegmentData::getName() const
{
    return m_Name;
}

void SegmentData::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SegmentData::nameIsSet() const
{
    return m_NameIsSet;
}

void SegmentData::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SegmentData::getCreatedAt() const
{
    return m_Created_at;
}

void SegmentData::setCreatedAt(const utility::string_t& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool SegmentData::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void SegmentData::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t SegmentData::getUpdatedAt() const
{
    return m_Updated_at;
}

void SegmentData::setUpdatedAt(const utility::string_t& value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool SegmentData::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void SegmentData::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
utility::string_t SegmentData::getAppId() const
{
    return m_App_id;
}

void SegmentData::setAppId(const utility::string_t& value)
{
    m_App_id = value;
    m_App_idIsSet = true;
}

bool SegmentData::appIdIsSet() const
{
    return m_App_idIsSet;
}

void SegmentData::unsetApp_id()
{
    m_App_idIsSet = false;
}
bool SegmentData::isReadOnly() const
{
    return m_Read_only;
}

void SegmentData::setReadOnly(bool value)
{
    m_Read_only = value;
    m_Read_onlyIsSet = true;
}

bool SegmentData::readOnlyIsSet() const
{
    return m_Read_onlyIsSet;
}

void SegmentData::unsetRead_only()
{
    m_Read_onlyIsSet = false;
}
bool SegmentData::isIsActive() const
{
    return m_Is_active;
}

void SegmentData::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool SegmentData::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void SegmentData::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
}
}
}
}


