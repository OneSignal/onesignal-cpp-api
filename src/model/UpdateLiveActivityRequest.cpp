/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.2.1
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/UpdateLiveActivityRequest.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



UpdateLiveActivityRequest::UpdateLiveActivityRequest()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Event = utility::conversions::to_string_t("");
    m_EventIsSet = false;
    m_Event_updatesIsSet = false;
    m_ContentsIsSet = false;
    m_HeadingsIsSet = false;
    m_Sound = utility::conversions::to_string_t("");
    m_SoundIsSet = false;
    m_Stale_date = 0;
    m_Stale_dateIsSet = false;
    m_Dismissal_date = 0;
    m_Dismissal_dateIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
}

UpdateLiveActivityRequest::~UpdateLiveActivityRequest()
{
}

void UpdateLiveActivityRequest::validate()
{
    // TODO: implement validation
}

web::json::value UpdateLiveActivityRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_EventIsSet)
    {
        val[utility::conversions::to_string_t(U("event"))] = ModelBase::toJson(m_Event);
    }
    if(m_Event_updatesIsSet)
    {
        val[utility::conversions::to_string_t(U("event_updates"))] = ModelBase::toJson(m_Event_updates);
    }
    if(m_ContentsIsSet)
    {
        val[utility::conversions::to_string_t(U("contents"))] = ModelBase::toJson(m_Contents);
    }
    if(m_HeadingsIsSet)
    {
        val[utility::conversions::to_string_t(U("headings"))] = ModelBase::toJson(m_Headings);
    }
    if(m_SoundIsSet)
    {
        val[utility::conversions::to_string_t(U("sound"))] = ModelBase::toJson(m_Sound);
    }
    if(m_Stale_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("stale_date"))] = ModelBase::toJson(m_Stale_date);
    }
    if(m_Dismissal_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("dismissal_date"))] = ModelBase::toJson(m_Dismissal_date);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }

    return val;
}

bool UpdateLiveActivityRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvent);
            setEvent(refVal_setEvent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_updates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_updates")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setEventUpdates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventUpdates);
            setEventUpdates(refVal_setEventUpdates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contents")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LanguageStringMap> refVal_setContents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContents);
            setContents(refVal_setContents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("headings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("headings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LanguageStringMap> refVal_setHeadings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeadings);
            setHeadings(refVal_setHeadings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sound"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sound")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSound;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSound);
            setSound(refVal_setSound);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stale_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stale_date")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStaleDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStaleDate);
            setStaleDate(refVal_setStaleDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dismissal_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dismissal_date")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDismissalDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDismissalDate);
            setDismissalDate(refVal_setDismissalDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    return ok;
}

void UpdateLiveActivityRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_EventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event")), m_Event));
    }
    if(m_Event_updatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_updates")), m_Event_updates));
    }
    if(m_ContentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contents")), m_Contents));
    }
    if(m_HeadingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("headings")), m_Headings));
    }
    if(m_SoundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sound")), m_Sound));
    }
    if(m_Stale_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stale_date")), m_Stale_date));
    }
    if(m_Dismissal_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dismissal_date")), m_Dismissal_date));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
}

bool UpdateLiveActivityRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event"))))
    {
        utility::string_t refVal_setEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event"))), refVal_setEvent );
        setEvent(refVal_setEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_updates"))))
    {
        std::shared_ptr<Object> refVal_setEventUpdates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_updates"))), refVal_setEventUpdates );
        setEventUpdates(refVal_setEventUpdates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contents"))))
    {
        std::shared_ptr<LanguageStringMap> refVal_setContents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contents"))), refVal_setContents );
        setContents(refVal_setContents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("headings"))))
    {
        std::shared_ptr<LanguageStringMap> refVal_setHeadings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("headings"))), refVal_setHeadings );
        setHeadings(refVal_setHeadings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sound"))))
    {
        utility::string_t refVal_setSound;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sound"))), refVal_setSound );
        setSound(refVal_setSound);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stale_date"))))
    {
        int32_t refVal_setStaleDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stale_date"))), refVal_setStaleDate );
        setStaleDate(refVal_setStaleDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dismissal_date"))))
    {
        int32_t refVal_setDismissalDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dismissal_date"))), refVal_setDismissalDate );
        setDismissalDate(refVal_setDismissalDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        int32_t refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    return ok;
}

utility::string_t UpdateLiveActivityRequest::getName() const
{
    return m_Name;
}

void UpdateLiveActivityRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UpdateLiveActivityRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void UpdateLiveActivityRequest::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UpdateLiveActivityRequest::getEvent() const
{
    return m_Event;
}

void UpdateLiveActivityRequest::setEvent(const utility::string_t& value)
{
    m_Event = value;
    m_EventIsSet = true;
}

bool UpdateLiveActivityRequest::eventIsSet() const
{
    return m_EventIsSet;
}

void UpdateLiveActivityRequest::unsetEvent()
{
    m_EventIsSet = false;
}
std::shared_ptr<Object> UpdateLiveActivityRequest::getEventUpdates() const
{
    return m_Event_updates;
}

void UpdateLiveActivityRequest::setEventUpdates(const std::shared_ptr<Object>& value)
{
    m_Event_updates = value;
    m_Event_updatesIsSet = true;
}

bool UpdateLiveActivityRequest::eventUpdatesIsSet() const
{
    return m_Event_updatesIsSet;
}

void UpdateLiveActivityRequest::unsetEvent_updates()
{
    m_Event_updatesIsSet = false;
}
std::shared_ptr<LanguageStringMap> UpdateLiveActivityRequest::getContents() const
{
    return m_Contents;
}

void UpdateLiveActivityRequest::setContents(const std::shared_ptr<LanguageStringMap>& value)
{
    m_Contents = value;
    m_ContentsIsSet = true;
}

bool UpdateLiveActivityRequest::contentsIsSet() const
{
    return m_ContentsIsSet;
}

void UpdateLiveActivityRequest::unsetContents()
{
    m_ContentsIsSet = false;
}
std::shared_ptr<LanguageStringMap> UpdateLiveActivityRequest::getHeadings() const
{
    return m_Headings;
}

void UpdateLiveActivityRequest::setHeadings(const std::shared_ptr<LanguageStringMap>& value)
{
    m_Headings = value;
    m_HeadingsIsSet = true;
}

bool UpdateLiveActivityRequest::headingsIsSet() const
{
    return m_HeadingsIsSet;
}

void UpdateLiveActivityRequest::unsetHeadings()
{
    m_HeadingsIsSet = false;
}
utility::string_t UpdateLiveActivityRequest::getSound() const
{
    return m_Sound;
}

void UpdateLiveActivityRequest::setSound(const utility::string_t& value)
{
    m_Sound = value;
    m_SoundIsSet = true;
}

bool UpdateLiveActivityRequest::soundIsSet() const
{
    return m_SoundIsSet;
}

void UpdateLiveActivityRequest::unsetSound()
{
    m_SoundIsSet = false;
}
int32_t UpdateLiveActivityRequest::getStaleDate() const
{
    return m_Stale_date;
}

void UpdateLiveActivityRequest::setStaleDate(int32_t value)
{
    m_Stale_date = value;
    m_Stale_dateIsSet = true;
}

bool UpdateLiveActivityRequest::staleDateIsSet() const
{
    return m_Stale_dateIsSet;
}

void UpdateLiveActivityRequest::unsetStale_date()
{
    m_Stale_dateIsSet = false;
}
int32_t UpdateLiveActivityRequest::getDismissalDate() const
{
    return m_Dismissal_date;
}

void UpdateLiveActivityRequest::setDismissalDate(int32_t value)
{
    m_Dismissal_date = value;
    m_Dismissal_dateIsSet = true;
}

bool UpdateLiveActivityRequest::dismissalDateIsSet() const
{
    return m_Dismissal_dateIsSet;
}

void UpdateLiveActivityRequest::unsetDismissal_date()
{
    m_Dismissal_dateIsSet = false;
}
int32_t UpdateLiveActivityRequest::getPriority() const
{
    return m_Priority;
}

void UpdateLiveActivityRequest::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool UpdateLiveActivityRequest::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void UpdateLiveActivityRequest::unsetPriority()
{
    m_PriorityIsSet = false;
}
}
}
}
}


