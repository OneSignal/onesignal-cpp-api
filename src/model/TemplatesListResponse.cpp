/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/TemplatesListResponse.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



TemplatesListResponse::TemplatesListResponse()
{
    m_TemplatesIsSet = false;
}

TemplatesListResponse::~TemplatesListResponse()
{
}

void TemplatesListResponse::validate()
{
    // TODO: implement validation
}

web::json::value TemplatesListResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TemplatesIsSet)
    {
        val[utility::conversions::to_string_t(U("templates"))] = ModelBase::toJson(m_Templates);
    }

    return val;
}

bool TemplatesListResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("templates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templates")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TemplateResource>> refVal_setTemplates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplates);
            setTemplates(refVal_setTemplates);
        }
    }
    return ok;
}

void TemplatesListResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TemplatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templates")), m_Templates));
    }
}

bool TemplatesListResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("templates"))))
    {
        std::vector<std::shared_ptr<TemplateResource>> refVal_setTemplates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templates"))), refVal_setTemplates );
        setTemplates(refVal_setTemplates);
    }
    return ok;
}

std::vector<std::shared_ptr<TemplateResource>>& TemplatesListResponse::getTemplates()
{
    return m_Templates;
}

void TemplatesListResponse::setTemplates(const std::vector<std::shared_ptr<TemplateResource>>& value)
{
    m_Templates = value;
    m_TemplatesIsSet = true;
}

bool TemplatesListResponse::templatesIsSet() const
{
    return m_TemplatesIsSet;
}

void TemplatesListResponse::unsetTemplates()
{
    m_TemplatesIsSet = false;
}
}
}
}
}


