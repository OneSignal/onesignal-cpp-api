/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/UpdateTemplateRequest.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



UpdateTemplateRequest::UpdateTemplateRequest()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ContentsIsSet = false;
    m_IsEmail = false;
    m_IsEmailIsSet = false;
    m_Email_subject = utility::conversions::to_string_t("");
    m_Email_subjectIsSet = false;
    m_Email_body = utility::conversions::to_string_t("");
    m_Email_bodyIsSet = false;
    m_IsSMS = false;
    m_IsSMSIsSet = false;
    m_Dynamic_content = utility::conversions::to_string_t("");
    m_Dynamic_contentIsSet = false;
}

UpdateTemplateRequest::~UpdateTemplateRequest()
{
}

void UpdateTemplateRequest::validate()
{
    // TODO: implement validation
}

web::json::value UpdateTemplateRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_ContentsIsSet)
    {
        val[utility::conversions::to_string_t(U("contents"))] = ModelBase::toJson(m_Contents);
    }
    if(m_IsEmailIsSet)
    {
        val[utility::conversions::to_string_t(U("isEmail"))] = ModelBase::toJson(m_IsEmail);
    }
    if(m_Email_subjectIsSet)
    {
        val[utility::conversions::to_string_t(U("email_subject"))] = ModelBase::toJson(m_Email_subject);
    }
    if(m_Email_bodyIsSet)
    {
        val[utility::conversions::to_string_t(U("email_body"))] = ModelBase::toJson(m_Email_body);
    }
    if(m_IsSMSIsSet)
    {
        val[utility::conversions::to_string_t(U("isSMS"))] = ModelBase::toJson(m_IsSMS);
    }
    if(m_Dynamic_contentIsSet)
    {
        val[utility::conversions::to_string_t(U("dynamic_content"))] = ModelBase::toJson(m_Dynamic_content);
    }

    return val;
}

bool UpdateTemplateRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contents")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LanguageStringMap> refVal_setContents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContents);
            setContents(refVal_setContents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isEmail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isEmail")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsEmail);
            setIsEmail(refVal_setIsEmail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailSubject);
            setEmailSubject(refVal_setEmailSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("email_body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("email_body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailBody);
            setEmailBody(refVal_setEmailBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isSMS"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isSMS")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSMS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSMS);
            setIsSMS(refVal_setIsSMS);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dynamic_content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dynamic_content")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDynamicContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDynamicContent);
            setDynamicContent(refVal_setDynamicContent);
        }
    }
    return ok;
}

void UpdateTemplateRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_ContentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contents")), m_Contents));
    }
    if(m_IsEmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isEmail")), m_IsEmail));
    }
    if(m_Email_subjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_subject")), m_Email_subject));
    }
    if(m_Email_bodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("email_body")), m_Email_body));
    }
    if(m_IsSMSIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isSMS")), m_IsSMS));
    }
    if(m_Dynamic_contentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dynamic_content")), m_Dynamic_content));
    }
}

bool UpdateTemplateRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contents"))))
    {
        std::shared_ptr<LanguageStringMap> refVal_setContents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contents"))), refVal_setContents );
        setContents(refVal_setContents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isEmail"))))
    {
        bool refVal_setIsEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isEmail"))), refVal_setIsEmail );
        setIsEmail(refVal_setIsEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_subject"))))
    {
        utility::string_t refVal_setEmailSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_subject"))), refVal_setEmailSubject );
        setEmailSubject(refVal_setEmailSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("email_body"))))
    {
        utility::string_t refVal_setEmailBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("email_body"))), refVal_setEmailBody );
        setEmailBody(refVal_setEmailBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isSMS"))))
    {
        bool refVal_setIsSMS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isSMS"))), refVal_setIsSMS );
        setIsSMS(refVal_setIsSMS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dynamic_content"))))
    {
        utility::string_t refVal_setDynamicContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dynamic_content"))), refVal_setDynamicContent );
        setDynamicContent(refVal_setDynamicContent);
    }
    return ok;
}

utility::string_t UpdateTemplateRequest::getName() const
{
    return m_Name;
}

void UpdateTemplateRequest::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UpdateTemplateRequest::nameIsSet() const
{
    return m_NameIsSet;
}

void UpdateTemplateRequest::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<LanguageStringMap> UpdateTemplateRequest::getContents() const
{
    return m_Contents;
}

void UpdateTemplateRequest::setContents(const std::shared_ptr<LanguageStringMap>& value)
{
    m_Contents = value;
    m_ContentsIsSet = true;
}

bool UpdateTemplateRequest::contentsIsSet() const
{
    return m_ContentsIsSet;
}

void UpdateTemplateRequest::unsetContents()
{
    m_ContentsIsSet = false;
}
bool UpdateTemplateRequest::isIsEmail() const
{
    return m_IsEmail;
}

void UpdateTemplateRequest::setIsEmail(bool value)
{
    m_IsEmail = value;
    m_IsEmailIsSet = true;
}

bool UpdateTemplateRequest::isEmailIsSet() const
{
    return m_IsEmailIsSet;
}

void UpdateTemplateRequest::unsetIsEmail()
{
    m_IsEmailIsSet = false;
}
utility::string_t UpdateTemplateRequest::getEmailSubject() const
{
    return m_Email_subject;
}

void UpdateTemplateRequest::setEmailSubject(const utility::string_t& value)
{
    m_Email_subject = value;
    m_Email_subjectIsSet = true;
}

bool UpdateTemplateRequest::emailSubjectIsSet() const
{
    return m_Email_subjectIsSet;
}

void UpdateTemplateRequest::unsetEmail_subject()
{
    m_Email_subjectIsSet = false;
}
utility::string_t UpdateTemplateRequest::getEmailBody() const
{
    return m_Email_body;
}

void UpdateTemplateRequest::setEmailBody(const utility::string_t& value)
{
    m_Email_body = value;
    m_Email_bodyIsSet = true;
}

bool UpdateTemplateRequest::emailBodyIsSet() const
{
    return m_Email_bodyIsSet;
}

void UpdateTemplateRequest::unsetEmail_body()
{
    m_Email_bodyIsSet = false;
}
bool UpdateTemplateRequest::isIsSMS() const
{
    return m_IsSMS;
}

void UpdateTemplateRequest::setIsSMS(bool value)
{
    m_IsSMS = value;
    m_IsSMSIsSet = true;
}

bool UpdateTemplateRequest::isSMSIsSet() const
{
    return m_IsSMSIsSet;
}

void UpdateTemplateRequest::unsetIsSMS()
{
    m_IsSMSIsSet = false;
}
utility::string_t UpdateTemplateRequest::getDynamicContent() const
{
    return m_Dynamic_content;
}

void UpdateTemplateRequest::setDynamicContent(const utility::string_t& value)
{
    m_Dynamic_content = value;
    m_Dynamic_contentIsSet = true;
}

bool UpdateTemplateRequest::dynamicContentIsSet() const
{
    return m_Dynamic_contentIsSet;
}

void UpdateTemplateRequest::unsetDynamic_content()
{
    m_Dynamic_contentIsSet = false;
}
}
}
}
}


