/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/App.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



App::App()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Players = 0;
    m_PlayersIsSet = false;
    m_Messageable_players = 0;
    m_Messageable_playersIsSet = false;
    m_Updated_at = utility::datetime();
    m_Updated_atIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Android_gcm_sender_id = utility::conversions::to_string_t("");
    m_Android_gcm_sender_idIsSet = false;
    m_Gcm_key = utility::conversions::to_string_t("");
    m_Gcm_keyIsSet = false;
    m_Chrome_web_origin = utility::conversions::to_string_t("");
    m_Chrome_web_originIsSet = false;
    m_Chrome_key = utility::conversions::to_string_t("");
    m_Chrome_keyIsSet = false;
    m_Chrome_web_default_notification_icon = utility::conversions::to_string_t("");
    m_Chrome_web_default_notification_iconIsSet = false;
    m_Chrome_web_sub_domain = utility::conversions::to_string_t("");
    m_Chrome_web_sub_domainIsSet = false;
    m_Apns_env = utility::conversions::to_string_t("");
    m_Apns_envIsSet = false;
    m_Apns_p12 = utility::conversions::to_string_t("");
    m_Apns_p12IsSet = false;
    m_Apns_p12_password = utility::conversions::to_string_t("");
    m_Apns_p12_passwordIsSet = false;
    m_Apns_certificates = utility::conversions::to_string_t("");
    m_Apns_certificatesIsSet = false;
    m_Safari_apns_certificates = utility::conversions::to_string_t("");
    m_Safari_apns_certificatesIsSet = false;
    m_Safari_apns_p12 = utility::conversions::to_string_t("");
    m_Safari_apns_p12IsSet = false;
    m_Safari_apns_p12_password = utility::conversions::to_string_t("");
    m_Safari_apns_p12_passwordIsSet = false;
    m_Safari_site_origin = utility::conversions::to_string_t("");
    m_Safari_site_originIsSet = false;
    m_Safari_push_id = utility::conversions::to_string_t("");
    m_Safari_push_idIsSet = false;
    m_Safari_icon_16_16 = utility::conversions::to_string_t("");
    m_Safari_icon_16_16IsSet = false;
    m_Safari_icon_32_32 = utility::conversions::to_string_t("");
    m_Safari_icon_32_32IsSet = false;
    m_Safari_icon_64_64 = utility::conversions::to_string_t("");
    m_Safari_icon_64_64IsSet = false;
    m_Safari_icon_128_128 = utility::conversions::to_string_t("");
    m_Safari_icon_128_128IsSet = false;
    m_Safari_icon_256_256 = utility::conversions::to_string_t("");
    m_Safari_icon_256_256IsSet = false;
    m_Site_name = utility::conversions::to_string_t("");
    m_Site_nameIsSet = false;
    m_Basic_auth_key = utility::conversions::to_string_t("");
    m_Basic_auth_keyIsSet = false;
    m_Organization_id = utility::conversions::to_string_t("");
    m_Organization_idIsSet = false;
    m_Additional_data_is_root_payload = false;
    m_Additional_data_is_root_payloadIsSet = false;
}

App::~App()
{
}

void App::validate()
{
    // TODO: implement validation
}

web::json::value App::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PlayersIsSet)
    {
        val[utility::conversions::to_string_t(U("players"))] = ModelBase::toJson(m_Players);
    }
    if(m_Messageable_playersIsSet)
    {
        val[utility::conversions::to_string_t(U("messageable_players"))] = ModelBase::toJson(m_Messageable_players);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Android_gcm_sender_idIsSet)
    {
        val[utility::conversions::to_string_t(U("android_gcm_sender_id"))] = ModelBase::toJson(m_Android_gcm_sender_id);
    }
    if(m_Gcm_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("gcm_key"))] = ModelBase::toJson(m_Gcm_key);
    }
    if(m_Chrome_web_originIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_origin"))] = ModelBase::toJson(m_Chrome_web_origin);
    }
    if(m_Chrome_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_key"))] = ModelBase::toJson(m_Chrome_key);
    }
    if(m_Chrome_web_default_notification_iconIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_default_notification_icon"))] = ModelBase::toJson(m_Chrome_web_default_notification_icon);
    }
    if(m_Chrome_web_sub_domainIsSet)
    {
        val[utility::conversions::to_string_t(U("chrome_web_sub_domain"))] = ModelBase::toJson(m_Chrome_web_sub_domain);
    }
    if(m_Apns_envIsSet)
    {
        val[utility::conversions::to_string_t(U("apns_env"))] = ModelBase::toJson(m_Apns_env);
    }
    if(m_Apns_p12IsSet)
    {
        val[utility::conversions::to_string_t(U("apns_p12"))] = ModelBase::toJson(m_Apns_p12);
    }
    if(m_Apns_p12_passwordIsSet)
    {
        val[utility::conversions::to_string_t(U("apns_p12_password"))] = ModelBase::toJson(m_Apns_p12_password);
    }
    if(m_Apns_certificatesIsSet)
    {
        val[utility::conversions::to_string_t(U("apns_certificates"))] = ModelBase::toJson(m_Apns_certificates);
    }
    if(m_Safari_apns_certificatesIsSet)
    {
        val[utility::conversions::to_string_t(U("safari_apns_certificates"))] = ModelBase::toJson(m_Safari_apns_certificates);
    }
    if(m_Safari_apns_p12IsSet)
    {
        val[utility::conversions::to_string_t(U("safari_apns_p12"))] = ModelBase::toJson(m_Safari_apns_p12);
    }
    if(m_Safari_apns_p12_passwordIsSet)
    {
        val[utility::conversions::to_string_t(U("safari_apns_p12_password"))] = ModelBase::toJson(m_Safari_apns_p12_password);
    }
    if(m_Safari_site_originIsSet)
    {
        val[utility::conversions::to_string_t(U("safari_site_origin"))] = ModelBase::toJson(m_Safari_site_origin);
    }
    if(m_Safari_push_idIsSet)
    {
        val[utility::conversions::to_string_t(U("safari_push_id"))] = ModelBase::toJson(m_Safari_push_id);
    }
    if(m_Safari_icon_16_16IsSet)
    {
        val[utility::conversions::to_string_t(U("safari_icon_16_16"))] = ModelBase::toJson(m_Safari_icon_16_16);
    }
    if(m_Safari_icon_32_32IsSet)
    {
        val[utility::conversions::to_string_t(U("safari_icon_32_32"))] = ModelBase::toJson(m_Safari_icon_32_32);
    }
    if(m_Safari_icon_64_64IsSet)
    {
        val[utility::conversions::to_string_t(U("safari_icon_64_64"))] = ModelBase::toJson(m_Safari_icon_64_64);
    }
    if(m_Safari_icon_128_128IsSet)
    {
        val[utility::conversions::to_string_t(U("safari_icon_128_128"))] = ModelBase::toJson(m_Safari_icon_128_128);
    }
    if(m_Safari_icon_256_256IsSet)
    {
        val[utility::conversions::to_string_t(U("safari_icon_256_256"))] = ModelBase::toJson(m_Safari_icon_256_256);
    }
    if(m_Site_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("site_name"))] = ModelBase::toJson(m_Site_name);
    }
    if(m_Basic_auth_keyIsSet)
    {
        val[utility::conversions::to_string_t(U("basic_auth_key"))] = ModelBase::toJson(m_Basic_auth_key);
    }
    if(m_Organization_idIsSet)
    {
        val[utility::conversions::to_string_t(U("organization_id"))] = ModelBase::toJson(m_Organization_id);
    }
    if(m_Additional_data_is_root_payloadIsSet)
    {
        val[utility::conversions::to_string_t(U("additional_data_is_root_payload"))] = ModelBase::toJson(m_Additional_data_is_root_payload);
    }

    return val;
}

bool App::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("players"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("players")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_players;
            ok &= ModelBase::fromJson(fieldValue, refVal_players);
            setPlayers(refVal_players);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageable_players"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageable_players")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_messageable_players;
            ok &= ModelBase::fromJson(fieldValue, refVal_messageable_players);
            setMessageablePlayers(refVal_messageable_players);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updated_at;
            ok &= ModelBase::fromJson(fieldValue, refVal_updated_at);
            setUpdatedAt(refVal_updated_at);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_created_at;
            ok &= ModelBase::fromJson(fieldValue, refVal_created_at);
            setCreatedAt(refVal_created_at);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("android_gcm_sender_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("android_gcm_sender_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_android_gcm_sender_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_android_gcm_sender_id);
            setAndroidGcmSenderId(refVal_android_gcm_sender_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gcm_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gcm_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_gcm_key;
            ok &= ModelBase::fromJson(fieldValue, refVal_gcm_key);
            setGcmKey(refVal_gcm_key);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_origin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_origin")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_web_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_web_origin);
            setChromeWebOrigin(refVal_chrome_web_origin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_key;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_key);
            setChromeKey(refVal_chrome_key);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_default_notification_icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_default_notification_icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_web_default_notification_icon;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_web_default_notification_icon);
            setChromeWebDefaultNotificationIcon(refVal_chrome_web_default_notification_icon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chrome_web_sub_domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chrome_web_sub_domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_chrome_web_sub_domain;
            ok &= ModelBase::fromJson(fieldValue, refVal_chrome_web_sub_domain);
            setChromeWebSubDomain(refVal_chrome_web_sub_domain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_env"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_env")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apns_env;
            ok &= ModelBase::fromJson(fieldValue, refVal_apns_env);
            setApnsEnv(refVal_apns_env);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_p12"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_p12")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apns_p12;
            ok &= ModelBase::fromJson(fieldValue, refVal_apns_p12);
            setApnsP12(refVal_apns_p12);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_p12_password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_p12_password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apns_p12_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_apns_p12_password);
            setApnsP12Password(refVal_apns_p12_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apns_certificates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apns_certificates")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apns_certificates;
            ok &= ModelBase::fromJson(fieldValue, refVal_apns_certificates);
            setApnsCertificates(refVal_apns_certificates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_apns_certificates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_apns_certificates")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_apns_certificates;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_apns_certificates);
            setSafariApnsCertificates(refVal_safari_apns_certificates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_apns_p12"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_apns_p12")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_apns_p12;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_apns_p12);
            setSafariApnsP12(refVal_safari_apns_p12);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_apns_p12_password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_apns_p12_password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_apns_p12_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_apns_p12_password);
            setSafariApnsP12Password(refVal_safari_apns_p12_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_site_origin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_site_origin")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_site_origin;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_site_origin);
            setSafariSiteOrigin(refVal_safari_site_origin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_push_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_push_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_push_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_push_id);
            setSafariPushId(refVal_safari_push_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_icon_16_16"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_icon_16_16")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_icon_16_16;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_icon_16_16);
            setSafariIcon1616(refVal_safari_icon_16_16);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_icon_32_32"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_icon_32_32")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_icon_32_32;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_icon_32_32);
            setSafariIcon3232(refVal_safari_icon_32_32);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_icon_64_64"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_icon_64_64")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_icon_64_64;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_icon_64_64);
            setSafariIcon6464(refVal_safari_icon_64_64);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_icon_128_128"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_icon_128_128")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_icon_128_128;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_icon_128_128);
            setSafariIcon128128(refVal_safari_icon_128_128);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("safari_icon_256_256"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("safari_icon_256_256")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_safari_icon_256_256;
            ok &= ModelBase::fromJson(fieldValue, refVal_safari_icon_256_256);
            setSafariIcon256256(refVal_safari_icon_256_256);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("site_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("site_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_site_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_site_name);
            setSiteName(refVal_site_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("basic_auth_key"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("basic_auth_key")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_basic_auth_key;
            ok &= ModelBase::fromJson(fieldValue, refVal_basic_auth_key);
            setBasicAuthKey(refVal_basic_auth_key);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organization_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization_id);
            setOrganizationId(refVal_organization_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("additional_data_is_root_payload"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("additional_data_is_root_payload")));
        if(!fieldValue.is_null())
        {
            bool refVal_additional_data_is_root_payload;
            ok &= ModelBase::fromJson(fieldValue, refVal_additional_data_is_root_payload);
            setAdditionalDataIsRootPayload(refVal_additional_data_is_root_payload);
        }
    }
    return ok;
}

void App::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PlayersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("players")), m_Players));
    }
    if(m_Messageable_playersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageable_players")), m_Messageable_players));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at")), m_Updated_at));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Android_gcm_sender_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("android_gcm_sender_id")), m_Android_gcm_sender_id));
    }
    if(m_Gcm_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gcm_key")), m_Gcm_key));
    }
    if(m_Chrome_web_originIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_origin")), m_Chrome_web_origin));
    }
    if(m_Chrome_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_key")), m_Chrome_key));
    }
    if(m_Chrome_web_default_notification_iconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_default_notification_icon")), m_Chrome_web_default_notification_icon));
    }
    if(m_Chrome_web_sub_domainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chrome_web_sub_domain")), m_Chrome_web_sub_domain));
    }
    if(m_Apns_envIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_env")), m_Apns_env));
    }
    if(m_Apns_p12IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_p12")), m_Apns_p12));
    }
    if(m_Apns_p12_passwordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_p12_password")), m_Apns_p12_password));
    }
    if(m_Apns_certificatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apns_certificates")), m_Apns_certificates));
    }
    if(m_Safari_apns_certificatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_apns_certificates")), m_Safari_apns_certificates));
    }
    if(m_Safari_apns_p12IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_apns_p12")), m_Safari_apns_p12));
    }
    if(m_Safari_apns_p12_passwordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_apns_p12_password")), m_Safari_apns_p12_password));
    }
    if(m_Safari_site_originIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_site_origin")), m_Safari_site_origin));
    }
    if(m_Safari_push_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_push_id")), m_Safari_push_id));
    }
    if(m_Safari_icon_16_16IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_icon_16_16")), m_Safari_icon_16_16));
    }
    if(m_Safari_icon_32_32IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_icon_32_32")), m_Safari_icon_32_32));
    }
    if(m_Safari_icon_64_64IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_icon_64_64")), m_Safari_icon_64_64));
    }
    if(m_Safari_icon_128_128IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_icon_128_128")), m_Safari_icon_128_128));
    }
    if(m_Safari_icon_256_256IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("safari_icon_256_256")), m_Safari_icon_256_256));
    }
    if(m_Site_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("site_name")), m_Site_name));
    }
    if(m_Basic_auth_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("basic_auth_key")), m_Basic_auth_key));
    }
    if(m_Organization_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization_id")), m_Organization_id));
    }
    if(m_Additional_data_is_root_payloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("additional_data_is_root_payload")), m_Additional_data_is_root_payload));
    }
}

bool App::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("players"))))
    {
        int32_t refVal_players;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("players"))), refVal_players );
        setPlayers(refVal_players);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageable_players"))))
    {
        int32_t refVal_messageable_players;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageable_players"))), refVal_messageable_players );
        setMessageablePlayers(refVal_messageable_players);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at"))))
    {
        utility::datetime refVal_updated_at;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at"))), refVal_updated_at );
        setUpdatedAt(refVal_updated_at);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::datetime refVal_created_at;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_created_at );
        setCreatedAt(refVal_created_at);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("android_gcm_sender_id"))))
    {
        utility::string_t refVal_android_gcm_sender_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("android_gcm_sender_id"))), refVal_android_gcm_sender_id );
        setAndroidGcmSenderId(refVal_android_gcm_sender_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gcm_key"))))
    {
        utility::string_t refVal_gcm_key;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gcm_key"))), refVal_gcm_key );
        setGcmKey(refVal_gcm_key);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_origin"))))
    {
        utility::string_t refVal_chrome_web_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_origin"))), refVal_chrome_web_origin );
        setChromeWebOrigin(refVal_chrome_web_origin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_key"))))
    {
        utility::string_t refVal_chrome_key;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_key"))), refVal_chrome_key );
        setChromeKey(refVal_chrome_key);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_default_notification_icon"))))
    {
        utility::string_t refVal_chrome_web_default_notification_icon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_default_notification_icon"))), refVal_chrome_web_default_notification_icon );
        setChromeWebDefaultNotificationIcon(refVal_chrome_web_default_notification_icon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chrome_web_sub_domain"))))
    {
        utility::string_t refVal_chrome_web_sub_domain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chrome_web_sub_domain"))), refVal_chrome_web_sub_domain );
        setChromeWebSubDomain(refVal_chrome_web_sub_domain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_env"))))
    {
        utility::string_t refVal_apns_env;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_env"))), refVal_apns_env );
        setApnsEnv(refVal_apns_env);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_p12"))))
    {
        utility::string_t refVal_apns_p12;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_p12"))), refVal_apns_p12 );
        setApnsP12(refVal_apns_p12);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_p12_password"))))
    {
        utility::string_t refVal_apns_p12_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_p12_password"))), refVal_apns_p12_password );
        setApnsP12Password(refVal_apns_p12_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apns_certificates"))))
    {
        utility::string_t refVal_apns_certificates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apns_certificates"))), refVal_apns_certificates );
        setApnsCertificates(refVal_apns_certificates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_apns_certificates"))))
    {
        utility::string_t refVal_safari_apns_certificates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_apns_certificates"))), refVal_safari_apns_certificates );
        setSafariApnsCertificates(refVal_safari_apns_certificates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_apns_p12"))))
    {
        utility::string_t refVal_safari_apns_p12;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_apns_p12"))), refVal_safari_apns_p12 );
        setSafariApnsP12(refVal_safari_apns_p12);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_apns_p12_password"))))
    {
        utility::string_t refVal_safari_apns_p12_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_apns_p12_password"))), refVal_safari_apns_p12_password );
        setSafariApnsP12Password(refVal_safari_apns_p12_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_site_origin"))))
    {
        utility::string_t refVal_safari_site_origin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_site_origin"))), refVal_safari_site_origin );
        setSafariSiteOrigin(refVal_safari_site_origin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_push_id"))))
    {
        utility::string_t refVal_safari_push_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_push_id"))), refVal_safari_push_id );
        setSafariPushId(refVal_safari_push_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_icon_16_16"))))
    {
        utility::string_t refVal_safari_icon_16_16;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_icon_16_16"))), refVal_safari_icon_16_16 );
        setSafariIcon1616(refVal_safari_icon_16_16);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_icon_32_32"))))
    {
        utility::string_t refVal_safari_icon_32_32;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_icon_32_32"))), refVal_safari_icon_32_32 );
        setSafariIcon3232(refVal_safari_icon_32_32);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_icon_64_64"))))
    {
        utility::string_t refVal_safari_icon_64_64;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_icon_64_64"))), refVal_safari_icon_64_64 );
        setSafariIcon6464(refVal_safari_icon_64_64);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_icon_128_128"))))
    {
        utility::string_t refVal_safari_icon_128_128;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_icon_128_128"))), refVal_safari_icon_128_128 );
        setSafariIcon128128(refVal_safari_icon_128_128);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("safari_icon_256_256"))))
    {
        utility::string_t refVal_safari_icon_256_256;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("safari_icon_256_256"))), refVal_safari_icon_256_256 );
        setSafariIcon256256(refVal_safari_icon_256_256);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("site_name"))))
    {
        utility::string_t refVal_site_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("site_name"))), refVal_site_name );
        setSiteName(refVal_site_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("basic_auth_key"))))
    {
        utility::string_t refVal_basic_auth_key;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("basic_auth_key"))), refVal_basic_auth_key );
        setBasicAuthKey(refVal_basic_auth_key);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization_id"))))
    {
        utility::string_t refVal_organization_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization_id"))), refVal_organization_id );
        setOrganizationId(refVal_organization_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("additional_data_is_root_payload"))))
    {
        bool refVal_additional_data_is_root_payload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("additional_data_is_root_payload"))), refVal_additional_data_is_root_payload );
        setAdditionalDataIsRootPayload(refVal_additional_data_is_root_payload);
    }
    return ok;
}

utility::string_t App::getId() const
{
    return m_Id;
}

void App::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool App::idIsSet() const
{
    return m_IdIsSet;
}

void App::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t App::getName() const
{
    return m_Name;
}

void App::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool App::nameIsSet() const
{
    return m_NameIsSet;
}

void App::unsetName()
{
    m_NameIsSet = false;
}
int32_t App::getPlayers() const
{
    return m_Players;
}

void App::setPlayers(int32_t value)
{
    m_Players = value;
    m_PlayersIsSet = true;
}

bool App::playersIsSet() const
{
    return m_PlayersIsSet;
}

void App::unsetPlayers()
{
    m_PlayersIsSet = false;
}
int32_t App::getMessageablePlayers() const
{
    return m_Messageable_players;
}

void App::setMessageablePlayers(int32_t value)
{
    m_Messageable_players = value;
    m_Messageable_playersIsSet = true;
}

bool App::messageablePlayersIsSet() const
{
    return m_Messageable_playersIsSet;
}

void App::unsetMessageable_players()
{
    m_Messageable_playersIsSet = false;
}
utility::datetime App::getUpdatedAt() const
{
    return m_Updated_at;
}

void App::setUpdatedAt(const utility::datetime& value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool App::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void App::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
utility::datetime App::getCreatedAt() const
{
    return m_Created_at;
}

void App::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool App::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void App::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::string_t App::getAndroidGcmSenderId() const
{
    return m_Android_gcm_sender_id;
}

void App::setAndroidGcmSenderId(const utility::string_t& value)
{
    m_Android_gcm_sender_id = value;
    m_Android_gcm_sender_idIsSet = true;
}

bool App::androidGcmSenderIdIsSet() const
{
    return m_Android_gcm_sender_idIsSet;
}

void App::unsetAndroid_gcm_sender_id()
{
    m_Android_gcm_sender_idIsSet = false;
}
utility::string_t App::getGcmKey() const
{
    return m_Gcm_key;
}

void App::setGcmKey(const utility::string_t& value)
{
    m_Gcm_key = value;
    m_Gcm_keyIsSet = true;
}

bool App::gcmKeyIsSet() const
{
    return m_Gcm_keyIsSet;
}

void App::unsetGcm_key()
{
    m_Gcm_keyIsSet = false;
}
utility::string_t App::getChromeWebOrigin() const
{
    return m_Chrome_web_origin;
}

void App::setChromeWebOrigin(const utility::string_t& value)
{
    m_Chrome_web_origin = value;
    m_Chrome_web_originIsSet = true;
}

bool App::chromeWebOriginIsSet() const
{
    return m_Chrome_web_originIsSet;
}

void App::unsetChrome_web_origin()
{
    m_Chrome_web_originIsSet = false;
}
utility::string_t App::getChromeKey() const
{
    return m_Chrome_key;
}

void App::setChromeKey(const utility::string_t& value)
{
    m_Chrome_key = value;
    m_Chrome_keyIsSet = true;
}

bool App::chromeKeyIsSet() const
{
    return m_Chrome_keyIsSet;
}

void App::unsetChrome_key()
{
    m_Chrome_keyIsSet = false;
}
utility::string_t App::getChromeWebDefaultNotificationIcon() const
{
    return m_Chrome_web_default_notification_icon;
}

void App::setChromeWebDefaultNotificationIcon(const utility::string_t& value)
{
    m_Chrome_web_default_notification_icon = value;
    m_Chrome_web_default_notification_iconIsSet = true;
}

bool App::chromeWebDefaultNotificationIconIsSet() const
{
    return m_Chrome_web_default_notification_iconIsSet;
}

void App::unsetChrome_web_default_notification_icon()
{
    m_Chrome_web_default_notification_iconIsSet = false;
}
utility::string_t App::getChromeWebSubDomain() const
{
    return m_Chrome_web_sub_domain;
}

void App::setChromeWebSubDomain(const utility::string_t& value)
{
    m_Chrome_web_sub_domain = value;
    m_Chrome_web_sub_domainIsSet = true;
}

bool App::chromeWebSubDomainIsSet() const
{
    return m_Chrome_web_sub_domainIsSet;
}

void App::unsetChrome_web_sub_domain()
{
    m_Chrome_web_sub_domainIsSet = false;
}
utility::string_t App::getApnsEnv() const
{
    return m_Apns_env;
}

void App::setApnsEnv(const utility::string_t& value)
{
    m_Apns_env = value;
    m_Apns_envIsSet = true;
}

bool App::apnsEnvIsSet() const
{
    return m_Apns_envIsSet;
}

void App::unsetApns_env()
{
    m_Apns_envIsSet = false;
}
utility::string_t App::getApnsP12() const
{
    return m_Apns_p12;
}

void App::setApnsP12(const utility::string_t& value)
{
    m_Apns_p12 = value;
    m_Apns_p12IsSet = true;
}

bool App::apnsP12IsSet() const
{
    return m_Apns_p12IsSet;
}

void App::unsetApns_p12()
{
    m_Apns_p12IsSet = false;
}
utility::string_t App::getApnsP12Password() const
{
    return m_Apns_p12_password;
}

void App::setApnsP12Password(const utility::string_t& value)
{
    m_Apns_p12_password = value;
    m_Apns_p12_passwordIsSet = true;
}

bool App::apnsP12PasswordIsSet() const
{
    return m_Apns_p12_passwordIsSet;
}

void App::unsetApns_p12_password()
{
    m_Apns_p12_passwordIsSet = false;
}
utility::string_t App::getApnsCertificates() const
{
    return m_Apns_certificates;
}

void App::setApnsCertificates(const utility::string_t& value)
{
    m_Apns_certificates = value;
    m_Apns_certificatesIsSet = true;
}

bool App::apnsCertificatesIsSet() const
{
    return m_Apns_certificatesIsSet;
}

void App::unsetApns_certificates()
{
    m_Apns_certificatesIsSet = false;
}
utility::string_t App::getSafariApnsCertificates() const
{
    return m_Safari_apns_certificates;
}

void App::setSafariApnsCertificates(const utility::string_t& value)
{
    m_Safari_apns_certificates = value;
    m_Safari_apns_certificatesIsSet = true;
}

bool App::safariApnsCertificatesIsSet() const
{
    return m_Safari_apns_certificatesIsSet;
}

void App::unsetSafari_apns_certificates()
{
    m_Safari_apns_certificatesIsSet = false;
}
utility::string_t App::getSafariApnsP12() const
{
    return m_Safari_apns_p12;
}

void App::setSafariApnsP12(const utility::string_t& value)
{
    m_Safari_apns_p12 = value;
    m_Safari_apns_p12IsSet = true;
}

bool App::safariApnsP12IsSet() const
{
    return m_Safari_apns_p12IsSet;
}

void App::unsetSafari_apns_p12()
{
    m_Safari_apns_p12IsSet = false;
}
utility::string_t App::getSafariApnsP12Password() const
{
    return m_Safari_apns_p12_password;
}

void App::setSafariApnsP12Password(const utility::string_t& value)
{
    m_Safari_apns_p12_password = value;
    m_Safari_apns_p12_passwordIsSet = true;
}

bool App::safariApnsP12PasswordIsSet() const
{
    return m_Safari_apns_p12_passwordIsSet;
}

void App::unsetSafari_apns_p12_password()
{
    m_Safari_apns_p12_passwordIsSet = false;
}
utility::string_t App::getSafariSiteOrigin() const
{
    return m_Safari_site_origin;
}

void App::setSafariSiteOrigin(const utility::string_t& value)
{
    m_Safari_site_origin = value;
    m_Safari_site_originIsSet = true;
}

bool App::safariSiteOriginIsSet() const
{
    return m_Safari_site_originIsSet;
}

void App::unsetSafari_site_origin()
{
    m_Safari_site_originIsSet = false;
}
utility::string_t App::getSafariPushId() const
{
    return m_Safari_push_id;
}

void App::setSafariPushId(const utility::string_t& value)
{
    m_Safari_push_id = value;
    m_Safari_push_idIsSet = true;
}

bool App::safariPushIdIsSet() const
{
    return m_Safari_push_idIsSet;
}

void App::unsetSafari_push_id()
{
    m_Safari_push_idIsSet = false;
}
utility::string_t App::getSafariIcon1616() const
{
    return m_Safari_icon_16_16;
}

void App::setSafariIcon1616(const utility::string_t& value)
{
    m_Safari_icon_16_16 = value;
    m_Safari_icon_16_16IsSet = true;
}

bool App::safariIcon1616IsSet() const
{
    return m_Safari_icon_16_16IsSet;
}

void App::unsetSafari_icon_16_16()
{
    m_Safari_icon_16_16IsSet = false;
}
utility::string_t App::getSafariIcon3232() const
{
    return m_Safari_icon_32_32;
}

void App::setSafariIcon3232(const utility::string_t& value)
{
    m_Safari_icon_32_32 = value;
    m_Safari_icon_32_32IsSet = true;
}

bool App::safariIcon3232IsSet() const
{
    return m_Safari_icon_32_32IsSet;
}

void App::unsetSafari_icon_32_32()
{
    m_Safari_icon_32_32IsSet = false;
}
utility::string_t App::getSafariIcon6464() const
{
    return m_Safari_icon_64_64;
}

void App::setSafariIcon6464(const utility::string_t& value)
{
    m_Safari_icon_64_64 = value;
    m_Safari_icon_64_64IsSet = true;
}

bool App::safariIcon6464IsSet() const
{
    return m_Safari_icon_64_64IsSet;
}

void App::unsetSafari_icon_64_64()
{
    m_Safari_icon_64_64IsSet = false;
}
utility::string_t App::getSafariIcon128128() const
{
    return m_Safari_icon_128_128;
}

void App::setSafariIcon128128(const utility::string_t& value)
{
    m_Safari_icon_128_128 = value;
    m_Safari_icon_128_128IsSet = true;
}

bool App::safariIcon128128IsSet() const
{
    return m_Safari_icon_128_128IsSet;
}

void App::unsetSafari_icon_128_128()
{
    m_Safari_icon_128_128IsSet = false;
}
utility::string_t App::getSafariIcon256256() const
{
    return m_Safari_icon_256_256;
}

void App::setSafariIcon256256(const utility::string_t& value)
{
    m_Safari_icon_256_256 = value;
    m_Safari_icon_256_256IsSet = true;
}

bool App::safariIcon256256IsSet() const
{
    return m_Safari_icon_256_256IsSet;
}

void App::unsetSafari_icon_256_256()
{
    m_Safari_icon_256_256IsSet = false;
}
utility::string_t App::getSiteName() const
{
    return m_Site_name;
}

void App::setSiteName(const utility::string_t& value)
{
    m_Site_name = value;
    m_Site_nameIsSet = true;
}

bool App::siteNameIsSet() const
{
    return m_Site_nameIsSet;
}

void App::unsetSite_name()
{
    m_Site_nameIsSet = false;
}
utility::string_t App::getBasicAuthKey() const
{
    return m_Basic_auth_key;
}

void App::setBasicAuthKey(const utility::string_t& value)
{
    m_Basic_auth_key = value;
    m_Basic_auth_keyIsSet = true;
}

bool App::basicAuthKeyIsSet() const
{
    return m_Basic_auth_keyIsSet;
}

void App::unsetBasic_auth_key()
{
    m_Basic_auth_keyIsSet = false;
}
utility::string_t App::getOrganizationId() const
{
    return m_Organization_id;
}

void App::setOrganizationId(const utility::string_t& value)
{
    m_Organization_id = value;
    m_Organization_idIsSet = true;
}

bool App::organizationIdIsSet() const
{
    return m_Organization_idIsSet;
}

void App::unsetOrganization_id()
{
    m_Organization_idIsSet = false;
}
bool App::isAdditionalDataIsRootPayload() const
{
    return m_Additional_data_is_root_payload;
}

void App::setAdditionalDataIsRootPayload(bool value)
{
    m_Additional_data_is_root_payload = value;
    m_Additional_data_is_root_payloadIsSet = true;
}

bool App::additionalDataIsRootPayloadIsSet() const
{
    return m_Additional_data_is_root_payloadIsSet;
}

void App::unsetAdditional_data_is_root_payload()
{
    m_Additional_data_is_root_payloadIsSet = false;
}
}
}
}
}


