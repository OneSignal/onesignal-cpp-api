/**
 * OneSignal
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: devrel@onesignal.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOneSignalAPIClient/model/TemplateResource.h"

namespace com {
namespace onesignal {
namespace client {
namespace model {



TemplateResource::TemplateResource()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Updated_at = utility::datetime();
    m_Updated_atIsSet = false;
    m_Channel = utility::conversions::to_string_t("");
    m_ChannelIsSet = false;
    m_ContentIsSet = false;
}

TemplateResource::~TemplateResource()
{
}

void TemplateResource::validate()
{
    // TODO: implement validation
}

web::json::value TemplateResource::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at"))] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at"))] = ModelBase::toJson(m_Updated_at);
    }
    if(m_ChannelIsSet)
    {
        val[utility::conversions::to_string_t(U("channel"))] = ModelBase::toJson(m_Channel);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t(U("content"))] = ModelBase::toJson(m_Content);
    }

    return val;
}

bool TemplateResource::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("channel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("channel")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChannel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChannel);
            setChannel(refVal_setChannel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContent);
            setContent(refVal_setContent);
        }
    }
    return ok;
}

void TemplateResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at")), m_Created_at));
    }
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at")), m_Updated_at));
    }
    if(m_ChannelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("channel")), m_Channel));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content")), m_Content));
    }
}

bool TemplateResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("channel"))))
    {
        utility::string_t refVal_setChannel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("channel"))), refVal_setChannel );
        setChannel(refVal_setChannel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content"))), refVal_setContent );
        setContent(refVal_setContent);
    }
    return ok;
}

utility::string_t TemplateResource::getId() const
{
    return m_Id;
}

void TemplateResource::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TemplateResource::idIsSet() const
{
    return m_IdIsSet;
}

void TemplateResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t TemplateResource::getName() const
{
    return m_Name;
}

void TemplateResource::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool TemplateResource::nameIsSet() const
{
    return m_NameIsSet;
}

void TemplateResource::unsetName()
{
    m_NameIsSet = false;
}
utility::datetime TemplateResource::getCreatedAt() const
{
    return m_Created_at;
}

void TemplateResource::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool TemplateResource::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void TemplateResource::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
utility::datetime TemplateResource::getUpdatedAt() const
{
    return m_Updated_at;
}

void TemplateResource::setUpdatedAt(const utility::datetime& value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}

bool TemplateResource::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void TemplateResource::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}
utility::string_t TemplateResource::getChannel() const
{
    return m_Channel;
}

void TemplateResource::setChannel(const utility::string_t& value)
{
    m_Channel = value;
    m_ChannelIsSet = true;
}

bool TemplateResource::channelIsSet() const
{
    return m_ChannelIsSet;
}

void TemplateResource::unsetChannel()
{
    m_ChannelIsSet = false;
}
std::map<utility::string_t, utility::string_t>& TemplateResource::getContent()
{
    return m_Content;
}

void TemplateResource::setContent(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool TemplateResource::contentIsSet() const
{
    return m_ContentIsSet;
}

void TemplateResource::unsetContent()
{
    m_ContentIsSet = false;
}
}
}
}
}


